{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Taskego (Khadamati) - Full-Stack Service Platform\n\n## Overview\n\nTaskego is a bilingual local service platform that connects clients with service providers for various needs like cleaning, plumbing, delivery, and maintenance. The application features a modern React frontend with TypeScript, an Express.js backend, and PostgreSQL database with Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter (lightweight client-side routing)\n- **Styling**: Tailwind CSS with custom Khadamati theme (blue/yellow color scheme)\n- **UI Components**: Radix UI primitives with shadcn/ui components\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Build Tool**: Vite for development and build process\n- **Animation**: Framer Motion for transitions and animations\n- **Internationalization**: Custom i18n system with English/Arabic support and RTL layout\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: JWT-based authentication system (roles: client, provider, admin)\n- **API Design**: RESTful endpoints with proper error handling\n- **Development**: Hot reload with Vite middleware integration\n\n### Database Schema\n- **Users**: Multi-role system (client, provider, admin) with profile management\n- **Service Categories**: Hierarchical service organization with bilingual support\n- **Services**: Provider-offered services with pricing, availability, and ratings\n- **Bookings**: Service appointment system with status tracking\n- **Reviews**: Rating and feedback system\n- **Notifications**: Real-time user notifications\n\n## Key Components\n\n### Frontend Components\n- **Navigation**: Responsive header with language switcher and mobile menu\n- **Service Management**: Service grid with filtering, search, and sorting\n- **Booking System**: Multi-step booking process with form validation\n- **Dashboard**: Separate dashboards for providers and admin users\n- **Common Components**: Reusable UI elements like scroll reveal, animated counters, floating chat\n\n### Backend Services\n- **Storage Layer**: Abstracted data access with interface-based design\n- **Route Handlers**: Organized API endpoints for different features\n- **Middleware**: Request logging, error handling, and authentication\n\n### UI System\n- **Design System**: Consistent component library with Tailwind CSS\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n- **Accessibility**: ARIA labels and keyboard navigation support\n- **Theme**: Custom color palette with CSS variables for theming\n\n## Data Flow\n\n1. **Client Requests**: Browser sends requests to Express server\n2. **API Processing**: Express routes handle business logic and data validation\n3. **Database Operations**: Drizzle ORM executes SQL queries against PostgreSQL\n4. **Response Formatting**: Structured JSON responses sent to frontend\n5. **State Management**: TanStack Query caches and synchronizes server state\n6. **UI Updates**: React components re-render based on state changes\n\n## External Dependencies\n\n### Frontend Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form with Zod validation\n- **UI Libraries**: Radix UI primitives, Lucide React icons, date-fns for dates\n- **Development**: Vite, TypeScript, Tailwind CSS, PostCSS\n- **Query Management**: TanStack Query for server state management\n\n### Backend Dependencies\n- **Core**: Express.js, TypeScript, Node.js\n- **Database**: Drizzle ORM, PostgreSQL (via @neondatabase/serverless)\n- **Development**: tsx for TypeScript execution, esbuild for production builds\n- **Session Management**: connect-pg-simple for PostgreSQL sessions\n\n### Database\n- **Provider**: Neon Database (PostgreSQL)\n- **ORM**: Drizzle with PostgreSQL dialect\n- **Migrations**: Drizzle Kit for schema management\n- **Connection**: Environment-based DATABASE_URL configuration\n\n## Deployment Strategy\n\n### Development Environment\n- **Frontend**: Vite dev server with hot reload\n- **Backend**: tsx with nodemon-like behavior for auto-restart\n- **Database**: Neon Database cloud PostgreSQL instance\n- **Integration**: Vite middleware serves frontend through Express in development\n\n### Production Build\n- **Frontend**: Vite builds static assets to `dist/public`\n- **Backend**: esbuild compiles TypeScript to ESM format in `dist/`\n- **Deployment**: Single Node.js process serves both API and static files\n- **Database**: Production PostgreSQL connection via DATABASE_URL\n\n### Configuration\n- **Environment Variables**: DATABASE_URL for database connection\n- **Build Scripts**: Separate dev, build, and start commands\n- **Static Assets**: Express serves built frontend from dist/public directory\n\n### Key Architectural Decisions\n\n1. **Monorepo Structure**: Client, server, and shared code in single repository for easier development and deployment\n2. **TypeScript Throughout**: End-to-end type safety from database to frontend\n3. **Shared Schema**: Common type definitions between frontend and backend via shared directory\n4. **Database-First**: Drizzle schema defines the data model with generated TypeScript types\n5. **Component-Based UI**: Reusable components with consistent design system\n6. **Internationalization**: Built-in bilingual support with RTL layout for Arabic\n7. **Authentication System**: Replit Auth with OpenID Connect integration\n8. **Modern Stack**: Latest versions of React, TypeScript, and tooling for optimal developer experience\n\n### Recent Changes\n\n**July 28, 2025**\n- ✅ Transformed Taskego into a premium, dynamic multilingual service marketplace\n- ✅ Enhanced CSS with advanced animations: floating, glow effects, parallax, service card flips\n- ✅ Created InteractiveServiceCard component with flip animations and hover effects\n- ✅ Built EnhancedFloatingChat with AI simulation and advanced animations\n- ✅ Added ParallaxHero component with scroll-triggered effects and gradient backgrounds\n- ✅ Created ScrollReveal component for smooth scroll animations\n- ✅ Added comprehensive route structure: /service/:slug, /chat, /terms, /providers/dashboard\n- ✅ Enhanced styling with Khadamati blue/yellow theme and glass morphism effects\n- ✅ Implemented ServiceDetail page with provider stats and booking functionality\n- ✅ Added Chat page with AI assistant simulation and suggestions\n- ✅ Created Terms page with professional legal content\n- ✅ Enhanced RTL support and bilingual functionality (English/Arabic)\n- ✅ Added premium animations throughout the application\n- ✅ Fixed CSS syntax issues and optimized performance\n\n**January 4, 2025**\n- ✅ Completely rebuilt backend with MongoDB + Gemini AI architecture\n- ✅ Implemented comprehensive payment system with Apple Pay integration\n- ✅ Added JWT-based authentication with role management (client/provider/admin)\n- ✅ Created bilingual AI chatbot with English/Arabic support\n- ✅ Built smart service recommendations using Gemini AI with fallbacks\n- ✅ Added sentiment analysis for reviews and feedback\n- ✅ Implemented AI-powered pricing suggestions for providers\n- ✅ Created comprehensive payment models supporting Apple Pay, cards, bank transfers, and wallet\n- ✅ Added payment processing with commission tracking and refund capabilities\n- ✅ Built secure Apple Pay session creation and transaction processing\n- ✅ Added Swagger API documentation for all endpoints\n- ✅ Implemented rate limiting and security middleware\n\n**July 18, 2025**\n- ✅ Created dedicated Login and SignUp pages with Replit Auth integration\n- ✅ Fixed provider button authentication routing issues\n- ✅ Restored proper authenticated home page structure (not landing page approach)\n- ✅ Added /login and /signup routes to App.tsx routing system\n- ✅ Implemented beautiful animated login/signup pages with proper Replit Auth redirect\n- ✅ Authentication system fully functional with proper login/logout flow","size_bytes":8044},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":484},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    log(`🚀 Taskego Server with AI & Payments ready!`);\n    log(`📚 API Documentation: http://localhost:${port}/docs`);\n    log(`🤖 AI Features: /api/ai/* and /api/chat-ai/*`);\n    log(`💳 Payment System: /api/payments/* (Apple Pay ready)`);\n  });\n})();\n","size_bytes":2316},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Check for required environment variables\nconst REPLIT_DOMAINS = process.env.REPLIT_DOMAINS || \"localhost:5000\";\nconst REPL_ID = process.env.REPL_ID || \"dev-app\";\nconst SESSION_SECRET = process.env.SESSION_SECRET || \"dev-secret-key-change-in-production\";\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      REPL_ID\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: SESSION_SECRET,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4376},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { aiService } from \"./ai\";\n\n// AI and payment functionality is now handled directly in routes\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n  // Service Categories Routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getServiceCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/service-categories\", async (req, res) => {\n    try {\n      const categories = await storage.getServiceCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch service categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const category = await storage.createServiceCategory(req.body);\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create category\" });\n    }\n  });\n\n  // AI-powered Chat Routes (Bilingual Assistant)\n  app.post(\"/api/chat-ai/message\", async (req, res) => {\n    try {\n      const { message, language = 'en', conversationHistory = [] } = req.body;\n      const userId = (req as any).user?.id || 'anonymous';\n\n      const response = await aiService.chatbotResponse(message, {\n        userId,\n        language,\n        conversationHistory\n      });\n\n      res.json({\n        response,\n        language,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('AI chat error:', error);\n      res.status(500).json({ error: \"AI chat service temporarily unavailable\" });\n    }\n  });\n\n  // AI Service Recommendations (Smart Matching)\n  app.post(\"/api/ai/recommendations\", async (req, res) => {\n    try {\n      const { query, location, budget, category, language = 'en' } = req.body;\n      const userId = (req as any).user?.id || 'anonymous';\n\n      // Get available services\n      const services = await storage.getServices({ category });\n      const categories = await storage.getServiceCategories();\n\n      const userPreferences = {\n        location: location || null,\n        budget: budget ? parseFloat(budget) : null,\n        preferredCategory: category || null,\n        language\n      };\n\n      const recommendations = await aiService.generateServiceRecommendations(\n        userId,\n        userPreferences,\n        services,\n        categories\n      );\n\n      res.json({\n        recommendations,\n        totalAvailable: services.length\n      });\n    } catch (error) {\n      console.error('AI recommendations error:', error);\n      res.status(500).json({ error: \"AI recommendation service unavailable\" });\n    }\n  });\n\n  // AI Sentiment Analysis for Reviews\n  app.post(\"/api/ai/sentiment\", async (req, res) => {\n    try {\n      const { text, referenceType, referenceId } = req.body;\n      \n      const sentimentResult = await aiService.analyzeSentiment(text);\n      \n      // Save sentiment analysis if reference provided\n      if (referenceType && referenceId) {\n        await storage.createSentimentAnalysis({\n          referenceType,\n          referenceId,\n          sentiment: sentimentResult.sentiment,\n          score: sentimentResult.score.toString(),\n          keywords: sentimentResult.keywords\n        });\n      }\n      \n      res.json(sentimentResult);\n    } catch (error) {\n      console.error('Sentiment analysis error:', error);\n      res.status(500).json({ error: \"Sentiment analysis service unavailable\" });\n    }\n  });\n\n  // AI Pricing Suggestions for Providers\n  app.post(\"/api/ai/pricing\", isAuthenticated, async (req, res) => {\n    try {\n      const { serviceType, location, duration } = req.body;\n      \n      // Get competitor prices from database\n      const similarServices = await storage.getServices({ category: serviceType });\n      const competitorPrices = similarServices.map(s => parseFloat(s.price)).filter(p => !isNaN(p));\n      \n      const pricingAnalysis = await aiService.generatePricingSuggestions(\n        serviceType,\n        location,\n        duration,\n        competitorPrices\n      );\n      \n      res.json(pricingAnalysis);\n    } catch (error) {\n      console.error('AI pricing error:', error);\n      res.status(500).json({ error: \"AI pricing service unavailable\" });\n    }\n  });\n\n  // Payment Processing Routes (simplified for MVP)\n  app.post(\"/api/payments/apple-pay/session\", async (req, res) => {\n    try {\n      // Mock Apple Pay session for development\n      res.json({\n        merchantSession: {\n          epochTimestamp: Date.now(),\n          expiresAt: Date.now() + (5 * 60 * 1000),\n          merchantSessionIdentifier: 'mock-session',\n          merchantIdentifier: 'merchant.com.taskego.app',\n          displayName: 'Taskego'\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Apple Pay session creation failed\" });\n    }\n  });\n\n  app.post(\"/api/payments/apple-pay/process\", isAuthenticated, async (req, res) => {\n    try {\n      const { amount, bookingId } = req.body;\n      // Mock payment processing for development\n      res.json({\n        message: 'Payment processed successfully',\n        paymentId: 'mock-payment-' + Date.now(),\n        status: 'completed',\n        amount\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Apple Pay processing failed\" });\n    }\n  });\n\n  app.post(\"/api/payments/intent\", isAuthenticated, async (req, res) => {\n    try {\n      const { amount, currency = 'USD', paymentMethod } = req.body;\n      \n      res.json({\n        paymentIntentId: 'mock-intent-' + Date.now(),\n        clientSecret: 'mock-secret',\n        amount,\n        currency,\n        paymentMethod\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Payment intent creation failed\" });\n    }\n  });\n\n  app.get(\"/api/payments/history\", isAuthenticated, async (req, res) => {\n    try {\n      // Mock payment history for development\n      res.json({\n        payments: [],\n        pagination: {\n          currentPage: 1,\n          totalPages: 0,\n          totalCount: 0,\n          hasMore: false\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get payment history\" });\n    }\n  });\n\n  app.get(\"/api/payments/methods/supported\", async (req, res) => {\n    try {\n      res.json({\n        supportedMethods: {\n          apple_pay: { available: true, processingFee: '2.9% + $0.30' },\n          card: { available: true, processingFee: '2.9% + $0.30' },\n          bank_transfer: { available: true, processingFee: '1%' },\n          wallet: { available: true, processingFee: 'Free' }\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get supported payment methods\" });\n    }\n  });\n\n  // Services Routes\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const { category, search, priceRange, sortBy } = req.query;\n      const services = await storage.getServices({\n        category: category as string,\n        search: search as string,\n        priceRange: priceRange as string,\n        sortBy: sortBy as string,\n      });\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get(\"/api/services/:id\", async (req, res) => {\n    try {\n      const service = await storage.getService(parseInt(req.params.id));\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch service\" });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      const service = await storage.createService(req.body);\n      res.json(service);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create service\" });\n    }\n  });\n\n  // Bookings Routes\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const booking = await storage.createBooking(req.body);\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create booking\" });\n    }\n  });\n\n  app.put(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const booking = await storage.updateBooking(parseInt(req.params.id), req.body);\n      if (!booking) {\n        return res.status(404).json({ error: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update booking\" });\n    }\n  });\n\n  // Provider Dashboard Routes\n  app.get(\"/api/provider/stats\", async (req, res) => {\n    try {\n      // Mock provider stats - in real app, this would be calculated from database\n      const stats = {\n        totalBookings: 247,\n        totalEarnings: 8547,\n        averageRating: 4.8,\n        activeServices: 3,\n      };\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch provider stats\" });\n    }\n  });\n\n  app.get(\"/api/provider/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getProviderBookings();\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch provider bookings\" });\n    }\n  });\n\n  app.get(\"/api/provider/services\", async (req, res) => {\n    try {\n      const services = await storage.getProviderServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch provider services\" });\n    }\n  });\n\n  // Admin Panel Routes\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/pending-approvals\", async (req, res) => {\n    try {\n      const approvals = await storage.getPendingApprovals();\n      res.json(approvals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pending approvals\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const { search } = req.query;\n      const users = await storage.getUsers(search as string);\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/admin/approve/:id\", async (req, res) => {\n    try {\n      const result = await storage.approveItem(parseInt(req.params.id));\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to approve item\" });\n    }\n  });\n\n  app.post(\"/api/admin/reject/:id\", async (req, res) => {\n    try {\n      const result = await storage.rejectItem(parseInt(req.params.id));\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject item\" });\n    }\n  });\n\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      // In a real app, this would send an email or store the message\n      console.log(\"Contact form submission:\", req.body);\n      res.json({ message: \"Message sent successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  // AI Routes\n  // AI Chatbot endpoint\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { message, conversationId, language = 'en' } = req.body;\n      const userId = (req as any).user?.id || 'anonymous';\n      \n      // Get conversation history if provided\n      let conversationHistory: Array<{ role: string; content: string }> = [];\n      if (conversationId) {\n        const messages = await storage.getChatMessages(conversationId);\n        conversationHistory = messages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }));\n      }\n      \n      const response = await aiService.chatbotResponse(message, {\n        userId,\n        language,\n        conversationHistory\n      });\n      \n      // Save the conversation\n      if (userId !== 'anonymous') {\n        let conversation = conversationId \n          ? await storage.getChatConversation(conversationId)\n          : null;\n        \n        if (!conversation) {\n          conversation = await storage.createChatConversation({\n              userId,\n              title: message.substring(0, 50) + '...',\n              language\n            });\n        }\n        \n        // Save user message\n        await storage.createChatMessage({\n          conversationId: conversation.id,\n          role: 'user',\n          content: message,\n          metadata: {}\n        });\n        \n        // Save AI response\n        await storage.createChatMessage({\n          conversationId: conversation.id,\n          role: 'assistant',\n          content: response,\n          metadata: {}\n        });\n      }\n      \n      res.json({ response, conversationId: conversationId || null });\n    } catch (error) {\n      console.error('AI chat error:', error);\n      res.status(500).json({ error: \"Failed to process chat message\" });\n    }\n  });\n\n  // AI Service Recommendations\n  app.get(\"/api/ai/recommendations\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req as any).user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const { location, budget, category } = req.query;\n      \n      const user = await storage.getUser(userId);\n      const services = await storage.getServices({});\n      const categories = await storage.getServiceCategories();\n      \n      const userPreferences = {\n        location: location || null,\n        budget: budget ? parseFloat(budget as string) : null,\n        preferredCategory: category || null,\n        language: user?.language || 'en'\n      };\n      \n      const recommendations = await aiService.generateServiceRecommendations(\n        userId,\n        userPreferences,\n        services,\n        categories\n      );\n      \n      // Save recommendations for tracking\n      if (recommendations.length > 0) {\n        await storage.createAiRecommendation({\n          userId,\n          serviceIds: recommendations.map(s => s.id) as any,\n          reason: 'Generated based on user preferences and service analysis',\n          confidence: '0.85'\n        });\n      }\n      \n      res.json(recommendations);\n    } catch (error) {\n      console.error('AI recommendations error:', error);\n      res.status(500).json({ error: \"Failed to generate recommendations\" });\n    }\n  });\n\n  // Smart Service Search with AI\n  app.post(\"/api/ai/search\", async (req, res) => {\n    try {\n      const { description } = req.body;\n      \n      const services = await storage.getServices({});\n      const categories = await storage.getServiceCategories();\n      \n      const searchResults = await aiService.matchServicesByDescription(\n        description,\n        services,\n        categories\n      );\n      \n      res.json(searchResults);\n    } catch (error) {\n      console.error('AI search error:', error);\n      res.status(500).json({ error: \"Failed to process AI search\" });\n    }\n  });\n\n  // AI Pricing Analysis\n  app.post(\"/api/ai/pricing\", async (req, res) => {\n    try {\n      const { serviceType, location, duration } = req.body;\n      \n      // Get competitor prices from database\n      const similarServices = await storage.getServices({ category: serviceType });\n      const competitorPrices = similarServices.map(s => parseFloat(s.price)).filter(p => !isNaN(p));\n      \n      const pricingAnalysis = await aiService.generatePricingSuggestions(\n        serviceType,\n        location,\n        duration,\n        competitorPrices\n      );\n      \n      res.json(pricingAnalysis);\n    } catch (error) {\n      console.error('AI pricing error:', error);\n      res.status(500).json({ error: \"Failed to analyze pricing\" });\n    }\n  });\n\n  // Sentiment Analysis for Reviews\n  app.post(\"/api/ai/sentiment\", async (req, res) => {\n    try {\n      const { text, referenceType, referenceId } = req.body;\n      \n      const sentimentResult = await aiService.analyzeSentiment(text);\n      \n      // Save sentiment analysis\n      if (referenceType && referenceId) {\n        await storage.createSentimentAnalysis({\n          referenceType,\n          referenceId,\n          sentiment: sentimentResult.sentiment,\n          score: sentimentResult.score.toString(),\n          keywords: sentimentResult.keywords\n        });\n      }\n      \n      res.json(sentimentResult);\n    } catch (error) {\n      console.error('Sentiment analysis error:', error);\n      res.status(500).json({ error: \"Failed to analyze sentiment\" });\n    }\n  });\n\n  // Provider Profile Assessment\n  app.get(\"/api/ai/provider-assessment\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req as any).user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'provider') {\n        return res.status(403).json({ error: \"Access denied. Provider role required.\" });\n      }\n      \n      const providerServices = await storage.getProviderServices();\n      const assessment = await aiService.assessProviderProfile(user, providerServices);\n      \n      res.json(assessment);\n    } catch (error) {\n      console.error('Provider assessment error:', error);\n      res.status(500).json({ error: \"Failed to assess provider profile\" });\n    }\n  });\n\n  // Auto-response generation for support\n  app.post(\"/api/ai/auto-response\", async (req, res) => {\n    try {\n      const { query, queryType, context } = req.body;\n      \n      const response = await aiService.generateAutoResponse(\n        query,\n        queryType || 'general',\n        context || {}\n      );\n      \n      res.json({ response });\n    } catch (error) {\n      console.error('Auto-response error:', error);\n      res.status(500).json({ error: \"Failed to generate auto-response\" });\n    }\n  });\n\n  // Get chat conversations for a user\n  app.get(\"/api/ai/conversations\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req as any).user?.id;\n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const conversations = await storage.getChatConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error('Get conversations error:', error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  // Get messages for a specific conversation\n  app.get(\"/api/ai/conversations/:id/messages\", isAuthenticated, async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const messages = await storage.getChatMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error('Get messages error:', error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Feedback on AI recommendations\n  app.post(\"/api/ai/recommendations/:id/feedback\", isAuthenticated, async (req, res) => {\n    try {\n      const recommendationId = parseInt(req.params.id);\n      const { feedback, isUsed } = req.body;\n      \n      await storage.updateAiRecommendation(recommendationId, {\n        userFeedback: feedback,\n        isUsed: isUsed || false\n      });\n      \n      res.json({ message: \"Feedback recorded successfully\" });\n    } catch (error) {\n      console.error('Recommendation feedback error:', error);\n      res.status(500).json({ error: \"Failed to record feedback\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20538},"server/storage.ts":{"content":"import { \n  users, \n  services, \n  serviceCategories, \n  bookings, \n  reviews, \n  notifications,\n  chatConversations,\n  chatMessages,\n  aiRecommendations,\n  sentimentAnalysis,\n  type User, \n  type InsertUser,\n  type UpsertUser,\n  type Service,\n  type InsertService,\n  type ServiceCategory,\n  type InsertServiceCategory,\n  type Booking,\n  type InsertBooking,\n  type Review,\n  type InsertReview,\n  type Notification,\n  type InsertNotification,\n  type ChatConversation,\n  type InsertChatConversation,\n  type ChatMessage,\n  type InsertChatMessage,\n  type AiRecommendation,\n  type InsertAiRecommendation,\n  type SentimentAnalysis,\n  type InsertSentimentAnalysis\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, like, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management - Updated for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User | undefined>;\n  getUsers(search?: string): Promise<User[]>;\n\n  // Service categories\n  getServiceCategories(): Promise<ServiceCategory[]>;\n  getServiceCategory(id: number): Promise<ServiceCategory | undefined>;\n  createServiceCategory(category: InsertServiceCategory): Promise<ServiceCategory>;\n\n  // Services\n  getServices(filters?: {\n    category?: string;\n    search?: string;\n    priceRange?: string;\n    sortBy?: string;\n  }): Promise<Service[]>;\n  getService(id: number): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: number, service: Partial<Service>): Promise<Service | undefined>;\n  getProviderServices(): Promise<Service[]>;\n\n  // Bookings\n  getBookings(): Promise<Booking[]>;\n  getBooking(id: number): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: number, booking: Partial<Booking>): Promise<Booking | undefined>;\n  getProviderBookings(): Promise<any[]>;\n\n  // Reviews\n  getReviews(serviceId?: number): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n\n  // Notifications\n  getNotifications(userId: number): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n\n  // Admin functions\n  getAdminStats(): Promise<any>;\n  getPendingApprovals(): Promise<any[]>;\n  approveItem(id: number): Promise<any>;\n  rejectItem(id: number): Promise<any>;\n\n  // AI-related functions\n  // Chat conversations\n  getChatConversations(userId: string): Promise<ChatConversation[]>;\n  getChatConversation(id: number): Promise<ChatConversation | undefined>;\n  createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n  updateChatConversation(id: number, conversation: Partial<ChatConversation>): Promise<ChatConversation | undefined>;\n  \n  // Chat messages\n  getChatMessages(conversationId: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  \n  // AI recommendations\n  getAiRecommendations(userId: string): Promise<AiRecommendation[]>;\n  createAiRecommendation(recommendation: InsertAiRecommendation): Promise<AiRecommendation>;\n  updateAiRecommendation(id: number, recommendation: Partial<AiRecommendation>): Promise<AiRecommendation | undefined>;\n  \n  // Sentiment analysis\n  getSentimentAnalysis(referenceType: string, referenceId: number): Promise<SentimentAnalysis | undefined>;\n  createSentimentAnalysis(analysis: InsertSentimentAnalysis): Promise<SentimentAnalysis>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private services: Map<number, Service>;\n  private serviceCategories: Map<number, ServiceCategory>;\n  private bookings: Map<number, Booking>;\n  private reviews: Map<number, Review>;\n  private notifications: Map<number, Notification>;\n  private pendingApprovals: Map<number, any>;\n  private currentUserId: number;\n  private currentServiceId: number;\n  private currentCategoryId: number;\n  private currentBookingId: number;\n  private currentReviewId: number;\n  private currentNotificationId: number;\n  private currentApprovalId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.services = new Map();\n    this.serviceCategories = new Map();\n    this.bookings = new Map();\n    this.reviews = new Map();\n    this.notifications = new Map();\n    this.pendingApprovals = new Map();\n    this.currentUserId = 1;\n    this.currentServiceId = 1;\n    this.currentCategoryId = 1;\n    this.currentBookingId = 1;\n    this.currentReviewId = 1;\n    this.currentNotificationId = 1;\n    this.currentApprovalId = 1;\n\n    // Initialize with mock data\n    this.initializeMockData();\n  }\n\n  private initializeMockData() {\n    // Mock service categories\n    const mockCategories = [\n      { name: 'Cleaning', nameAr: 'تنظيف', description: 'Professional cleaning services', descriptionAr: 'خدمات تنظيف احترافية', icon: '🧹', color: '#3B82F6', isActive: true },\n      { name: 'Plumbing', nameAr: 'سباكة', description: 'Plumbing repairs and installations', descriptionAr: 'إصلاحات وتركيبات السباكة', icon: '🔧', color: '#10B981', isActive: true },\n      { name: 'Electrical', nameAr: 'كهرباء', description: 'Electrical services and repairs', descriptionAr: 'خدمات كهربائية وإصلاحات', icon: '⚡', color: '#F59E0B', isActive: true },\n      { name: 'Delivery', nameAr: 'توصيل', description: 'Fast delivery services', descriptionAr: 'خدمات توصيل سريعة', icon: '🚚', color: '#EF4444', isActive: true },\n      { name: 'Maintenance', nameAr: 'صيانة', description: 'General maintenance services', descriptionAr: 'خدمات صيانة عامة', icon: '🔨', color: '#8B5CF6', isActive: true },\n      { name: 'Painting', nameAr: 'دهان', description: 'Professional painting services', descriptionAr: 'خدمات دهان احترافية', icon: '🎨', color: '#06B6D4', isActive: true },\n    ];\n\n    mockCategories.forEach(category => {\n      const cat: ServiceCategory = {\n        id: this.currentCategoryId++,\n        ...category,\n        description: category.description || null,\n        descriptionAr: category.descriptionAr || null,\n        isActive: category.isActive ?? true,\n        createdAt: new Date(),\n      };\n      this.serviceCategories.set(cat.id, cat);\n    });\n\n    // Mock users\n    const mockUsers = [\n      { email: 'sarah@example.com', firstName: 'Sarah', lastName: 'Johnson', role: 'provider', language: 'en' },\n      { email: 'ahmed@example.com', firstName: 'Ahmed', lastName: 'Hassan', role: 'provider', language: 'ar' },\n      { email: 'john@example.com', firstName: 'John', lastName: 'Smith', role: 'client', language: 'en' },\n    ];\n\n    mockUsers.forEach(user => {\n      const u: User = {\n        id: this.currentUserId++,\n        ...user,\n        role: user.role || 'client',\n        language: user.language || 'en',\n        password: 'hashedpassword',\n        phone: null,\n        profileImage: null,\n        isVerified: true,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.users.set(u.id, u);\n    });\n\n    // Mock services with multiple providers per category\n    const mockServices = [\n      // House Cleaning Services\n      {\n        providerId: 1,\n        categoryId: 1,\n        title: 'Premium House Cleaning',\n        description: 'Deep cleaning service for your home with eco-friendly products',\n        price: '35.00',\n        priceType: 'hourly',\n        duration: 120,\n        location: 'Downtown',\n        status: 'approved',\n        rating: '4.9',\n        reviewCount: 127,\n        images: ['https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 2,\n        categoryId: 1,\n        title: 'Express Cleaning Service',\n        description: 'Quick and efficient home cleaning for busy professionals',\n        price: '28.00',\n        priceType: 'hourly',\n        duration: 90,\n        location: 'City Center',\n        status: 'approved',\n        rating: '4.7',\n        reviewCount: 89,\n        images: ['https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 3,\n        categoryId: 1,\n        title: 'Deep Clean Specialists',\n        description: 'Thorough deep cleaning with specialized equipment',\n        price: '42.00',\n        priceType: 'hourly',\n        duration: 180,\n        location: 'Suburbs',\n        status: 'approved',\n        rating: '4.8',\n        reviewCount: 156,\n        images: ['https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800&h=400&fit=crop'],\n      },\n      // Plumbing Services\n      {\n        providerId: 4,\n        categoryId: 2,\n        title: 'Emergency Plumbing',\n        description: '24/7 emergency plumbing services for urgent repairs',\n        price: '45.00',\n        priceType: 'hourly',\n        duration: 60,\n        location: 'Citywide',\n        status: 'approved',\n        rating: '4.8',\n        reviewCount: 203,\n        images: ['https://images.unsplash.com/photo-1585704032915-c3400ca199e7?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 5,\n        categoryId: 2,\n        title: 'Residential Plumbing Pro',\n        description: 'Expert residential plumbing installation and repair',\n        price: '40.00',\n        priceType: 'hourly',\n        duration: 90,\n        location: 'Residential Areas',\n        status: 'approved',\n        rating: '4.9',\n        reviewCount: 134,\n        images: ['https://images.unsplash.com/photo-1607472586893-edb57bdc0e39?w=800&h=400&fit=crop'],\n      },\n      // Electrical Services\n      {\n        providerId: 6,\n        categoryId: 3,\n        title: 'Licensed Electrician',\n        description: 'Professional electrical installations and safety inspections',\n        price: '55.00',\n        priceType: 'hourly',\n        duration: 90,\n        location: 'Metro Area',\n        status: 'approved',\n        rating: '4.9',\n        reviewCount: 178,\n        images: ['https://images.unsplash.com/photo-1621905252507-b35492cc74b4?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 7,\n        categoryId: 3,\n        title: 'Home Electrical Solutions',\n        description: 'Comprehensive electrical services for residential properties',\n        price: '48.00',\n        priceType: 'hourly',\n        duration: 120,\n        location: 'Suburban Areas',\n        status: 'approved',\n        rating: '4.7',\n        reviewCount: 92,\n        images: ['https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=400&fit=crop'],\n      },\n      // Delivery Services\n      {\n        providerId: 8,\n        categoryId: 4,\n        title: 'Express Delivery',\n        description: 'Same-day delivery service for packages and documents',\n        price: '15.00',\n        priceType: 'fixed',\n        duration: 30,\n        location: 'City Center',\n        status: 'approved',\n        rating: '4.6',\n        reviewCount: 267,\n        images: ['https://images.unsplash.com/photo-1566576912321-d58ddd7a6088?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 9,\n        categoryId: 4,\n        title: 'Food & Grocery Delivery',\n        description: 'Fast food and grocery delivery to your doorstep',\n        price: '12.00',\n        priceType: 'fixed',\n        duration: 45,\n        location: 'Metro Area',\n        status: 'approved',\n        rating: '4.5',\n        reviewCount: 189,\n        images: ['https://images.unsplash.com/photo-1526947425960-945c6e72858f?w=800&h=400&fit=crop'],\n      },\n      // Maintenance Services\n      {\n        providerId: 10,\n        categoryId: 5,\n        title: 'Home Maintenance Pro',\n        description: 'General repairs and maintenance for residential properties',\n        price: '30.00',\n        priceType: 'hourly',\n        duration: 180,\n        location: 'Residential Areas',\n        status: 'approved',\n        rating: '4.8',\n        reviewCount: 145,\n        images: ['https://images.unsplash.com/photo-1504148455328-c376907d081c?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 11,\n        categoryId: 5,\n        title: 'Handyman Services',\n        description: 'Skilled handyman for all your home repair needs',\n        price: '25.00',\n        priceType: 'hourly',\n        duration: 120,\n        location: 'Citywide',\n        status: 'approved',\n        rating: '4.6',\n        reviewCount: 78,\n        images: ['https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=800&h=400&fit=crop'],\n      },\n      // Painting Services\n      {\n        providerId: 12,\n        categoryId: 6,\n        title: 'Interior Painting Experts',\n        description: 'Professional interior painting with premium quality paints',\n        price: '35.00',\n        priceType: 'hourly',\n        duration: 240,\n        location: 'Metro Area',\n        status: 'approved',\n        rating: '4.9',\n        reviewCount: 198,\n        images: ['https://images.unsplash.com/photo-1562259949-e8e7689d7828?w=800&h=400&fit=crop'],\n      },\n      {\n        providerId: 13,\n        categoryId: 6,\n        title: 'Exterior Painting Service',\n        description: 'Weather-resistant exterior painting for homes and buildings',\n        price: '38.00',\n        priceType: 'hourly',\n        duration: 300,\n        location: 'Residential Areas',\n        status: 'approved',\n        rating: '4.7',\n        reviewCount: 124,\n        images: ['https://images.unsplash.com/photo-1589939705384-5185137a7f0f?w=800&h=400&fit=crop'],\n      },\n    ];\n\n    mockServices.forEach(service => {\n      const s: Service = {\n        id: this.currentServiceId++,\n        ...service,\n        status: service.status || 'approved',\n        duration: service.duration || 60,\n        titleAr: null,\n        descriptionAr: null,\n        images: service.images || [],\n        availability: {},\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.services.set(s.id, s);\n    });\n\n    // Mock pending approvals\n    const mockApprovals = [\n      {\n        name: 'David Wilson',\n        type: 'provider',\n        service: 'Electrical Services',\n        date: '2024-01-20',\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n      },\n      {\n        name: 'Lisa Anderson',\n        type: 'service',\n        service: 'Pet Grooming',\n        date: '2024-01-18',\n        avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'\n      },\n    ];\n\n    mockApprovals.forEach(approval => {\n      const a = {\n        id: this.currentApprovalId++,\n        ...approval,\n      };\n      this.pendingApprovals.set(a.id, a);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.id === id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = (this.currentUserId++).toString();\n    const user: User = {\n      ...insertUser,\n      id,\n      isVerified: false,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(this.currentUserId - 1, user);\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = await this.getUser(userData.id);\n    if (existingUser) {\n      return await this.updateUser(userData.id, userData) || existingUser;\n    } else {\n      return await this.createUser(userData);\n    }\n  }\n\n  async updateUser(id: string, userData: Partial<User>): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n\n    const updatedUser = { ...user, ...userData, updatedAt: new Date() };\n    const numericId = Array.from(this.users.entries()).find(([_, u]) => u.id === id)?.[0];\n    if (numericId) {\n      this.users.set(numericId, updatedUser);\n    }\n    return updatedUser;\n  }\n\n  async getUsers(search?: string): Promise<User[]> {\n    let users = Array.from(this.users.values());\n    \n    if (search) {\n      const searchLower = search.toLowerCase();\n      users = users.filter(user => \n        (user.firstName?.toLowerCase() || '').includes(searchLower) ||\n        (user.lastName?.toLowerCase() || '').includes(searchLower) ||\n        (user.email?.toLowerCase() || '').includes(searchLower)\n      );\n    }\n\n    return users;\n  }\n\n  async getServiceCategories(): Promise<ServiceCategory[]> {\n    return Array.from(this.serviceCategories.values()).filter(cat => cat.isActive);\n  }\n\n  async getServiceCategory(id: number): Promise<ServiceCategory | undefined> {\n    return this.serviceCategories.get(id);\n  }\n\n  async createServiceCategory(insertCategory: InsertServiceCategory): Promise<ServiceCategory> {\n    const id = this.currentCategoryId++;\n    const category: ServiceCategory = {\n      ...insertCategory,\n      id,\n      createdAt: new Date(),\n    };\n    this.serviceCategories.set(id, category);\n    return category;\n  }\n\n  async getServices(filters?: {\n    category?: string;\n    search?: string;\n    priceRange?: string;\n    sortBy?: string;\n  }): Promise<Service[]> {\n    let services = Array.from(this.services.values()).filter(service => \n      service.isActive && service.status === 'approved'\n    );\n\n    if (filters?.category) {\n      const category = Array.from(this.serviceCategories.values()).find(cat => \n        cat.name.toLowerCase() === filters.category?.toLowerCase()\n      );\n      if (category) {\n        services = services.filter(service => service.categoryId === category.id);\n      }\n    }\n\n    if (filters?.search) {\n      const searchLower = filters.search.toLowerCase();\n      services = services.filter(service => \n        service.title.toLowerCase().includes(searchLower) ||\n        service.description.toLowerCase().includes(searchLower)\n      );\n    }\n\n    if (filters?.priceRange) {\n      const [min, max] = filters.priceRange.split('-').map(p => parseFloat(p));\n      services = services.filter(service => {\n        const price = parseFloat(service.price);\n        if (max) {\n          return price >= min && price <= max;\n        } else {\n          return price >= min;\n        }\n      });\n    }\n\n    if (filters?.sortBy) {\n      switch (filters.sortBy) {\n        case 'rating':\n          services.sort((a, b) => parseFloat(b.rating) - parseFloat(a.rating));\n          break;\n        case 'price-low':\n          services.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n          break;\n        case 'price-high':\n          services.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));\n          break;\n        case 'newest':\n          services.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n          break;\n      }\n    }\n\n    return services;\n  }\n\n  async getService(id: number): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = this.currentServiceId++;\n    const service: Service = {\n      ...insertService,\n      id,\n      rating: '0.00',\n      reviewCount: 0,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: number, serviceData: Partial<Service>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n\n    const updatedService = { ...service, ...serviceData, updatedAt: new Date() };\n    this.services.set(id, updatedService);\n    return updatedService;\n  }\n\n  async getProviderServices(): Promise<Service[]> {\n    // Mock provider services - in real app, this would filter by provider ID\n    return Array.from(this.services.values()).slice(0, 3);\n  }\n\n  async getBookings(): Promise<Booking[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBooking(id: number): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = this.currentBookingId++;\n    const booking: Booking = {\n      ...insertBooking,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBooking(id: number, bookingData: Partial<Booking>): Promise<Booking | undefined> {\n    const booking = this.bookings.get(id);\n    if (!booking) return undefined;\n\n    const updatedBooking = { ...booking, ...bookingData, updatedAt: new Date() };\n    this.bookings.set(id, updatedBooking);\n    return updatedBooking;\n  }\n\n  async getProviderBookings(): Promise<any[]> {\n    // Mock provider bookings\n    return [\n      {\n        id: 1,\n        clientName: 'John Smith',\n        service: 'House Cleaning',\n        date: '2024-01-20',\n        status: 'completed',\n        amount: 75,\n        clientAvatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n      },\n      {\n        id: 2,\n        clientName: 'Emily Johnson',\n        service: 'Deep Cleaning',\n        date: '2024-01-18',\n        status: 'in_progress',\n        amount: 120,\n        clientAvatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'\n      },\n    ];\n  }\n\n  async getReviews(serviceId?: number): Promise<Review[]> {\n    let reviews = Array.from(this.reviews.values());\n    if (serviceId) {\n      reviews = reviews.filter(review => review.serviceId === serviceId);\n    }\n    return reviews;\n  }\n\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const id = this.currentReviewId++;\n    const review: Review = {\n      ...insertReview,\n      id,\n      createdAt: new Date(),\n    };\n    this.reviews.set(id, review);\n    return review;\n  }\n\n  async getNotifications(userId: number): Promise<Notification[]> {\n    return Array.from(this.notifications.values()).filter(notification => \n      notification.userId === userId\n    );\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = this.currentNotificationId++;\n    const notification: Notification = {\n      ...insertNotification,\n      id,\n      createdAt: new Date(),\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async getAdminStats(): Promise<any> {\n    return {\n      totalUsers: this.users.size,\n      activeProviders: Array.from(this.users.values()).filter(u => u.role === 'provider' && u.isActive).length,\n      monthlyBookings: 15842,\n      monthlyRevenue: 124578,\n    };\n  }\n\n  async getPendingApprovals(): Promise<any[]> {\n    return Array.from(this.pendingApprovals.values());\n  }\n\n  async approveItem(id: number): Promise<any> {\n    const item = this.pendingApprovals.get(id);\n    if (!item) return null;\n\n    this.pendingApprovals.delete(id);\n    return { success: true, message: 'Item approved successfully' };\n  }\n\n  async rejectItem(id: number): Promise<any> {\n    const item = this.pendingApprovals.get(id);\n    if (!item) return null;\n\n    this.pendingApprovals.delete(id);\n    return { success: true, message: 'Item rejected successfully' };\n  }\n\n  // AI-related methods for MemStorage\n  async getChatConversations(userId: string): Promise<ChatConversation[]> {\n    return [];\n  }\n\n  async getChatConversation(id: number): Promise<ChatConversation | undefined> {\n    return undefined;\n  }\n\n  async createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation> {\n    return {\n      id: 1,\n      ...conversation,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n  }\n\n  async updateChatConversation(id: number, conversation: Partial<ChatConversation>): Promise<ChatConversation | undefined> {\n    return undefined;\n  }\n\n  async getChatMessages(conversationId: number): Promise<ChatMessage[]> {\n    return [];\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    return {\n      id: 1,\n      ...message,\n      createdAt: new Date()\n    };\n  }\n\n  async getAiRecommendations(userId: string): Promise<AiRecommendation[]> {\n    return [];\n  }\n\n  async createAiRecommendation(recommendation: InsertAiRecommendation): Promise<AiRecommendation> {\n    return {\n      id: 1,\n      ...recommendation,\n      createdAt: new Date()\n    };\n  }\n\n  async updateAiRecommendation(id: number, recommendation: Partial<AiRecommendation>): Promise<AiRecommendation | undefined> {\n    return undefined;\n  }\n\n  async getSentimentAnalysis(referenceType: string, referenceId: number): Promise<SentimentAnalysis | undefined> {\n    return undefined;\n  }\n\n  async createSentimentAnalysis(analysis: InsertSentimentAnalysis): Promise<SentimentAnalysis> {\n    return {\n      id: 1,\n      ...analysis,\n      processedAt: new Date()\n    };\n  }\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  // User management - Updated for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        id: insertUser.id || crypto.randomUUID(),\n        email: insertUser.email || null,\n        firstName: insertUser.firstName || null,\n        lastName: insertUser.lastName || null,\n        profileImageUrl: insertUser.profileImageUrl || null,\n        role: insertUser.role || 'client',\n        language: insertUser.language || 'en',\n        isVerified: insertUser.isVerified || false,\n        isActive: insertUser.isActive || true,\n      })\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getUsers(search?: string): Promise<User[]> {\n    if (search) {\n      return await db.select().from(users).where(\n        and(\n          ilike(users.firstName, `%${search}%`),\n          ilike(users.lastName, `%${search}%`),\n          ilike(users.email, `%${search}%`)\n        )\n      );\n    }\n    \n    return await db.select().from(users);\n  }\n\n  // Service categories\n  async getServiceCategories(): Promise<ServiceCategory[]> {\n    return await db.select().from(serviceCategories).where(eq(serviceCategories.isActive, true));\n  }\n\n  async getServiceCategory(id: number): Promise<ServiceCategory | undefined> {\n    const [category] = await db.select().from(serviceCategories).where(eq(serviceCategories.id, id));\n    return category || undefined;\n  }\n\n  async createServiceCategory(insertCategory: InsertServiceCategory): Promise<ServiceCategory> {\n    const [category] = await db\n      .insert(serviceCategories)\n      .values(insertCategory)\n      .returning();\n    return category;\n  }\n\n  // Services\n  async getServices(filters?: {\n    category?: string;\n    search?: string;\n    priceRange?: string;\n    sortBy?: string;\n  }): Promise<Service[]> {\n    let baseQuery = db.select().from(services).where(eq(services.isActive, true));\n    \n    if (filters?.category) {\n      baseQuery = baseQuery.where(eq(services.categoryId, parseInt(filters.category)));\n    }\n    \n    if (filters?.search) {\n      baseQuery = baseQuery.where(\n        and(\n          ilike(services.title, `%${filters.search}%`),\n          ilike(services.description, `%${filters.search}%`)\n        )\n      );\n    }\n    \n    if (filters?.sortBy === 'price-low') {\n      return await baseQuery.orderBy(asc(services.price));\n    } else if (filters?.sortBy === 'price-high') {\n      return await baseQuery.orderBy(desc(services.price));\n    } else if (filters?.sortBy === 'rating') {\n      return await baseQuery.orderBy(desc(services.rating));\n    } else {\n      return await baseQuery.orderBy(desc(services.createdAt));\n    }\n  }\n\n  async getService(id: number): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service || undefined;\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const [service] = await db\n      .insert(services)\n      .values(insertService)\n      .returning();\n    return service;\n  }\n\n  async updateService(id: number, serviceData: Partial<Service>): Promise<Service | undefined> {\n    const [service] = await db\n      .update(services)\n      .set({ ...serviceData, updatedAt: new Date() })\n      .where(eq(services.id, id))\n      .returning();\n    return service || undefined;\n  }\n\n  async getProviderServices(): Promise<Service[]> {\n    return await db.select().from(services).orderBy(desc(services.createdAt));\n  }\n\n  // Bookings\n  async getBookings(): Promise<Booking[]> {\n    return await db.select().from(bookings).orderBy(desc(bookings.createdAt));\n  }\n\n  async getBooking(id: number): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking || undefined;\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const [booking] = await db\n      .insert(bookings)\n      .values(insertBooking)\n      .returning();\n    return booking;\n  }\n\n  async updateBooking(id: number, bookingData: Partial<Booking>): Promise<Booking | undefined> {\n    const [booking] = await db\n      .update(bookings)\n      .set({ ...bookingData, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking || undefined;\n  }\n\n  async getProviderBookings(): Promise<any[]> {\n    return await db.select().from(bookings).orderBy(desc(bookings.createdAt));\n  }\n\n  // Reviews\n  async getReviews(): Promise<Review[]> {\n    return await db.select().from(reviews).orderBy(desc(reviews.createdAt));\n  }\n\n  async getReview(id: number): Promise<Review | undefined> {\n    const [review] = await db.select().from(reviews).where(eq(reviews.id, id));\n    return review || undefined;\n  }\n\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const [review] = await db\n      .insert(reviews)\n      .values(insertReview)\n      .returning();\n    return review;\n  }\n\n  async getServiceReviews(serviceId: number): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.serviceId, serviceId)).orderBy(desc(reviews.createdAt));\n  }\n\n  // Notifications\n  async getNotifications(): Promise<Notification[]> {\n    return await db.select().from(notifications).orderBy(desc(notifications.createdAt));\n  }\n\n  async getNotification(id: number): Promise<Notification | undefined> {\n    const [notification] = await db.select().from(notifications).where(eq(notifications.id, id));\n    return notification || undefined;\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values(insertNotification)\n      .returning();\n    return notification;\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db.select().from(notifications).where(eq(notifications.userId, userId)).orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: number): Promise<void> {\n    await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id));\n  }\n\n  // Admin methods\n  async getPendingApprovals(): Promise<any[]> {\n    return await db.select().from(services).where(eq(services.status, 'pending'));\n  }\n\n  async approveService(serviceId: number): Promise<void> {\n    await db.update(services).set({ status: 'approved' }).where(eq(services.id, serviceId));\n  }\n\n  async rejectService(serviceId: number): Promise<void> {\n    await db.update(services).set({ status: 'rejected' }).where(eq(services.id, serviceId));\n  }\n\n  async getDashboardStats(): Promise<any> {\n    // This would return aggregate statistics for the dashboard\n    return {\n      totalUsers: 0,\n      totalServices: 0,\n      totalBookings: 0,\n      totalRevenue: 0,\n      pendingApprovals: 0,\n      activeProviders: 0,\n    };\n  }\n\n  async getAdminStats(): Promise<any> {\n    return this.getDashboardStats();\n  }\n\n  async approveItem(id: number): Promise<{ success: boolean; message: string }> {\n    await this.approveService(id);\n    return { success: true, message: 'Item approved successfully' };\n  }\n\n  async rejectItem(id: number): Promise<{ success: boolean; message: string }> {\n    await this.rejectService(id);\n    return { success: true, message: 'Item rejected successfully' };\n  }\n\n  // AI-related methods for DatabaseStorage\n  async getChatConversations(userId: string): Promise<ChatConversation[]> {\n    return await db.select().from(chatConversations)\n      .where(eq(chatConversations.userId, userId))\n      .orderBy(desc(chatConversations.updatedAt));\n  }\n\n  async getChatConversation(id: number): Promise<ChatConversation | undefined> {\n    const [conversation] = await db.select().from(chatConversations)\n      .where(eq(chatConversations.id, id));\n    return conversation || undefined;\n  }\n\n  async createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation> {\n    const [created] = await db.insert(chatConversations)\n      .values(conversation)\n      .returning();\n    return created;\n  }\n\n  async updateChatConversation(id: number, conversation: Partial<ChatConversation>): Promise<ChatConversation | undefined> {\n    const [updated] = await db.update(chatConversations)\n      .set({ ...conversation, updatedAt: new Date() })\n      .where(eq(chatConversations.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getChatMessages(conversationId: number): Promise<ChatMessage[]> {\n    return await db.select().from(chatMessages)\n      .where(eq(chatMessages.conversationId, conversationId))\n      .orderBy(chatMessages.createdAt);\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [created] = await db.insert(chatMessages)\n      .values(message)\n      .returning();\n    return created;\n  }\n\n  async getAiRecommendations(userId: string): Promise<AiRecommendation[]> {\n    return await db.select().from(aiRecommendations)\n      .where(eq(aiRecommendations.userId, userId))\n      .orderBy(desc(aiRecommendations.createdAt));\n  }\n\n  async createAiRecommendation(recommendation: InsertAiRecommendation): Promise<AiRecommendation> {\n    const [created] = await db.insert(aiRecommendations)\n      .values(recommendation)\n      .returning();\n    return created;\n  }\n\n  async updateAiRecommendation(id: number, recommendation: Partial<AiRecommendation>): Promise<AiRecommendation | undefined> {\n    const [updated] = await db.update(aiRecommendations)\n      .set(recommendation)\n      .where(eq(aiRecommendations.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getSentimentAnalysis(referenceType: string, referenceId: number): Promise<SentimentAnalysis | undefined> {\n    const [analysis] = await db.select().from(sentimentAnalysis)\n      .where(\n        and(\n          eq(sentimentAnalysis.referenceType, referenceType),\n          eq(sentimentAnalysis.referenceId, referenceId)\n        )\n      );\n    return analysis || undefined;\n  }\n\n  async createSentimentAnalysis(analysis: InsertSentimentAnalysis): Promise<SentimentAnalysis> {\n    const [created] = await db.insert(sentimentAnalysis)\n      .values(analysis)\n      .returning();\n    return created;\n  }\n}\n\nexport const storage: IStorage = new DatabaseStorage();\n","size_bytes":36473},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"frontend\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2265},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, jsonb, varchar, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: text(\"role\").notNull().default(\"client\"), // client, provider, admin\n  language: text(\"language\").notNull().default(\"en\"), // en, ar\n  isVerified: boolean(\"is_verified\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const serviceCategories = pgTable(\"service_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  nameAr: text(\"name_ar\").notNull(),\n  description: text(\"description\"),\n  descriptionAr: text(\"description_ar\"),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: serial(\"id\").primaryKey(),\n  providerId: varchar(\"provider_id\").references(() => users.id).notNull(),\n  categoryId: integer(\"category_id\").references(() => serviceCategories.id).notNull(),\n  title: text(\"title\").notNull(),\n  titleAr: text(\"title_ar\"),\n  description: text(\"description\").notNull(),\n  descriptionAr: text(\"description_ar\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  priceType: text(\"price_type\").notNull().default(\"hourly\"), // hourly, fixed, custom\n  duration: integer(\"duration\"), // in minutes\n  location: text(\"location\"),\n  images: jsonb(\"images\").default([]),\n  availability: jsonb(\"availability\").default({}),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected, inactive\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  reviewCount: integer(\"review_count\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: serial(\"id\").primaryKey(),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  serviceId: integer(\"service_id\").references(() => services.id).notNull(),\n  providerId: varchar(\"provider_id\").references(() => users.id).notNull(),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  scheduledTime: text(\"scheduled_time\").notNull(),\n  duration: integer(\"duration\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  clientAddress: text(\"client_address\").notNull(),\n  clientPhone: text(\"client_phone\").notNull(),\n  specialInstructions: text(\"special_instructions\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, in_progress, completed, cancelled\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, refunded\n  cancellationReason: text(\"cancellation_reason\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: serial(\"id\").primaryKey(),\n  bookingId: integer(\"booking_id\").references(() => bookings.id).notNull(),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  providerId: varchar(\"provider_id\").references(() => users.id).notNull(),\n  serviceId: integer(\"service_id\").references(() => services.id).notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // booking, payment, system, etc.\n  isRead: boolean(\"is_read\").default(false),\n  metadata: jsonb(\"metadata\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI-related tables\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  language: text(\"language\").notNull().default(\"en\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: serial(\"id\").primaryKey(),\n  conversationId: integer(\"conversation_id\").references(() => chatConversations.id).notNull(),\n  role: text(\"role\").notNull(), // user, assistant, system\n  content: text(\"content\").notNull(),\n  metadata: jsonb(\"metadata\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const aiRecommendations = pgTable(\"ai_recommendations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  serviceIds: jsonb(\"service_ids\").notNull(), // array of recommended service IDs\n  reason: text(\"reason\"), // AI reasoning for recommendations\n  confidence: decimal(\"confidence\", { precision: 3, scale: 2 }), // confidence score 0-1\n  userFeedback: text(\"user_feedback\"), // positive, negative, neutral\n  isUsed: boolean(\"is_used\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sentimentAnalysis = pgTable(\"sentiment_analysis\", {\n  id: serial(\"id\").primaryKey(),\n  referenceType: text(\"reference_type\").notNull(), // review, message, feedback\n  referenceId: integer(\"reference_id\").notNull(),\n  sentiment: text(\"sentiment\").notNull(), // positive, negative, neutral\n  score: decimal(\"score\", { precision: 4, scale: 3 }), // sentiment score -1 to 1\n  keywords: jsonb(\"keywords\").default([]),\n  processedAt: timestamp(\"processed_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceCategorySchema = createInsertSchema(serviceCategories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiRecommendationSchema = createInsertSchema(aiRecommendations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSentimentAnalysisSchema = createInsertSchema(sentimentAnalysis).omit({\n  id: true,\n  processedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type ServiceCategory = typeof serviceCategories.$inferSelect;\nexport type InsertServiceCategory = z.infer<typeof insertServiceCategorySchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type ChatConversation = typeof chatConversations.$inferSelect;\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type AiRecommendation = typeof aiRecommendations.$inferSelect;\nexport type InsertAiRecommendation = z.infer<typeof insertAiRecommendationSchema>;\nexport type SentimentAnalysis = typeof sentimentAnalysis.$inferSelect;\nexport type InsertSentimentAnalysis = z.infer<typeof insertSentimentAnalysisSchema>;\n","size_bytes":9132},"client/src/App.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Switch, Route } from 'wouter';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from './lib/queryClient';\nimport { Toaster } from '@/components/ui/toaster';\nimport { TooltipProvider } from '@/components/ui/tooltip';\nimport { loadMessages, defaultLanguage, getDirection, type Language } from './lib/i18n';\nimport type { Messages } from './lib/i18n';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Components\nimport Header from '@/components/navigation/Header';\nimport Footer from '@/components/navigation/Footer';\nimport FloatingChat from '@/components/common/FloatingChat';\n\n// Pages\nimport Landing from '@/pages/Landing';\nimport Login from '@/pages/Login';\nimport SignUp from '@/pages/SignUp';\nimport Home from '@/pages/Home';\nimport Services from '@/pages/Services';\nimport ServiceDetail from '@/pages/ServiceDetail';\nimport Booking from '@/pages/Booking';\nimport About from '@/pages/About';\nimport Contact from '@/pages/Contact';\nimport Chat from '@/pages/Chat';\nimport Terms from '@/pages/Terms';\nimport ProviderDashboard from '@/pages/ProviderDashboard';\nimport AdminPanel from '@/pages/AdminPanel';\nimport NotFound from '@/pages/not-found';\n\nfunction Router({ messages, currentLanguage, onLanguageChange }: { \n  messages: Messages; \n  currentLanguage: Language;\n  onLanguageChange: (lang: Language) => void;\n}) {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header \n        currentLanguage={currentLanguage} \n        onLanguageChange={onLanguageChange}\n        messages={messages}\n      />\n      \n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={() => <Home messages={messages} />} />\n          <Route path=\"/home\" component={() => <Home messages={messages} />} />\n          <Route path=\"/login\" component={() => <Login messages={messages} />} />\n          <Route path=\"/signup\" component={() => <SignUp messages={messages} />} />\n          <Route path=\"/services\" component={() => <Services messages={messages} />} />\n          <Route path=\"/service/:slug\" component={() => <ServiceDetail messages={messages} />} />\n          <Route path=\"/booking\" component={() => <Booking messages={messages} />} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/chat\" component={() => <Chat messages={messages} />} />\n          <Route path=\"/terms\" component={() => <Terms messages={messages} />} />\n          <Route path=\"/providers/dashboard\" component={() => <ProviderDashboard messages={messages} />} />\n          <Route path=\"/provider-dashboard\" component={() => <ProviderDashboard messages={messages} />} />\n          <Route path=\"/admin\" component={() => <AdminPanel messages={messages} />} />\n          <Route path=\"/admin-panel\" component={() => <AdminPanel messages={messages} />} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      \n      <Footer messages={messages} />\n      <div className=\"pb-32 md:pb-0\"></div>\n      <FloatingChat messages={messages} />\n    </div>\n  );\n}\n\nfunction App() {\n  const [currentLanguage, setCurrentLanguage] = useState<Language>(defaultLanguage);\n  const [messages, setMessages] = useState<Messages>({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadLanguageMessages = async () => {\n      setIsLoading(true);\n      try {\n        const loadedMessages = await loadMessages(currentLanguage);\n        setMessages(loadedMessages);\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadLanguageMessages();\n  }, [currentLanguage]);\n\n  useEffect(() => {\n    // Update document attributes for RTL/LTR and language\n    const direction = getDirection(currentLanguage);\n    document.documentElement.setAttribute('dir', direction);\n    document.documentElement.setAttribute('lang', currentLanguage);\n    \n    // Add/remove RTL class on body for additional styling\n    if (direction === 'rtl') {\n      document.body.classList.add('rtl');\n    } else {\n      document.body.classList.remove('rtl');\n    }\n  }, [currentLanguage]);\n\n  const handleLanguageChange = (lang: Language) => {\n    setCurrentLanguage(lang);\n    // Store preference in localStorage\n    localStorage.setItem('preferred-language', lang);\n  };\n\n  // Load saved language preference on mount\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('preferred-language') as Language;\n    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'ar')) {\n      setCurrentLanguage(savedLanguage);\n    }\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-khadamati-light\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-xl flex items-center justify-center mx-auto mb-4 floating\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n            </svg>\n          </div>\n          <div className=\"text-2xl font-bold text-gradient\">Taskego</div>\n          <div className=\"text-khadamati-gray mt-2\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Router \n          messages={messages} \n          currentLanguage={currentLanguage}\n          onLanguageChange={handleLanguageChange}\n        />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5830},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(211, 100%, 43%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n  \n  /* Taskego Warm Professional Colors */\n  --taskego-primary: hsl(211, 85%, 45%); /* Warm Professional Blue */\n  --taskego-secondary: hsl(220, 15%, 65%); /* Warm Gray */\n  --taskego-accent: hsl(200, 50%, 55%); /* Soft Blue */\n  --taskego-neutral: hsl(220, 10%, 88%); /* Warm Light Gray */\n  --taskego-dark: hsl(215, 25%, 20%); /* Warm Dark Gray */\n  --taskego-muted: hsl(210, 15%, 70%); /* Muted Blue-Gray */\n  --taskego-subtle: hsl(205, 20%, 75%); /* Subtle Blue */\n  --taskego-contrast: hsl(215, 40%, 35%); /* Contrast Blue */\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 16%, 46.9%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(211, 100%, 43%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n  \n  /* 3D Perspective for Card Flips */\n  .perspective-1000 {\n    perspective: 1000px;\n  }\n  \n  .backface-hidden {\n    backface-visibility: hidden;\n  }\n  \n  .preserve-3d {\n    transform-style: preserve-3d;\n  }\n\n  /* RTL Support */\n  [dir=\"rtl\"] {\n    direction: rtl;\n  }\n  \n  [dir=\"rtl\"] .text-left {\n    text-align: right;\n  }\n  \n  [dir=\"rtl\"] .text-right {\n    text-align: left;\n  }\n  \n  [dir=\"rtl\"] .ml-auto {\n    margin-left: 0;\n    margin-right: auto;\n  }\n  \n  [dir=\"rtl\"] .mr-auto {\n    margin-right: 0;\n    margin-left: auto;\n  }\n}\n\n@layer components {\n  /* Bold High-Contrast Khadamati Theme */\n  .khadamati-blue {\n    @apply text-[#1e40af];\n  }\n  \n  .bg-khadamati-blue {\n    @apply bg-[#1e40af];\n  }\n  \n  .khadamati-yellow {\n    @apply text-[#f59e0b];\n  }\n  \n  .bg-khadamati-yellow {\n    @apply bg-[#f59e0b];\n  }\n  \n  .khadamati-success {\n    @apply text-[hsl(142,76%,36%)];\n  }\n  \n  .bg-khadamati-success {\n    @apply bg-[hsl(142,76%,36%)];\n  }\n  \n  .khadamati-error {\n    @apply text-[hsl(0,84%,60%)];\n  }\n  \n  .bg-khadamati-error {\n    @apply bg-[hsl(0,84%,60%)];\n  }\n  \n  .khadamati-light {\n    @apply text-[hsl(210,40%,98%)];\n  }\n  \n  .bg-khadamati-light {\n    @apply bg-[hsl(210,40%,98%)];\n  }\n  \n  .khadamati-gray {\n    @apply text-[hsl(215,16%,46.9%)];\n  }\n  \n  .bg-khadamati-gray {\n    @apply bg-[hsl(215,16%,46.9%)];\n  }\n  \n  .khadamati-dark {\n    @apply text-[hsl(220,30%,15%)];\n  }\n  \n  .bg-khadamati-dark {\n    @apply bg-[hsl(220,30%,15%)];\n  }\n  \n  /* Gradient Text - Fixed for better visibility */\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(220, 85%, 45%) 0%, hsl(42, 100%, 45%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-weight: 700;\n  }\n  \n  /* Ultra High Contrast Text Classes */\n  .text-yellow-bright {\n    @apply text-[#d97706] font-bold;\n  }\n  \n  .bg-yellow-bright {\n    @apply bg-[#f59e0b];\n  }\n  \n  .border-yellow-bright {\n    @apply border-[#f59e0b];\n  }\n  \n  /* Super Dark text for maximum readability */\n  .text-dark-readable {\n    @apply text-[#111827] font-semibold;\n  }\n  \n  /* White text for dark backgrounds */\n  .text-white-clean {\n    @apply text-white font-semibold;\n  }\n  \n  /* Floating Animation */\n  .floating {\n    animation: floating 3s ease-in-out infinite;\n  }\n  \n  @keyframes floating {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  /* Glow Effect */\n  .glow-blue {\n    box-shadow: 0 0 20px hsla(207, 90%, 54%, 0.3);\n  }\n  \n  /* Card Hover Effects */\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n  }\n  \n  /* Button Fixes for Better Contrast */\n  .btn-primary {\n    background: linear-gradient(135deg, hsl(220, 85%, 45%) 0%, hsl(42, 100%, 50%) 100%) !important;\n    color: white !important;\n    border: none !important;\n    font-weight: 600 !important;\n  }\n  \n  .btn-primary:hover {\n    background: linear-gradient(135deg, hsl(220, 85%, 35%) 0%, hsl(42, 100%, 40%) 100%) !important;\n    transform: scale(1.05);\n  }\n  \n  /* Text shadow for better readability */\n  .text-shadow-lg {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  }\n  \n  .glow-yellow {\n    box-shadow: 0 0 20px hsla(37, 91%, 55%, 0.3);\n  }\n  \n  /* Pulse Animation */\n  .pulse-slow {\n    animation: pulse-slow 4s ease-in-out infinite;\n  }\n  \n  @keyframes pulse-slow {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n  \n  /* Scroll Reveal Animation */\n  .scroll-reveal {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);\n  }\n  \n  .scroll-reveal.visible {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  /* Service Card Hover Effects */\n  .service-card {\n    transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1);\n    transform-style: preserve-3d;\n  }\n  \n  .service-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n  }\n  \n  .service-card-flip {\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n  }\n  \n  .service-card-flip:hover {\n    transform: rotateY(180deg);\n  }\n  \n  .service-card-front,\n  .service-card-back {\n    backface-visibility: hidden;\n  }\n  \n  .service-card-back {\n    transform: rotateY(180deg);\n  }\n  \n  /* Parallax Container */\n  .parallax {\n    transform-style: preserve-3d;\n  }\n  \n  /* Glass Morphism */\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .glass-dark {\n    background: rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  /* Interactive Buttons */\n  .btn-animated {\n    position: relative;\n    overflow: hidden;\n    transition: all 0.3s ease;\n  }\n  \n  .btn-animated::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s;\n  }\n  \n  .btn-animated:hover::before {\n    left: 100%;\n  }\n  \n  /* Hero Section Animations */\n  .hero-bg {\n    background: linear-gradient(135deg, \n      hsla(207, 90%, 54%, 0.1) 0%, \n      hsla(37, 91%, 55%, 0.1) 100%);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .hero-bg::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.03'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n    opacity: 0.5;\n  }\n  \n  /* Chat Widget Animations */\n  .chat-bubble {\n    animation: chat-bounce 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  }\n  \n  @keyframes chat-bounce {\n    0% { transform: scale(0) rotate(45deg); }\n    50% { transform: scale(1.1) rotate(22.5deg); }\n    100% { transform: scale(1) rotate(0deg); }\n  }\n  \n  /* Loading Animations */\n  .spinner {\n    animation: spin 1s linear infinite;\n  }\n  \n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n  \n  .bounce-dots > div {\n    animation: bounce-dots 1.4s ease-in-out infinite both;\n  }\n  \n  .bounce-dots > div:nth-child(1) { animation-delay: -0.32s; }\n  .bounce-dots > div:nth-child(2) { animation-delay: -0.16s; }\n  \n  @keyframes bounce-dots {\n    0%, 80%, 100% { \n      transform: scale(0);\n    } 40% { \n      transform: scale(1);\n    }\n  }\n  \n  /* Scroll Reveal */\n  .scroll-reveal {\n    opacity: 0;\n    transform: translateY(50px);\n    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n  \n  .scroll-reveal.revealed {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  /* Page Transitions */\n  .page-transition {\n    opacity: 0;\n    animation: fadeIn 0.6s ease-out forwards;\n  }\n  \n  @keyframes fadeIn {\n    to {\n      opacity: 1;\n    }\n  }\n  \n  /* Mobile Navigation */\n  .nav-mobile {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .nav-mobile.open {\n    transform: translateX(0);\n  }\n  \n  [dir=\"rtl\"] .nav-mobile {\n    transform: translateX(100%);\n  }\n  \n  [dir=\"rtl\"] .nav-mobile.open {\n    transform: translateX(0);\n  }\n  \n  /* Custom Scrollbar */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(210, 40%, 98%);\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(207, 90%, 54%);\n    border-radius: 3px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: hsl(207, 90%, 44%);\n  }\n}\n\n@layer utilities {\n  /* Animation Delays */\n  .animation-delay-200 {\n    animation-delay: 200ms;\n  }\n  \n  .animation-delay-400 {\n    animation-delay: 400ms;\n  }\n  \n  .animation-delay-600 {\n    animation-delay: 600ms;\n  }\n  \n  .animation-delay-800 {\n    animation-delay: 800ms;\n  }\n  \n  /* Arabic Font Support */\n  .font-arabic {\n    font-family: 'Noto Sans Arabic', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n  \n  /* Responsive Text Sizes */\n  .text-responsive-sm {\n    @apply text-sm md:text-base;\n  }\n  \n  .text-responsive-base {\n    @apply text-base md:text-lg;\n  }\n  \n  .text-responsive-lg {\n    @apply text-lg md:text-xl;\n  }\n  \n  .text-responsive-xl {\n    @apply text-xl md:text-2xl;\n  }\n  \n  .text-responsive-2xl {\n    @apply text-2xl md:text-3xl;\n  }\n  \n  .text-responsive-3xl {\n    @apply text-3xl md:text-4xl;\n  }\n}","size_bytes":11055},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":184},"frontend/src/App.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Switch, Route } from 'wouter';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from './lib/queryClient';\nimport { Toaster } from '@/components/ui/toaster';\nimport { TooltipProvider } from '@/components/ui/tooltip';\nimport { loadMessages, defaultLanguage, getDirection, type Language } from './lib/i18n';\nimport type { Messages } from './lib/i18n';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Components\nimport Header from '@/components/navigation/Header';\nimport Footer from '@/components/navigation/Footer';\nimport FloatingChat from '@/components/common/FloatingChat';\n\n// Pages\nimport Landing from '@/pages/Landing';\nimport Login from '@/pages/Login';\nimport SignUp from '@/pages/SignUp';\nimport Home from '@/pages/Home';\nimport Services from '@/pages/Services';\nimport Booking from '@/pages/Booking';\nimport About from '@/pages/About';\nimport Contact from '@/pages/Contact';\nimport ProviderDashboard from '@/pages/ProviderDashboard';\nimport AdminPanel from '@/pages/AdminPanel';\nimport NotFound from '@/pages/not-found';\n\nfunction Router({ messages, currentLanguage, onLanguageChange }: { \n  messages: Messages; \n  currentLanguage: Language;\n  onLanguageChange: (lang: Language) => void;\n}) {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header \n        currentLanguage={currentLanguage} \n        onLanguageChange={onLanguageChange}\n        messages={messages}\n      />\n      \n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={() => <Home messages={messages} />} />\n          <Route path=\"/login\" component={() => <Login messages={messages} />} />\n          <Route path=\"/signup\" component={() => <SignUp messages={messages} />} />\n          <Route path=\"/services\" component={() => <Services messages={messages} />} />\n          <Route path=\"/booking\" component={() => <Booking messages={messages} />} />\n          <Route path=\"/about\" component={() => <About messages={messages} />} />\n          <Route path=\"/contact\" component={() => <Contact messages={messages} />} />\n          <Route path=\"/provider-dashboard\" component={() => <ProviderDashboard messages={messages} />} />\n          <Route path=\"/admin-panel\" component={() => <AdminPanel messages={messages} />} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      \n      <Footer messages={messages} />\n      <FloatingChat messages={messages} />\n    </div>\n  );\n}\n\nfunction App() {\n  const [currentLanguage, setCurrentLanguage] = useState<Language>(defaultLanguage);\n  const [messages, setMessages] = useState<Messages>({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadLanguageMessages = async () => {\n      setIsLoading(true);\n      try {\n        const loadedMessages = await loadMessages(currentLanguage);\n        setMessages(loadedMessages);\n      } catch (error) {\n        console.error('Failed to load messages:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadLanguageMessages();\n  }, [currentLanguage]);\n\n  useEffect(() => {\n    // Update document attributes for RTL/LTR and language\n    const direction = getDirection(currentLanguage);\n    document.documentElement.setAttribute('dir', direction);\n    document.documentElement.setAttribute('lang', currentLanguage);\n    \n    // Add/remove RTL class on body for additional styling\n    if (direction === 'rtl') {\n      document.body.classList.add('rtl');\n    } else {\n      document.body.classList.remove('rtl');\n    }\n  }, [currentLanguage]);\n\n  const handleLanguageChange = (lang: Language) => {\n    setCurrentLanguage(lang);\n    // Store preference in localStorage\n    localStorage.setItem('preferred-language', lang);\n  };\n\n  // Load saved language preference on mount\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('preferred-language') as Language;\n    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'ar')) {\n      setCurrentLanguage(savedLanguage);\n    }\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-khadamati-light\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-xl flex items-center justify-center mx-auto mb-4 floating\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n            </svg>\n          </div>\n          <div className=\"text-2xl font-bold text-gradient\">Taskego</div>\n          <div className=\"text-khadamati-gray mt-2\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Router \n          messages={messages} \n          currentLanguage={currentLanguage}\n          onLanguageChange={handleLanguageChange}\n        />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5192},"frontend/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n  \n  /* Khadamati Theme Colors */\n  --khadamati-blue: hsl(207, 90%, 54%);\n  --khadamati-yellow: hsl(37, 91%, 55%);\n  --khadamati-success: hsl(142, 76%, 36%);\n  --khadamati-error: hsl(0, 84%, 60%);\n  --khadamati-info: hsl(207, 90%, 54%);\n  --khadamati-light: hsl(210, 40%, 98%);\n  --khadamati-gray: hsl(215, 16%, 46.9%);\n  --khadamati-dark: hsl(222, 84%, 4.9%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 16%, 46.9%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n  \n  /* RTL Support */\n  [dir=\"rtl\"] {\n    direction: rtl;\n  }\n  \n  [dir=\"rtl\"] .text-left {\n    text-align: right;\n  }\n  \n  [dir=\"rtl\"] .text-right {\n    text-align: left;\n  }\n  \n  [dir=\"rtl\"] .ml-auto {\n    margin-left: 0;\n    margin-right: auto;\n  }\n  \n  [dir=\"rtl\"] .mr-auto {\n    margin-right: 0;\n    margin-left: auto;\n  }\n}\n\n@layer components {\n  /* Khadamati Theme Classes */\n  .khadamati-blue {\n    @apply text-[hsl(207,90%,54%)];\n  }\n  \n  .bg-khadamati-blue {\n    @apply bg-[hsl(207,90%,54%)];\n  }\n  \n  .khadamati-yellow {\n    @apply text-[hsl(37,91%,55%)];\n  }\n  \n  .bg-khadamati-yellow {\n    @apply bg-[hsl(37,91%,55%)];\n  }\n  \n  .khadamati-success {\n    @apply text-[hsl(142,76%,36%)];\n  }\n  \n  .bg-khadamati-success {\n    @apply bg-[hsl(142,76%,36%)];\n  }\n  \n  .khadamati-error {\n    @apply text-[hsl(0,84%,60%)];\n  }\n  \n  .bg-khadamati-error {\n    @apply bg-[hsl(0,84%,60%)];\n  }\n  \n  .khadamati-light {\n    @apply text-[hsl(210,40%,98%)];\n  }\n  \n  .bg-khadamati-light {\n    @apply bg-[hsl(210,40%,98%)];\n  }\n  \n  .khadamati-gray {\n    @apply text-[hsl(215,16%,46.9%)];\n  }\n  \n  .bg-khadamati-gray {\n    @apply bg-[hsl(215,16%,46.9%)];\n  }\n  \n  .khadamati-dark {\n    @apply text-[hsl(222,84%,4.9%)];\n  }\n  \n  .bg-khadamati-dark {\n    @apply bg-[hsl(222,84%,4.9%)];\n  }\n  \n  /* Gradient Text */\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(37, 91%, 55%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  /* Hero Gradient */\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(207, 90%, 64%) 50%, hsl(37, 91%, 55%) 100%);\n  }\n  \n  /* Glassmorphism */\n  .glassmorphism {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  /* Card Hover Effects */\n  .card-hover {\n    @apply transition-all duration-300 ease-in-out;\n  }\n  \n  .card-hover:hover {\n    @apply transform -translate-y-2 shadow-xl;\n  }\n  \n  /* Floating Animation */\n  .floating {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  /* Scroll Reveal */\n  .scroll-reveal {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: all 0.6s ease-out;\n  }\n  \n  .scroll-reveal.revealed {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  /* Page Transitions */\n  .page-transition {\n    opacity: 0;\n    animation: fadeIn 0.6s ease-out forwards;\n  }\n  \n  @keyframes fadeIn {\n    to {\n      opacity: 1;\n    }\n  }\n  \n  /* Mobile Navigation */\n  .nav-mobile {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .nav-mobile.open {\n    transform: translateX(0);\n  }\n  \n  [dir=\"rtl\"] .nav-mobile {\n    transform: translateX(100%);\n  }\n  \n  [dir=\"rtl\"] .nav-mobile.open {\n    transform: translateX(0);\n  }\n  \n  /* Custom Scrollbar */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(210, 40%, 98%);\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(207, 90%, 54%);\n    border-radius: 3px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: hsl(207, 90%, 44%);\n  }\n}\n\n@layer utilities {\n  /* Animation Delays */\n  .animation-delay-200 {\n    animation-delay: 200ms;\n  }\n  \n  .animation-delay-400 {\n    animation-delay: 400ms;\n  }\n  \n  .animation-delay-600 {\n    animation-delay: 600ms;\n  }\n  \n  .animation-delay-800 {\n    animation-delay: 800ms;\n  }\n  \n  /* Arabic Font Support */\n  .font-arabic {\n    font-family: 'Noto Sans Arabic', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n  \n  /* Responsive Text Sizes */\n  .text-responsive-sm {\n    @apply text-sm md:text-base;\n  }\n  \n  .text-responsive-base {\n    @apply text-base md:text-lg;\n  }\n  \n  .text-responsive-lg {\n    @apply text-lg md:text-xl;\n  }\n  \n  .text-responsive-xl {\n    @apply text-xl md:text-2xl;\n  }\n  \n  .text-responsive-2xl {\n    @apply text-2xl md:text-3xl;\n  }\n  \n  .text-responsive-3xl {\n    @apply text-3xl md:text-4xl;\n  }\n  \n  .text-responsive-4xl {\n    @apply text-4xl md:text-5xl lg:text-6xl;\n  }\n}\n","size_bytes":6582},"frontend/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":184},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"export interface Messages {\n  [key: string]: string | Messages;\n}\n\nexport type Language = 'en' | 'ar';\n\nexport const defaultLanguage: Language = 'en';\n\nexport const languages: Record<Language, string> = {\n  en: 'English',\n  ar: 'العربية',\n};\n\nexport const isRTL = (lang: Language): boolean => {\n  return lang === 'ar';\n};\n\nexport const getDirection = (lang: Language): 'ltr' | 'rtl' => {\n  return isRTL(lang) ? 'rtl' : 'ltr';\n};\n\nexport const loadMessages = async (lang: Language): Promise<Messages> => {\n  try {\n    const messages = await import(`../messages/${lang}.json`);\n    return messages.default;\n  } catch (error) {\n    console.error(`Failed to load messages for language: ${lang}`, error);\n    // Fallback to English\n    if (lang !== 'en') {\n      return loadMessages('en');\n    }\n    return {};\n  }\n};\n\nexport const t = (key: string, messages: Messages, fallback?: string): string => {\n  const keys = key.split('.');\n  let current: any = messages;\n  \n  for (const k of keys) {\n    if (current && typeof current === 'object' && k in current) {\n      current = current[k];\n    } else {\n      return fallback || key;\n    }\n  }\n  \n  return typeof current === 'string' ? current : fallback || key;\n};\n","size_bytes":1214},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"import { CheckCircle, Users, Globe, Shield, Award, Clock, Heart, Star } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\nexport default function About() {\n  const teamMembers = [\n    {\n      name: 'Sarah Al-Rashid',\n      role: 'CEO & Founder',\n      bio: 'Former operations director at major logistics company. Passionate about connecting communities through technology.',\n      image: 'https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=300&h=300&fit=crop&crop=face',\n      experience: '12+ years'\n    },\n    {\n      name: 'Ahmed Hassan',\n      role: 'CTO',\n      bio: 'Tech visionary with expertise in scalable platforms. Previously led engineering teams at top fintech companies.',\n      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop&crop=face',\n      experience: '15+ years'\n    },\n    {\n      name: 'Fatima Al-Zahra',\n      role: 'Head of Operations',\n      bio: 'Service excellence expert ensuring quality standards across all our marketplace interactions.',\n      image: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=300&h=300&fit=crop&crop=face',\n      experience: '10+ years'\n    },\n    {\n      name: 'Omar Khalil',\n      role: 'Customer Success Director',\n      bio: 'Dedicated to creating exceptional experiences for both service providers and customers on our platform.',\n      image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=300&h=300&fit=crop&crop=face',\n      experience: '8+ years'\n    }\n  ];\n\n  const values = [\n    {\n      icon: Shield,\n      title: 'Trust & Safety',\n      description: 'Every service provider undergoes thorough background checks and skill verification before joining our platform.'\n    },\n    {\n      icon: Heart,\n      title: 'Community First',\n      description: 'We believe in building strong local communities by connecting neighbors with trusted professionals.'\n    },\n    {\n      icon: Globe,\n      title: 'Cultural Bridge',\n      description: 'Supporting both Arabic and English speakers, making services accessible to diverse communities.'\n    },\n    {\n      icon: Award,\n      title: 'Excellence Standard',\n      description: 'Maintaining the highest quality standards through continuous training and performance monitoring.'\n    }\n  ];\n\n  const milestones = [\n    { year: '2020', event: 'Taskego founded with a vision to revolutionize local services' },\n    { year: '2021', event: 'Reached 500+ verified service providers across major cities' },\n    { year: '2022', event: 'Launched bilingual platform supporting Arabic and English' },\n    { year: '2023', event: 'Expanded to 12+ service categories with 1000+ providers' },\n    { year: '2024', event: 'Achieved 50,000+ completed bookings and 4.9★ average rating' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-600 to-orange-500 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6\">\n              About Taskego\n            </h1>\n            <p className=\"text-xl md:text-2xl font-bold max-w-3xl mx-auto mb-8\">\n              We're revolutionizing how people connect with trusted local service providers. \n              From home cleaning to tech support, we make quality services accessible to everyone.\n            </p>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 mt-12\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl md:text-4xl font-black mb-2\">\n                  <AnimatedCounter end={1200} suffix=\"+\" />\n                </div>\n                <div className=\"text-lg font-bold\">Verified Providers</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl md:text-4xl font-black mb-2\">\n                  <AnimatedCounter end={50000} suffix=\"+\" />\n                </div>\n                <div className=\"text-lg font-bold\">Happy Customers</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl md:text-4xl font-black mb-2\">\n                  <AnimatedCounter end={12} suffix=\"+\" />\n                </div>\n                <div className=\"text-lg font-bold\">Service Categories</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl md:text-4xl font-black mb-2\">4.9⭐</div>\n                <div className=\"text-lg font-bold\">Average Rating</div>\n              </div>\n            </div>\n          </ScrollReveal>\n        </div>\n      </section>\n\n      {/* Mission Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-black text-gray-900 mb-6\">Our Mission</h2>\n              <p className=\"text-xl text-gray-800 font-bold mb-6\">\n                To create the most trusted and comprehensive service marketplace that empowers local professionals \n                and provides exceptional experiences for customers across the Middle East and beyond.\n              </p>\n              <p className=\"text-lg text-gray-700 font-medium mb-8\">\n                We started Taskego because we believe everyone deserves access to reliable, high-quality services. \n                Whether you're a busy professional, a growing family, or a business owner, finding trustworthy \n                service providers shouldn't be a challenge.\n              </p>\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"font-bold text-gray-800\">Licensed & Insured</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"font-bold text-gray-800\">24/7 Customer Support</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"font-bold text-gray-800\">Satisfaction Guarantee</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600 mr-3\" />\n                  <span className=\"font-bold text-gray-800\">Transparent Pricing</span>\n                </div>\n              </div>\n            </ScrollReveal>\n            <ScrollReveal delay={200}>\n              <img \n                src=\"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?w=600&h=400&fit=crop\" \n                alt=\"Team working together\" \n                className=\"rounded-2xl shadow-xl\"\n              />\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Values Section */}\n      <section className=\"py-20 bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black text-gray-900 text-center mb-12\">Our Core Values</h2>\n          </ScrollReveal>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {values.map((value, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0 h-full hover:shadow-xl transition-all duration-300\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n                      <value.icon className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h3 className=\"text-xl font-black text-gray-900 mb-4\">{value.title}</h3>\n                    <p className=\"text-gray-700 font-medium\">{value.description}</p>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black text-gray-900 text-center mb-12\">Meet Our Leadership Team</h2>\n          </ScrollReveal>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {teamMembers.map((member, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0 hover:shadow-xl transition-all duration-300\">\n                  <CardContent className=\"p-6 text-center\">\n                    <img \n                      src={member.image} \n                      alt={member.name}\n                      className=\"w-24 h-24 rounded-full mx-auto mb-4 object-cover\"\n                    />\n                    <h3 className=\"text-xl font-black text-gray-900 mb-2\">{member.name}</h3>\n                    <Badge className=\"bg-orange-500 text-white mb-3\">{member.role}</Badge>\n                    <p className=\"text-gray-700 font-medium text-sm mb-3\">{member.bio}</p>\n                    <div className=\"text-blue-600 font-bold text-sm\">{member.experience} Experience</div>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Timeline Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black text-gray-900 text-center mb-12\">Our Journey</h2>\n          </ScrollReveal>\n          <div className=\"space-y-8\">\n            {milestones.map((milestone, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <div className=\"flex items-center\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-orange-500 rounded-full flex items-center justify-center mr-6 shadow-lg\">\n                    <span className=\"text-white font-black text-lg\">{milestone.year}</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-lg font-bold text-gray-900\">{milestone.event}</p>\n                  </div>\n                </div>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-orange-500 to-blue-600 text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black mb-6\">Join the Taskego Community</h2>\n            <p className=\"text-xl font-bold mb-8\">\n              Whether you're looking for services or want to offer your skills, \n              we're here to help you succeed.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <a \n                href=\"/services\" \n                className=\"bg-white text-blue-600 px-8 py-4 rounded-lg font-black text-lg hover:bg-gray-100 transition-colors shadow-lg\"\n              >\n                Find Services\n              </a>\n              <a \n                href=\"/providers/dashboard\" \n                className=\"bg-transparent border-2 border-white text-white px-8 py-4 rounded-lg font-black text-lg hover:bg-white hover:text-blue-600 transition-colors\"\n              >\n                Become a Provider\n              </a>\n            </div>\n          </ScrollReveal>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":12221},"client/src/pages/AdminPanel.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Users, Briefcase, TrendingUp, DollarSign, Search, Eye, Ban, Check, X } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\ninterface AdminPanelProps {\n  messages: any;\n}\n\nexport default function AdminPanel({ messages }: AdminPanelProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Mock data - in real app, this would come from API\n  const mockStats = {\n    totalUsers: 2547,\n    activeProviders: 1247,\n    monthlyBookings: 15842,\n    monthlyRevenue: 124578,\n  };\n\n  const mockPendingApprovals = [\n    {\n      id: 1,\n      name: 'David Wilson',\n      type: 'provider',\n      service: 'Electrical Services',\n      date: '2024-01-20',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 2,\n      name: 'Lisa Anderson',\n      type: 'service',\n      service: 'Pet Grooming',\n      date: '2024-01-18',\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 3,\n      name: 'Robert Johnson',\n      type: 'provider',\n      service: 'Landscaping',\n      date: '2024-01-15',\n      avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face'\n    },\n  ];\n\n  const mockUsers = [\n    {\n      id: 1,\n      name: 'John Doe',\n      email: 'john.doe@email.com',\n      type: 'client',\n      joinDate: '2023-11-15',\n      status: 'active',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 2,\n      name: 'Sarah Johnson',\n      email: 'sarah.j@email.com',\n      type: 'provider',\n      joinDate: '2023-10-22',\n      status: 'active',\n      avatar: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 3,\n      name: 'Michael Brown',\n      email: 'michael.b@email.com',\n      type: 'client',\n      joinDate: '2023-12-01',\n      status: 'inactive',\n      avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face'\n    },\n  ];\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    queryFn: () => Promise.resolve(mockStats),\n  });\n\n  const { data: pendingApprovals } = useQuery({\n    queryKey: ['/api/admin/pending-approvals'],\n    queryFn: () => Promise.resolve(mockPendingApprovals),\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/admin/users', searchTerm],\n    queryFn: () => Promise.resolve(mockUsers.filter(user => \n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n    )),\n  });\n\n  const handleApprove = (id: number) => {\n    console.log('Approving item:', id);\n    // In real app, this would make an API call\n  };\n\n  const handleReject = (id: number) => {\n    console.log('Rejecting item:', id);\n    // In real app, this would make an API call\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'provider':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'client':\n        return 'bg-blue-100 text-blue-800';\n      case 'service':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'inactive':\n        return 'bg-gray-100 text-gray-800';\n      case 'suspended':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-khadamati-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-12\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n              {messages.admin_panel?.title || 'Admin Panel'}\n            </h1>\n            <p className=\"text-xl text-khadamati-gray\">\n              {messages.admin_panel?.description || 'Platform management and analytics.'}\n            </p>\n          </ScrollReveal>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <ScrollReveal>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.total_users || 'Total Users'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.totalUsers || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-blue rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={100}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.active_providers || 'Active Providers'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.activeProviders || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-success rounded-lg flex items-center justify-center\">\n                    <Briefcase className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={200}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.monthly_bookings || 'Monthly Bookings'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.monthlyBookings || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-yellow rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={300}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.revenue || 'Monthly Revenue'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      $<AnimatedCounter end={stats?.monthlyRevenue || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-info rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n        </div>\n\n        {/* Pending Approvals */}\n        <ScrollReveal delay={400}>\n          <Card className=\"bg-white shadow-lg border-0 mb-12\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.admin_panel?.pending_approvals || 'Pending Approvals'}\n                </CardTitle>\n                <Badge className=\"bg-khadamati-error text-white\">\n                  {pendingApprovals?.length || 0} pending\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {pendingApprovals?.map((approval) => (\n                  <div key={approval.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarImage src={approval.avatar} alt={approval.name} />\n                        <AvatarFallback>\n                          {approval.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold text-khadamati-dark\">\n                          {approval.name}\n                        </h3>\n                        <p className=\"text-khadamati-gray text-sm\">\n                          {approval.type === 'provider' ? 'New Provider' : 'New Service'} - {approval.service}\n                        </p>\n                        <p className=\"text-khadamati-gray text-xs\">\n                          {approval.date}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleApprove(approval.id)}\n                        className=\"bg-khadamati-success hover:bg-green-700 text-white\"\n                      >\n                        <Check className=\"h-4 w-4 mr-1\" />\n                        {messages.admin_panel?.approve || 'Approve'}\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => handleReject(approval.id)}\n                      >\n                        <X className=\"h-4 w-4 mr-1\" />\n                        {messages.admin_panel?.reject || 'Reject'}\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n\n        {/* User Management */}\n        <ScrollReveal delay={500}>\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.admin_panel?.user_management || 'User Management'}\n                </CardTitle>\n                <div className=\"flex space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-khadamati-gray\" />\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>{messages.admin_panel?.table?.user || 'User'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.type || 'Type'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.joined || 'Joined'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.status || 'Status'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.actions || 'Actions'}</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users?.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarImage src={user.avatar} alt={user.name} />\n                              <AvatarFallback>\n                                {user.name.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"font-medium text-khadamati-dark\">\n                                {user.name}\n                              </div>\n                              <div className=\"text-sm text-khadamati-gray\">\n                                {user.email}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getTypeColor(user.type)}>\n                            {user.type}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{user.joinDate}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(user.status)}>\n                            {user.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <Ban className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15284},"client/src/pages/Booking.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Calendar, Clock, MapPin, User, Phone, Mail } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { toast } from '@/hooks/use-toast';\nimport ScrollReveal from '@/components/common/ScrollReveal';\n\ninterface BookingProps {\n  messages: any;\n}\n\nconst bookingSchema = z.object({\n  serviceType: z.string().min(1, 'Please select a service type'),\n  date: z.string().min(1, 'Please select a date'),\n  time: z.string().min(1, 'Please select a time'),\n  location: z.string().min(1, 'Please enter your location'),\n  details: z.string().optional(),\n  phone: z.string().min(1, 'Please enter your phone number'),\n  email: z.string().email('Please enter a valid email address'),\n  name: z.string().min(1, 'Please enter your name'),\n});\n\ntype BookingForm = z.infer<typeof bookingSchema>;\n\nexport default function Booking({ messages }: BookingProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<BookingForm>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      serviceType: '',\n      date: '',\n      time: '',\n      location: '',\n      details: '',\n      phone: '',\n      email: '',\n      name: '',\n    },\n  });\n\n  const onSubmit = async (data: BookingForm) => {\n    setIsSubmitting(true);\n    try {\n      // In a real app, this would make an API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: 'Booking Confirmed!',\n        description: 'Your service has been booked successfully. You will receive a confirmation email shortly.',\n      });\n      \n      form.reset();\n    } catch (error) {\n      toast({\n        title: 'Booking Failed',\n        description: 'Something went wrong. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const serviceTypes = [\n    { value: 'cleaning', label: messages.services?.cleaning?.title || 'Cleaning' },\n    { value: 'plumbing', label: messages.services?.plumbing?.title || 'Plumbing' },\n    { value: 'electrical', label: messages.services?.electrical?.title || 'Electrical' },\n    { value: 'delivery', label: messages.services?.delivery?.title || 'Delivery' },\n    { value: 'maintenance', label: messages.services?.maintenance?.title || 'Maintenance' },\n    { value: 'painting', label: messages.services?.painting?.title || 'Painting' },\n    { value: 'gardening', label: messages.services?.gardening?.title || 'Gardening' },\n    { value: 'tutoring', label: messages.services?.tutoring?.title || 'Tutoring' },\n  ];\n\n  const timeSlots = [\n    { value: '09:00', label: '09:00 AM' },\n    { value: '10:00', label: '10:00 AM' },\n    { value: '11:00', label: '11:00 AM' },\n    { value: '12:00', label: '12:00 PM' },\n    { value: '13:00', label: '01:00 PM' },\n    { value: '14:00', label: '02:00 PM' },\n    { value: '15:00', label: '03:00 PM' },\n    { value: '16:00', label: '04:00 PM' },\n    { value: '17:00', label: '05:00 PM' },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-khadamati-light\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n              {messages.booking_page?.title || 'Book a Service'}\n            </h1>\n            <p className=\"text-xl text-khadamati-gray\">\n              {messages.booking_page?.description || 'Schedule your service in just a few clicks.'}\n            </p>\n          </ScrollReveal>\n        </div>\n\n        <ScrollReveal delay={200}>\n          <Card className=\"bg-white shadow-xl border-0\">\n            <CardHeader className=\"bg-gradient-to-r from-khadamati-blue to-khadamati-yellow text-white\">\n              <CardTitle className=\"text-2xl font-bold\">\n                Service Booking Form\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Personal Information */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4\" />\n                            Full Name\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your full name...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Mail className=\"h-4 w-4\" />\n                            {messages.booking_page?.email || 'Email Address'}\n                          </FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Your email...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Phone className=\"h-4 w-4\" />\n                          {messages.booking_page?.phone || 'Phone Number'}\n                        </FormLabel>\n                        <FormControl>\n                          <Input type=\"tel\" placeholder=\"Your phone number...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Service Selection */}\n                  <FormField\n                    control={form.control}\n                    name=\"serviceType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {messages.booking_page?.service_type || 'Service Type'}\n                        </FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={messages.booking_page?.select_service || 'Select a service...'} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {serviceTypes.map((service) => (\n                              <SelectItem key={service.value} value={service.value}>\n                                {service.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Date & Time */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"date\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Calendar className=\"h-4 w-4\" />\n                            {messages.booking_page?.date || 'Date'}\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"date\" \n                              min={new Date().toISOString().split('T')[0]}\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"time\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Clock className=\"h-4 w-4\" />\n                            {messages.booking_page?.time || 'Time'}\n                          </FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder={messages.booking_page?.select_time || 'Select time...'} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {timeSlots.map((slot) => (\n                                <SelectItem key={slot.value} value={slot.value}>\n                                  {slot.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Location */}\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <MapPin className=\"h-4 w-4\" />\n                          {messages.booking_page?.location || 'Location'}\n                        </FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter your address...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Additional Details */}\n                  <FormField\n                    control={form.control}\n                    name=\"details\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {messages.booking_page?.details || 'Additional Details'}\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe your service requirements...\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Submit Button */}\n                  <div className=\"pt-6\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      className=\"w-full py-4 bg-khadamati-blue hover:bg-blue-700 text-white font-semibold text-lg\"\n                    >\n                      {isSubmitting ? 'Processing...' : (messages.booking_page?.submit || 'Book Service')}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12698},"client/src/pages/Chat.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Send, Mic, Paperclip, Bot, User, Settings, Minimize2, Maximize2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport type { Messages } from '@/lib/i18n';\n\ninterface ChatProps {\n  messages: Messages;\n}\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'bot';\n  content: string;\n  timestamp: Date;\n  suggestions?: string[];\n}\n\nexport default function Chat({ messages }: ChatProps) {\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      type: 'bot',\n      content: 'Hello! I\\'m your AI assistant for Taskego. I can help you find services, compare prices, get recommendations, and answer any questions. What can I help you with today?',\n      timestamp: new Date(),\n      suggestions: [\n        'Find cleaning services under $50',\n        'Best plumbers in my area',\n        'Compare AC repair services',\n        'Show me available today'\n      ]\n    }\n  ]);\n  \n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatMessages]);\n\n  const simulateBotResponse = (userMessage: string) => {\n    setIsTyping(true);\n    \n    setTimeout(() => {\n      let botResponse = '';\n      let suggestions: string[] = [];\n\n      // Simple AI simulation based on keywords\n      const message = userMessage.toLowerCase();\n      \n      if (message.includes('clean') || message.includes('maid')) {\n        botResponse = 'I found several cleaning services in your area! Here are the top-rated options: Professional House Cleaning ($45/hour), Quick Clean Service ($35/hour), and Deep Clean Experts ($55/hour). Would you like me to show you more details or help you book?';\n        suggestions = ['Show cleaning details', 'Book Professional House Cleaning', 'Compare all cleaning services'];\n      } else if (message.includes('plumb') || message.includes('pipe') || message.includes('leak')) {\n        botResponse = 'For plumbing services, I recommend: FastFix Plumbers (24/7 emergency, $80/hour), Ahmed\\'s Plumbing ($65/hour), or City Plumbing Solutions ($70/hour). They all have excellent ratings and can handle urgent repairs.';\n        suggestions = ['Emergency plumber now', 'Schedule plumbing visit', 'Compare plumber prices'];\n      } else if (message.includes('price') || message.includes('cost') || message.includes('cheap')) {\n        botResponse = 'I can help you find budget-friendly options! What type of service are you looking for? I can filter by your price range and show you the best value providers in your area.';\n        suggestions = ['Under $30 services', 'Under $50 services', 'Best value options'];\n      } else if (message.includes('urgent') || message.includes('emergency') || message.includes('now')) {\n        botResponse = 'I understand you need urgent help! Here are providers available right now: Emergency Repair Services (available 24/7), Quick Response Team (2-hour response), and Instant Fix Solutions (1-hour response). Should I help you contact them immediately?';\n        suggestions = ['Call emergency service', 'Book urgent appointment', 'Find 24/7 providers'];\n      } else {\n        botResponse = 'I can help you with that! To give you the best recommendations, could you tell me more about what type of service you need? I can help with cleaning, repairs, maintenance, delivery, and many other services.';\n        suggestions = ['Browse all services', 'Find providers near me', 'Show popular services'];\n      }\n\n      const newMessage: ChatMessage = {\n        id: Date.now().toString(),\n        type: 'bot',\n        content: botResponse,\n        timestamp: new Date(),\n        suggestions\n      };\n\n      setChatMessages(prev => [...prev, newMessage]);\n      setIsTyping(false);\n    }, 1500);\n  };\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    \n    simulateBotResponse(inputMessage);\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputMessage(suggestion);\n    setTimeout(() => handleSendMessage(), 100);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: { \n      opacity: 1, \n      scale: 1,\n      transition: { duration: 0.3 }\n    }\n  };\n\n  const messageVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: { duration: 0.3 }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-slate-800 p-4\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"h-[calc(100vh-2rem)] flex flex-col\"\n        >\n          <Card className=\"flex-1 flex flex-col shadow-xl\">\n            <CardHeader className=\"flex-shrink-0 bg-gradient-to-r from-khadamati-blue to-khadamati-yellow text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"w-8 h-8 border-2 border-white\">\n                    <AvatarFallback className=\"bg-white text-khadamati-blue\">\n                      <Bot className=\"w-4 h-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <CardTitle className=\"text-lg\">Taskego AI Assistant</CardTitle>\n                    <p className=\"text-sm text-white/80\">Your smart service companion</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-white hover:bg-white/20\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                  >\n                    {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-white hover:bg-white/20\">\n                    <Settings className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n\n            <AnimatePresence>\n              {!isMinimized && (\n                <motion.div\n                  initial={{ height: 0, opacity: 0 }}\n                  animate={{ height: 'auto', opacity: 1 }}\n                  exit={{ height: 0, opacity: 0 }}\n                  className=\"flex-1 flex flex-col overflow-hidden\"\n                >\n                  <CardContent className=\"flex-1 flex flex-col p-0\">\n                    <ScrollArea className=\"flex-1 p-4\">\n                      <div className=\"space-y-4\">\n                        <AnimatePresence>\n                          {chatMessages.map((message) => (\n                            <motion.div\n                              key={message.id}\n                              variants={messageVariants}\n                              initial=\"hidden\"\n                              animate=\"visible\"\n                              className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                            >\n                              {message.type === 'bot' && (\n                                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                                  <AvatarFallback className=\"bg-khadamati-blue text-white\">\n                                    <Bot className=\"w-4 h-4\" />\n                                  </AvatarFallback>\n                                </Avatar>\n                              )}\n                              \n                              <div className={`max-w-[70%] ${message.type === 'user' ? 'order-1' : ''}`}>\n                                <div\n                                  className={`rounded-lg px-4 py-2 ${\n                                    message.type === 'user'\n                                      ? 'bg-khadamati-blue text-white ml-auto'\n                                      : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'\n                                  }`}\n                                >\n                                  <p className=\"text-sm\">{message.content}</p>\n                                </div>\n                                \n                                {message.suggestions && (\n                                  <div className=\"mt-2 space-y-1\">\n                                    {message.suggestions.map((suggestion, index) => (\n                                      <button\n                                        key={index}\n                                        onClick={() => handleSuggestionClick(suggestion)}\n                                        className=\"block text-xs text-khadamati-blue hover:text-khadamati-blue/80 hover:bg-blue-50 dark:hover:bg-blue-900/20 px-2 py-1 rounded transition-colors\"\n                                      >\n                                        {suggestion}\n                                      </button>\n                                    ))}\n                                  </div>\n                                )}\n                                \n                                <p className=\"text-xs text-gray-500 mt-1\">\n                                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                                </p>\n                              </div>\n                              \n                              {message.type === 'user' && (\n                                <Avatar className=\"w-8 h-8 flex-shrink-0 order-2\">\n                                  <AvatarFallback className=\"bg-gray-300 text-gray-700\">\n                                    <User className=\"w-4 h-4\" />\n                                  </AvatarFallback>\n                                </Avatar>\n                              )}\n                            </motion.div>\n                          ))}\n                        </AnimatePresence>\n                        \n                        {isTyping && (\n                          <motion.div\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            className=\"flex gap-3\"\n                          >\n                            <Avatar className=\"w-8 h-8\">\n                              <AvatarFallback className=\"bg-khadamati-blue text-white\">\n                                <Bot className=\"w-4 h-4\" />\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"bg-gray-100 dark:bg-gray-800 rounded-lg px-4 py-2\">\n                              <div className=\"flex space-x-1\">\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                              </div>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        <div ref={messagesEndRef} />\n                      </div>\n                    </ScrollArea>\n\n                    {/* Input Area */}\n                    <div className=\"border-t p-4 bg-white dark:bg-gray-900\">\n                      <div className=\"flex gap-2\">\n                        <div className=\"flex-1 relative\">\n                          <Input\n                            ref={inputRef}\n                            value={inputMessage}\n                            onChange={(e) => setInputMessage(e.target.value)}\n                            placeholder=\"Ask me anything about services...\"\n                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                            className=\"pr-20\"\n                          />\n                          <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex gap-1\">\n                            <Button variant=\"ghost\" size=\"sm\" className=\"p-1 h-6 w-6\">\n                              <Paperclip className=\"w-3 h-3\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"p-1 h-6 w-6\">\n                              <Mic className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                        <Button \n                          onClick={handleSendMessage}\n                          disabled={!inputMessage.trim() || isTyping}\n                          className=\"bg-khadamati-blue hover:bg-khadamati-blue/90\"\n                        >\n                          <Send className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex gap-2 mt-2 flex-wrap\">\n                        {['Find cleaning services', 'Emergency repair', 'Compare prices', 'Available today'].map((quickAction) => (\n                          <button\n                            key={quickAction}\n                            onClick={() => handleSuggestionClick(quickAction)}\n                            className=\"text-xs bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 px-2 py-1 rounded-full transition-colors\"\n                          >\n                            {quickAction}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":14885},"client/src/pages/Contact.tsx":{"content":"import { useState } from 'react';\nimport { Phone, Mail, MapPin, Clock, MessageCircle, Headphones, Shield, Globe } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ScrollReveal from '@/components/common/ScrollReveal';\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    subject: '',\n    message: '',\n    type: 'general'\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle form submission\n    console.log('Form submitted:', formData);\n    alert('Thank you for your message! We\\'ll get back to you within 24 hours.');\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const contactMethods = [\n    {\n      icon: Phone,\n      title: '24/7 Phone Support',\n      description: 'Speak directly with our customer success team',\n      contact: '+971-4-XXX-XXXX',\n      hours: 'Available 24/7',\n      color: 'from-green-500 to-emerald-600'\n    },\n    {\n      icon: Mail,\n      title: 'Email Support',\n      description: 'Send us detailed questions or feedback',\n      contact: 'support@taskego.com',\n      hours: 'Response within 2 hours',\n      color: 'from-blue-500 to-cyan-600'\n    },\n    {\n      icon: MessageCircle,\n      title: 'Live Chat',\n      description: 'Get instant help through our chat system',\n      contact: 'Available on website',\n      hours: '6 AM - 12 AM daily',\n      color: 'from-purple-500 to-pink-600'\n    },\n    {\n      icon: Headphones,\n      title: 'WhatsApp Support',\n      description: 'Message us on WhatsApp for quick assistance',\n      contact: '+971-5X-XXX-XXXX',\n      hours: '8 AM - 10 PM daily',\n      color: 'from-green-600 to-teal-600'\n    }\n  ];\n\n  const offices = [\n    {\n      city: 'Dubai',\n      address: 'Business Bay Tower, Level 25, Dubai, UAE',\n      phone: '+971-4-XXX-XXXX',\n      hours: 'Sun-Thu: 9 AM - 6 PM',\n      isMain: true\n    },\n    {\n      city: 'Abu Dhabi',\n      address: 'Corniche Plaza, Floor 12, Abu Dhabi, UAE',\n      phone: '+971-2-XXX-XXXX',\n      hours: 'Sun-Thu: 9 AM - 6 PM',\n      isMain: false\n    },\n    {\n      city: 'Riyadh',\n      address: 'King Fahd District, Tower 3, Riyadh, KSA',\n      phone: '+966-11-XXX-XXXX',\n      hours: 'Sun-Thu: 9 AM - 6 PM',\n      isMain: false\n    }\n  ];\n\n  const faqItems = [\n    {\n      question: 'How quickly can I get a service provider?',\n      answer: 'Most bookings can be scheduled within 24-48 hours. Emergency services are available within 2-4 hours.'\n    },\n    {\n      question: 'Are all service providers verified?',\n      answer: 'Yes, every provider undergoes background checks, skill verification, and insurance validation before joining.'\n    },\n    {\n      question: 'What if I\\'m not satisfied with the service?',\n      answer: 'We offer a 100% satisfaction guarantee. Contact us within 24 hours and we\\'ll make it right.'\n    },\n    {\n      question: 'Do you serve commercial businesses?',\n      answer: 'Absolutely! We provide services for both residential and commercial clients with dedicated business support.'\n    },\n    {\n      question: 'Can I cancel or reschedule my booking?',\n      answer: 'Yes, you can cancel or reschedule up to 2 hours before your appointment through our app or by calling support.'\n    },\n    {\n      question: 'How do I become a service provider?',\n      answer: 'Apply through our Provider Portal. After verification and training, you can start accepting bookings.'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-600 to-orange-500 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6\">Get in Touch</h1>\n            <p className=\"text-xl md:text-2xl font-bold max-w-3xl mx-auto mb-8\">\n              We're here to help 24/7. Whether you need support, have questions, \n              or want to partner with us - we'd love to hear from you.\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Badge className=\"bg-white text-blue-600 px-4 py-2 text-lg font-bold\">\n                <Clock className=\"h-5 w-5 mr-2\" />\n                24/7 Support Available\n              </Badge>\n              <Badge className=\"bg-white text-blue-600 px-4 py-2 text-lg font-bold\">\n                <Globe className=\"h-5 w-5 mr-2\" />\n                Arabic & English\n              </Badge>\n              <Badge className=\"bg-white text-blue-600 px-4 py-2 text-lg font-bold\">\n                <Shield className=\"h-5 w-5 mr-2\" />\n                Verified Support Team\n              </Badge>\n            </div>\n          </ScrollReveal>\n        </div>\n      </section>\n\n      {/* Contact Methods */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black text-gray-900 text-center mb-12\">How Can We Help You?</h2>\n          </ScrollReveal>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {contactMethods.map((method, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0 hover:shadow-xl transition-all duration-300 h-full\">\n                  <CardContent className=\"p-8 text-center\">\n                    <div className={`w-16 h-16 bg-gradient-to-br ${method.color} rounded-full flex items-center justify-center mx-auto mb-6`}>\n                      <method.icon className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h3 className=\"text-xl font-black text-gray-900 mb-3\">{method.title}</h3>\n                    <p className=\"text-gray-700 font-medium mb-4\">{method.description}</p>\n                    <div className=\"text-blue-600 font-bold mb-2\">{method.contact}</div>\n                    <div className=\"text-sm text-gray-600 font-medium\">{method.hours}</div>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form & Offices */}\n      <section className=\"py-20 bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <ScrollReveal>\n              <Card className=\"bg-white shadow-xl border-0\">\n                <CardHeader>\n                  <CardTitle className=\"text-3xl font-black text-gray-900\">Send Us a Message</CardTitle>\n                  <p className=\"text-gray-700 font-medium\">We'll respond within 2 hours during business hours</p>\n                </CardHeader>\n                <CardContent className=\"p-8\">\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-bold text-gray-900 mb-2\">Full Name *</label>\n                        <Input\n                          name=\"name\"\n                          value={formData.name}\n                          onChange={handleChange}\n                          required\n                          className=\"w-full\"\n                          placeholder=\"Your full name\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-bold text-gray-900 mb-2\">Phone Number</label>\n                        <Input\n                          name=\"phone\"\n                          value={formData.phone}\n                          onChange={handleChange}\n                          className=\"w-full\"\n                          placeholder=\"+971-XX-XXX-XXXX\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-bold text-gray-900 mb-2\">Email Address *</label>\n                      <Input\n                        type=\"email\"\n                        name=\"email\"\n                        value={formData.email}\n                        onChange={handleChange}\n                        required\n                        className=\"w-full\"\n                        placeholder=\"your.email@example.com\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-bold text-gray-900 mb-2\">Inquiry Type</label>\n                      <select\n                        name=\"type\"\n                        value={formData.type}\n                        onChange={handleChange}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"general\">General Inquiry</option>\n                        <option value=\"support\">Customer Support</option>\n                        <option value=\"provider\">Become a Provider</option>\n                        <option value=\"business\">Business Partnership</option>\n                        <option value=\"technical\">Technical Issue</option>\n                        <option value=\"feedback\">Feedback & Suggestions</option>\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-bold text-gray-900 mb-2\">Subject *</label>\n                      <Input\n                        name=\"subject\"\n                        value={formData.subject}\n                        onChange={handleChange}\n                        required\n                        className=\"w-full\"\n                        placeholder=\"Brief description of your inquiry\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-bold text-gray-900 mb-2\">Message *</label>\n                      <Textarea\n                        name=\"message\"\n                        value={formData.message}\n                        onChange={handleChange}\n                        required\n                        rows={5}\n                        className=\"w-full\"\n                        placeholder=\"Please provide details about your inquiry...\"\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-orange-500 hover:bg-orange-600 text-white font-black text-lg py-3 shadow-lg\"\n                    >\n                      Send Message\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </ScrollReveal>\n\n            {/* Office Locations */}\n            <div className=\"space-y-8\">\n              <ScrollReveal delay={200}>\n                <h3 className=\"text-3xl font-black text-gray-900 mb-8\">Our Office Locations</h3>\n              </ScrollReveal>\n              \n              {offices.map((office, index) => (\n                <ScrollReveal key={index} delay={300 + index * 100}>\n                  <Card className=\"bg-white shadow-lg border-0\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <h4 className=\"text-xl font-black text-gray-900\">{office.city}</h4>\n                        {office.isMain && (\n                          <Badge className=\"bg-orange-500 text-white\">Main Office</Badge>\n                        )}\n                      </div>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-start\">\n                          <MapPin className=\"h-5 w-5 text-gray-600 mr-3 mt-1\" />\n                          <span className=\"text-gray-700 font-medium\">{office.address}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Phone className=\"h-5 w-5 text-gray-600 mr-3\" />\n                          <span className=\"text-gray-700 font-medium\">{office.phone}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-5 w-5 text-gray-600 mr-3\" />\n                          <span className=\"text-gray-700 font-medium\">{office.hours}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </ScrollReveal>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black text-gray-900 text-center mb-12\">Frequently Asked Questions</h2>\n          </ScrollReveal>\n          <div className=\"space-y-6\">\n            {faqItems.map((item, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-gray-50 shadow-lg border-0\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-black text-gray-900 mb-3\">{item.question}</h3>\n                    <p className=\"text-gray-700 font-medium\">{item.answer}</p>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Emergency Contact */}\n      <section className=\"py-16 bg-gradient-to-br from-red-500 to-orange-500 text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <ScrollReveal>\n            <h2 className=\"text-3xl font-black mb-4\">Need Emergency Service?</h2>\n            <p className=\"text-xl font-bold mb-6\">\n              For urgent plumbing, electrical, or security issues, contact our emergency hotline\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <a \n                href=\"tel:+971800TASKEGO\" \n                className=\"bg-white text-red-600 px-8 py-4 rounded-lg font-black text-lg hover:bg-gray-100 transition-colors shadow-lg flex items-center\"\n              >\n                <Phone className=\"h-6 w-6 mr-3\" />\n                +971-800-TASKEGO\n              </a>\n              <Badge className=\"bg-white text-red-600 px-4 py-2 text-lg font-bold\">\n                Available 24/7\n              </Badge>\n            </div>\n          </ScrollReveal>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":15250},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { ArrowRight, Star, Clock, Shield, Users, CheckCircle, Play } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\nimport ParallaxHero from '@/components/common/ParallaxHero';\n\ninterface HomeProps {\n  messages: any;\n}\n\nexport default function Home({ messages }: HomeProps) {\n  const [currentTestimonial, setCurrentTestimonial] = useState(0);\n\n  const serviceCategories = [\n    {\n      id: 1,\n      name: messages.services?.cleaning?.title || 'Cleaning',\n      description: messages.services?.cleaning?.description || 'Professional house and office cleaning services',\n      icon: '🧹',\n      color: 'from-blue-500 to-purple-600',\n      price: 'Starting from $25',\n      href: '/services?category=cleaning'\n    },\n    {\n      id: 2,\n      name: messages.services?.plumbing?.title || 'Plumbing',\n      description: messages.services?.plumbing?.description || 'Expert plumbing repairs and installations',\n      icon: '🔧',\n      color: 'from-green-500 to-teal-600',\n      price: 'Starting from $40',\n      href: '/services?category=plumbing'\n    },\n    {\n      id: 3,\n      name: messages.services?.electrical?.title || 'Electrical',\n      description: messages.services?.electrical?.description || 'Licensed electrical services and repairs',\n      icon: '⚡',\n      color: 'from-blue-500 to-slate-600',\n      price: 'Starting from $50',\n      href: '/services?category=electrical'\n    },\n    {\n      id: 4,\n      name: messages.services?.delivery?.title || 'Delivery',\n      description: messages.services?.delivery?.description || 'Fast and reliable delivery services',\n      icon: '🚚',\n      color: 'from-red-500 to-pink-600',\n      price: 'Starting from $15',\n      href: '/services?category=delivery'\n    },\n    {\n      id: 5,\n      name: messages.services?.maintenance?.title || 'Maintenance',\n      description: messages.services?.maintenance?.description || 'General maintenance and handyman services',\n      icon: '🔨',\n      color: 'from-indigo-500 to-purple-600',\n      price: 'Starting from $30',\n      href: '/services?category=maintenance'\n    },\n    {\n      id: 6,\n      name: messages.services?.painting?.title || 'Painting',\n      description: messages.services?.painting?.description || 'Professional interior and exterior painting',\n      icon: '🎨',\n      color: 'from-emerald-500 to-green-600',\n      price: 'Starting from $35',\n      href: '/services?category=painting'\n    },\n    {\n      id: 7,\n      name: messages.services?.gardening?.title || 'Gardening',\n      description: messages.services?.gardening?.description || 'Professional garden care and landscaping',\n      icon: '🌱',\n      color: 'from-green-500 to-emerald-600',\n      price: 'Starting from $45',\n      href: '/services?category=gardening'\n    },\n    {\n      id: 8,\n      name: messages.services?.tutoring?.title || 'Tutoring',\n      description: messages.services?.tutoring?.description || 'Expert academic tutoring and coaching',\n      icon: '🎓',\n      color: 'from-purple-500 to-indigo-600',\n      price: 'Starting from $30',\n      href: '/services?category=tutoring'\n    },\n    {\n      id: 9,\n      name: messages.services?.automotive?.title || 'Auto Services',\n      description: messages.services?.automotive?.description || 'Professional car maintenance and repair',\n      icon: '🚗',\n      color: 'from-gray-500 to-slate-600',\n      price: 'Starting from $60',\n      href: '/services?category=automotive'\n    },\n    {\n      id: 10,\n      name: messages.services?.petcare?.title || 'Pet Care',\n      description: messages.services?.petcare?.description || 'Professional pet sitting and care services',\n      icon: '🐕',\n      color: 'from-orange-500 to-red-600',\n      price: 'Starting from $20',\n      href: '/services?category=petcare'\n    },\n    {\n      id: 11,\n      name: messages.services?.fitness?.title || 'Personal Training',\n      description: messages.services?.fitness?.description || 'Professional fitness and wellness coaching',\n      icon: '💪',\n      color: 'from-red-500 to-pink-600',\n      price: 'Starting from $40',\n      href: '/services?category=fitness'\n    },\n    {\n      id: 12,\n      name: messages.services?.tech?.title || 'Tech Support',\n      description: messages.services?.tech?.description || 'Computer and technology assistance',\n      icon: '💻',\n      color: 'from-blue-500 to-cyan-600',\n      price: 'Starting from $35',\n      href: '/services?category=tech'\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: 'Sarah Johnson',\n      role: 'Homeowner',\n      content: 'Taskego made finding a reliable cleaner so easy. The quality of service exceeded my expectations!',\n      rating: 5,\n      image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      name: 'Ahmed Hassan',\n      role: 'Business Owner',\n      content: 'As a service provider, Taskego has helped me grow my business and connect with amazing clients.',\n      rating: 5,\n      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      name: 'Maria Rodriguez',\n      role: 'Property Manager',\n      content: 'The platform is incredibly user-friendly and the providers are thoroughly vetted. Highly recommended!',\n      rating: 5,\n      image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'\n    }\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Enhanced Parallax Hero Section */}\n      <ParallaxHero \n        messages={messages}\n        onGetStarted={() => window.location.assign('/services')}\n        onWatchDemo={() => window.location.assign('/chat')}\n      />\n\n      {/* MASSIVE Stats Section */}\n      <section className=\"py-20 bg-gradient-to-br from-slate-800 to-blue-800 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-5xl font-black mb-4\">TASKEGO BY THE NUMBERS</h2>\n              <p className=\"text-2xl font-bold max-w-4xl mx-auto\">\n                THE LARGEST SERVICE PLATFORM IN THE MIDDLE EAST WITH UNMATCHED REACH AND QUALITY\n              </p>\n            </ScrollReveal>\n          </div>\n          \n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-4 gap-4 mb-8\">\n            <div className=\"text-center bg-white/10 backdrop-blur-lg p-4 rounded-xl\" data-testid=\"stat-providers\">\n              <div className=\"text-3xl font-black text-blue-300 mb-1\">\n                <AnimatedCounter end={1200} suffix=\"+\" />\n              </div>\n              <div className=\"text-white font-bold text-xs\">SERVICE PROVIDERS</div>\n            </div>\n            \n            <div className=\"text-center bg-white/10 backdrop-blur-lg p-4 rounded-xl\" data-testid=\"stat-customers\">\n              <div className=\"text-3xl font-black text-slate-300 mb-1\">\n                <AnimatedCounter end={50000} suffix=\"+\" />\n              </div>\n              <div className=\"text-white font-bold text-xs\">HAPPY CUSTOMERS</div>\n            </div>\n            \n            <div className=\"text-center bg-white/10 backdrop-blur-lg p-4 rounded-xl\" data-testid=\"stat-services\">\n              <div className=\"text-3xl font-black text-blue-200 mb-1\">\n                <AnimatedCounter end={125000} suffix=\"+\" />\n              </div>\n              <div className=\"text-white font-bold text-xs\">SERVICES COMPLETED</div>\n            </div>\n            \n            <div className=\"text-center bg-white/10 backdrop-blur-lg p-4 rounded-xl\" data-testid=\"stat-satisfaction\">\n              <div className=\"text-3xl font-black text-yellow-300 mb-1\">98%</div>\n              <div className=\"text-white font-bold text-xs\">SATISFACTION RATE</div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"bg-white/10 backdrop-blur-lg border-0 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Clock className=\"h-8 w-8 text-blue-300 mr-3\" />\n                  <h3 className=\"text-xl font-black\">24/7 AVAILABILITY</h3>\n                </div>\n                <p className=\"text-gray-200 font-bold mb-4\">\n                  ROUND-THE-CLOCK SERVICE BOOKING AND CUSTOMER SUPPORT FOR ALL YOUR URGENT NEEDS\n                </p>\n                <ul className=\"space-y-2 text-sm font-bold\">\n                  <li>• EMERGENCY SERVICES</li>\n                  <li>• INSTANT BOOKING</li>\n                  <li>• LIVE CHAT SUPPORT</li>\n                  <li>• REAL-TIME TRACKING</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/10 backdrop-blur-lg border-0 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Shield className=\"h-8 w-8 text-green-300 mr-3\" />\n                  <h3 className=\"text-xl font-black\">VERIFIED PROVIDERS</h3>\n                </div>\n                <p className=\"text-gray-200 font-bold mb-4\">\n                  ALL SERVICE PROVIDERS UNDERGO RIGOROUS BACKGROUND CHECKS AND SKILL VERIFICATION\n                </p>\n                <ul className=\"space-y-2 text-sm font-bold\">\n                  <li>• BACKGROUND CHECKS</li>\n                  <li>• SKILL VERIFICATION</li>\n                  <li>• INSURANCE COVERAGE</li>\n                  <li>• QUALITY GUARANTEES</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/10 backdrop-blur-lg border-0 text-white\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Users className=\"h-8 w-8 text-purple-300 mr-3\" />\n                  <h3 className=\"text-xl font-black\">MOBILE APP</h3>\n                </div>\n                <p className=\"text-gray-200 font-bold mb-4\">\n                  AWARD-WINNING MOBILE APPLICATION WITH ADVANCED FEATURES AND SEAMLESS USER EXPERIENCE\n                </p>\n                <ul className=\"space-y-2 text-sm font-bold\">\n                  <li>• GPS TRACKING</li>\n                  <li>• OFFLINE CAPABILITY</li>\n                  <li>• PUSH NOTIFICATIONS</li>\n                  <li>• BIOMETRIC AUTHENTICATION</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"bg-white/10 backdrop-blur-lg p-8 rounded-3xl text-center mt-8\">\n            <h3 className=\"text-3xl font-black mb-6\">DEVELOPMENT METRICS</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div>\n                <div className=\"text-3xl font-black mb-2\">50+</div>\n                <div className=\"font-bold\">ENGINEERS</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-black mb-2\">1M+</div>\n                <div className=\"font-bold\">LINES OF CODE</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-black mb-2\">99.9%</div>\n                <div className=\"font-bold\">CODE COVERAGE</div>\n              </div>\n              <div>\n                <div className=\"text-3xl font-black mb-2\">24/7</div>\n                <div className=\"font-bold\">MONITORING</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Categories */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              {messages.services?.title || 'Our Services'}\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              {messages.services?.description || 'Explore our wide range of professional services designed to make your life easier.'}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {serviceCategories.map((category) => (\n              <Link key={category.id} href={category.href}>\n                <Card className=\"bg-white rounded-xl shadow-lg border-0 h-full cursor-pointer hover:shadow-2xl transition-all duration-300 transform hover:scale-105\" data-testid={`card-service-${category.id}`}>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className={`w-12 h-12 bg-gradient-to-br ${category.color} rounded-xl flex items-center justify-center mx-auto mb-3`}>\n                      <span className=\"text-lg\">{category.icon}</span>\n                    </div>\n                    <h3 className=\"text-base font-black text-gray-900 mb-2\">\n                      {category.name}\n                    </h3>\n                    <p className=\"text-gray-700 text-xs font-medium mb-2 leading-tight\">\n                      {category.description}\n                    </p>\n                    <div className=\"text-white font-black text-xs bg-gradient-to-r from-blue-600 to-slate-600 px-2 py-1 rounded-full shadow-lg mb-2\">\n                      {category.price}\n                    </div>\n                    <div className=\"text-xs text-gray-500 font-bold\">\n                      {category.id <= 3 ? '500+' : category.id <= 6 ? '300+' : category.id <= 9 ? '200+' : '150+'} PROVIDERS\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"mt-16\">\n            <div className=\"bg-gradient-to-br from-blue-600 to-slate-600 p-8 rounded-3xl text-white text-center mb-8\">\n              <h3 className=\"text-3xl font-black mb-4\">EXCLUSIVE SERVICE PACKAGES</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"bg-white/20 backdrop-blur-lg p-6 rounded-xl\">\n                  <h4 className=\"text-xl font-black mb-3\">BASIC BUNDLE</h4>\n                  <div className=\"text-2xl font-black mb-2\">$199/month</div>\n                  <ul className=\"space-y-2 text-sm font-bold\">\n                    <li>✓ 10 HOURS OF CLEANING</li>\n                    <li>✓ 5 HOURS OF MAINTENANCE</li>\n                    <li>✓ PRIORITY BOOKING</li>\n                    <li>✓ 24/7 SUPPORT</li>\n                  </ul>\n                </div>\n                <div className=\"bg-white/30 backdrop-blur-lg p-6 rounded-xl border-2 border-blue-400\">\n                  <div className=\"bg-blue-400 text-white px-3 py-1 rounded-full text-xs font-black mb-3 inline-block\">MOST POPULAR</div>\n                  <h4 className=\"text-xl font-black mb-3\">PREMIUM BUNDLE</h4>\n                  <div className=\"text-2xl font-black mb-2\">$399/month</div>\n                  <ul className=\"space-y-2 text-sm font-bold\">\n                    <li>✓ 20 HOURS OF ANY SERVICE</li>\n                    <li>✓ UNLIMITED DELIVERY</li>\n                    <li>✓ VIP SUPPORT</li>\n                    <li>✓ SAME-DAY BOOKING</li>\n                  </ul>\n                </div>\n                <div className=\"bg-white/20 backdrop-blur-lg p-6 rounded-xl\">\n                  <h4 className=\"text-xl font-black mb-3\">ENTERPRISE</h4>\n                  <div className=\"text-2xl font-black mb-2\">CUSTOM</div>\n                  <ul className=\"space-y-2 text-sm font-bold\">\n                    <li>✓ UNLIMITED SERVICES</li>\n                    <li>✓ DEDICATED MANAGER</li>\n                    <li>✓ CUSTOM INTEGRATIONS</li>\n                    <li>✓ SLA GUARANTEES</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n              <div className=\"text-center bg-blue-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-black text-blue-600 mb-1\">INSTANT</div>\n                <div className=\"text-sm font-bold text-gray-700\">BOOKING CONFIRMATION</div>\n              </div>\n              <div className=\"text-center bg-blue-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-black text-blue-600 mb-1\">SECURE</div>\n                <div className=\"text-sm font-bold text-gray-700\">PAYMENT PROCESSING</div>\n              </div>\n              <div className=\"text-center bg-slate-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-black text-slate-600 mb-1\">LIVE</div>\n                <div className=\"text-sm font-bold text-gray-700\">TRACKING & UPDATES</div>\n              </div>\n              <div className=\"text-center bg-slate-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-black text-slate-600 mb-1\">GUARANTEED</div>\n                <div className=\"text-sm font-bold text-gray-700\">SATISFACTION</div>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"mb-8\">\n                <h4 className=\"text-2xl font-black text-gray-900 mb-4\">ALL 12 SERVICE CATEGORIES AVAILABLE 24/7</h4>\n                <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 text-sm font-bold\">\n                  <div>🧹 CLEANING SERVICES</div>\n                  <div>🔧 PLUMBING REPAIRS</div>\n                  <div>⚡ ELECTRICAL WORK</div>\n                  <div>🚚 DELIVERY SERVICES</div>\n                  <div>🔨 MAINTENANCE</div>\n                  <div>🎨 PAINTING SERVICES</div>\n                  <div>🌱 GARDENING</div>\n                  <div>🎓 TUTORING</div>\n                  <div>🚗 AUTO SERVICES</div>\n                  <div>🐕 PET CARE</div>\n                  <div>💪 PERSONAL TRAINING</div>\n                  <div>💻 TECH SUPPORT</div>\n                </div>\n              </div>\n              <Link href=\"/services\">\n                <Button size=\"lg\" className=\"px-12 py-6 bg-gradient-to-r from-blue-600 to-slate-600 hover:from-blue-700 hover:to-slate-700 text-white font-black text-xl shadow-2xl border-0 transition-all duration-300 transform hover:scale-105 mr-4\" data-testid=\"button-view-services\">\n                  VIEW ALL 12+ SERVICE CATEGORIES\n                  <ArrowRight className=\"ml-2 h-6 w-6\" />\n                </Button>\n              </Link>\n              <Button size=\"lg\" className=\"px-12 py-6 bg-white text-blue-600 hover:bg-gray-100 font-black text-xl shadow-2xl border-2 border-blue-600 transition-all duration-300 transform hover:scale-105\" data-testid=\"button-download-app\">\n                DOWNLOAD MOBILE APP\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n                What Our Customers Say\n              </h2>\n              <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n                Join thousands of satisfied customers who trust our platform.\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"max-w-3xl mx-auto\">\n            <Card className=\"bg-gray-50 border-0 shadow-lg\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"flex justify-center mb-4\">\n                  {[...Array(testimonials[currentTestimonial]?.rating || 5)].map((_, i) => (\n                    <Star key={i} className=\"h-5 w-5 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <blockquote className=\"text-lg text-gray-700 mb-6 italic\">\n                  \"{testimonials[currentTestimonial]?.content}\"\n                </blockquote>\n                <div className=\"flex items-center justify-center\">\n                  <img\n                    src={testimonials[currentTestimonial]?.image}\n                    alt={testimonials[currentTestimonial]?.name}\n                    className=\"w-12 h-12 rounded-full mr-4\"\n                  />\n                  <div className=\"text-left\">\n                    <div className=\"font-bold text-gray-900\" data-testid={`text-testimonial-name-${currentTestimonial}`}>\n                      {testimonials[currentTestimonial]?.name}\n                    </div>\n                    <div className=\"text-gray-600\" data-testid={`text-testimonial-role-${currentTestimonial}`}>\n                      {testimonials[currentTestimonial]?.role}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-600 to-slate-600 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-black mb-4\">\n              {messages.cta?.title || 'Ready to Get Started?'}\n            </h2>\n            <p className=\"text-xl font-bold mb-8 max-w-2xl mx-auto\">\n              {messages.cta?.description || 'Join thousands of satisfied customers who trust Taskego for their service needs.'}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/services\">\n                <Button size=\"lg\" className=\"px-8 py-4 bg-white text-blue-600 hover:bg-gray-100 transition-all duration-300 font-black text-lg\" data-testid=\"button-cta-start\">\n                  {messages.cta?.download_app || 'Get Started Now'}\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/about\">\n                <Button size=\"lg\" variant=\"outline\" className=\"px-8 py-4 border-2 border-white text-white hover:bg-white hover:text-blue-600 transition-all duration-300 font-black text-lg\" data-testid=\"button-cta-learn\">\n                  {messages.cta?.learn_more || 'Learn More'}\n                </Button>\n              </Link>\n            </div>\n          </ScrollReveal>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":22808},"client/src/pages/Landing.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Messages } from '@/lib/i18n';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Users, Shield, Zap } from 'lucide-react';\n\ninterface LandingProps {\n  messages: Messages;\n}\n\nexport default function Landing({ messages }: LandingProps) {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-20\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center max-w-4xl mx-auto\"\n        >\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"p-4 bg-blue-600 rounded-full\">\n              <Sparkles className=\"w-12 h-12 text-white\" />\n            </div>\n          </div>\n          \n          <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n            {messages.welcome || 'Welcome to Taskego'}\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto\">\n            {messages.heroSubtitle || 'Your trusted local service marketplace connecting clients with skilled providers'}\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              {messages.getStarted || 'Get Started'}\n            </Button>\n            \n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"px-8 py-4 text-lg\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              {messages.becomeProvider || 'Become a Provider'}\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\"\n          >\n            <Users className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {messages.trustedProviders || 'Trusted Providers'}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              {messages.trustedProvidersDesc || 'Connect with verified local service providers'}\n            </p>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\"\n          >\n            <Shield className=\"w-12 h-12 text-yellow-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {messages.secureBooking || 'Secure Booking'}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              {messages.secureBookingDesc || 'Safe and secure booking system with payment protection'}\n            </p>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n            className=\"text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\"\n          >\n            <Zap className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {messages.quickService || 'Quick Service'}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              {messages.quickServiceDesc || 'Fast and reliable service delivery when you need it'}\n            </p>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4271},"client/src/pages/Login.tsx":{"content":"\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Sparkles, ArrowRight, Shield, Users } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Messages } from '@/lib/i18n';\n\ninterface LoginProps {\n  messages: Messages;\n}\n\nexport default function Login({ messages }: LoginProps) {\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-600 to-yellow-600 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                {messages.login?.title || 'Welcome Back'}\n              </CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                {messages.login?.subtitle || 'Sign in to access your Taskego account'}\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <Button\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 text-lg font-medium\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                {messages.login?.button || 'Continue with Replit'}\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n              \n              <div className=\"text-center text-sm text-gray-500\">\n                {messages.login?.secure || 'Secure authentication powered by Replit'}\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"text-center\">\n                  <Shield className=\"w-6 h-6 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.login?.secure_auth || 'Secure Auth'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <Users className=\"w-6 h-6 mx-auto mb-2 text-yellow-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.login?.trusted || 'Trusted Platform'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":2859},"client/src/pages/ProviderDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Calendar, DollarSign, Star, Briefcase, TrendingUp, Eye, Edit, Trash2, Plus } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\ninterface ProviderDashboardProps {\n  messages: any;\n}\n\nexport default function ProviderDashboard({ messages }: ProviderDashboardProps) {\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n\n  // Mock data - in real app, this would come from API\n  const mockStats = {\n    totalBookings: 247,\n    totalEarnings: 8547,\n    averageRating: 4.8,\n    activeServices: 3,\n  };\n\n  const mockBookings = [\n    {\n      id: 1,\n      clientName: 'John Smith',\n      service: 'House Cleaning',\n      date: '2024-01-20',\n      status: 'completed',\n      amount: 75,\n      clientAvatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 2,\n      clientName: 'Emily Johnson',\n      service: 'Deep Cleaning',\n      date: '2024-01-18',\n      status: 'in_progress',\n      amount: 120,\n      clientAvatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 3,\n      clientName: 'Michael Brown',\n      service: 'Office Cleaning',\n      date: '2024-01-15',\n      status: 'pending',\n      amount: 90,\n      clientAvatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face'\n    },\n  ];\n\n  const mockServices = [\n    {\n      id: 1,\n      title: 'Premium House Cleaning',\n      description: 'Deep cleaning service for residential homes',\n      price: 35,\n      priceType: 'hourly',\n      status: 'active',\n      bookings: 24,\n      rating: 4.9,\n    },\n    {\n      id: 2,\n      title: 'Office Cleaning',\n      description: 'Commercial cleaning for offices and businesses',\n      price: 45,\n      priceType: 'hourly',\n      status: 'active',\n      bookings: 18,\n      rating: 4.8,\n    },\n    {\n      id: 3,\n      title: 'Move-in/Move-out Cleaning',\n      description: 'Comprehensive cleaning for relocations',\n      price: 120,\n      priceType: 'fixed',\n      status: 'inactive',\n      bookings: 12,\n      rating: 4.7,\n    },\n  ];\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/provider/stats'],\n    queryFn: () => Promise.resolve(mockStats),\n  });\n\n  const { data: recentBookings } = useQuery({\n    queryKey: ['/api/provider/bookings', selectedPeriod],\n    queryFn: () => Promise.resolve(mockBookings),\n  });\n\n  const { data: services } = useQuery({\n    queryKey: ['/api/provider/services'],\n    queryFn: () => Promise.resolve(mockServices),\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'Completed';\n      case 'in_progress':\n        return 'In Progress';\n      case 'pending':\n        return 'Pending';\n      case 'cancelled':\n        return 'Cancelled';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-khadamati-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-12\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n              {messages.provider_dashboard?.title || 'Provider Dashboard'}\n            </h1>\n            <p className=\"text-xl text-khadamati-gray\">\n              {messages.provider_dashboard?.description || 'Manage your services and bookings.'}\n            </p>\n          </ScrollReveal>\n        </div>\n\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <ScrollReveal>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.total_bookings || 'Total Bookings'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.totalBookings || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-blue rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={100}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.earnings || 'Total Earnings'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      $<AnimatedCounter end={stats?.totalEarnings || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-success rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={200}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.rating || 'Average Rating'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.averageRating || 0} suffix=\"\" />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-yellow rounded-lg flex items-center justify-center\">\n                    <Star className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={300}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.active_services || 'Active Services'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.activeServices || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-info rounded-lg flex items-center justify-center\">\n                    <Briefcase className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n        </div>\n\n        {/* Recent Bookings */}\n        <ScrollReveal delay={400}>\n          <Card className=\"bg-white shadow-lg border-0 mb-12\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.provider_dashboard?.recent_bookings || 'Recent Bookings'}\n                </CardTitle>\n                <Button variant=\"outline\" size=\"sm\">\n                  {messages.provider_dashboard?.view_all || 'View All'}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>{messages.provider_dashboard?.table?.client || 'Client'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.service || 'Service'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.date || 'Date'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.status || 'Status'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.amount || 'Amount'}</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {recentBookings?.map((booking) => (\n                      <TableRow key={booking.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage src={booking.clientAvatar} alt={booking.clientName} />\n                              <AvatarFallback>\n                                {booking.clientName.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-medium\">{booking.clientName}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>{booking.service}</TableCell>\n                        <TableCell>{booking.date}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(booking.status)}>\n                            {getStatusLabel(booking.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"font-semibold\">${booking.amount}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n\n        {/* Service Management */}\n        <ScrollReveal delay={500}>\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.provider_dashboard?.services || 'My Services'}\n                </CardTitle>\n                <Button className=\"bg-khadamati-blue hover:bg-blue-700\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {messages.provider_dashboard?.add_service || 'Add Service'}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {services?.map((service) => (\n                  <Card key={service.id} className=\"border border-gray-200\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-semibold text-khadamati-dark mb-2\">\n                            {service.title}\n                          </h3>\n                          <p className=\"text-khadamati-gray text-sm mb-3\">\n                            {service.description}\n                          </p>\n                          <div className=\"flex items-center gap-4 text-sm text-khadamati-gray\">\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-4 w-4\" />\n                              {service.bookings} bookings\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Star className=\"h-4 w-4 text-khadamati-yellow\" />\n                              {service.rating}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-lg font-bold text-khadamati-blue\">\n                          ${service.price}/{service.priceType === 'hourly' ? 'hour' : 'job'}\n                        </span>\n                        <Badge className={service.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>\n                          {service.status}\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14330},"client/src/pages/ServiceDetail.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { ArrowLeft, Star, Clock, MapPin, Phone, MessageCircle, Share2, Heart, Calendar, DollarSign, User, Badge, Shield, Award } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge as UIBadge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport type { Messages } from '@/lib/i18n';\n\ninterface ServiceDetailProps {\n  messages: Messages;\n}\n\nexport default function ServiceDetail({ messages }: ServiceDetailProps) {\n  const { slug } = useParams();\n\n  // Mock service data - in real app, fetch based on slug\n  const service = {\n    id: 1,\n    title: \"Professional House Cleaning\",\n    titleAr: \"تنظيف منزلي محترف\",\n    description: \"Complete house cleaning service with professional equipment and eco-friendly products. We handle everything from deep cleaning to regular maintenance.\",\n    descriptionAr: \"خدمة تنظيف منزلي شاملة بمعدات احترافية ومنتجات صديقة للبيئة. نتولى كل شيء من التنظيف العميق إلى الصيانة الدورية.\",\n    price: 45,\n    priceType: \"hourly\",\n    duration: 120,\n    rating: 4.8,\n    reviewCount: 156,\n    images: [\n      \"/api/placeholder/600/400\",\n      \"/api/placeholder/600/400\",\n      \"/api/placeholder/600/400\"\n    ],\n    provider: {\n      id: \"provider-1\",\n      name: \"Sarah Johnson\",\n      nameAr: \"سارة جونسون\",\n      avatar: \"/api/placeholder/100/100\",\n      rating: 4.9,\n      reviewCount: 234,\n      completedJobs: 189,\n      responseTime: \"2 hours\",\n      languages: [\"English\", \"Arabic\"],\n      verified: true,\n      joinedDate: \"2023-01-15\"\n    },\n    features: [\n      \"Professional equipment included\",\n      \"Eco-friendly products\",\n      \"Flexible scheduling\",\n      \"Satisfaction guarantee\",\n      \"Insured service\"\n    ],\n    featuresAr: [\n      \"معدات احترافية مدرجة\",\n      \"منتجات صديقة للبيئة\",\n      \"جدولة مرنة\",\n      \"ضمان الرضا\",\n      \"خدمة مؤمنة\"\n    ],\n    availability: {\n      monday: [\"9:00\", \"17:00\"],\n      tuesday: [\"9:00\", \"17:00\"],\n      wednesday: [\"9:00\", \"17:00\"],\n      thursday: [\"9:00\", \"17:00\"],\n      friday: [\"9:00\", \"15:00\"],\n      saturday: [\"10:00\", \"16:00\"],\n      sunday: []\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-slate-800\"\n    >\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <motion.div variants={itemVariants} className=\"mb-6\">\n          <Button variant=\"ghost\" className=\"gap-2\">\n            <ArrowLeft className=\"w-4 h-4\" />\n            {(messages.backToServices as string) || \"Back to Services\"}\n          </Button>\n        </motion.div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Image Gallery */}\n            <motion.div variants={itemVariants}>\n              <Card className=\"overflow-hidden\">\n                <div className=\"relative h-96 bg-gradient-to-br from-khadamati-blue/10 to-khadamati-yellow/10\">\n                  <motion.img\n                    src={service.images[0]}\n                    alt={service.title}\n                    className=\"w-full h-full object-cover\"\n                    whileHover={{ scale: 1.05 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <div className=\"absolute top-4 right-4 flex gap-2\">\n                    <Button size=\"sm\" variant=\"secondary\" className=\"backdrop-blur-sm bg-white/80\">\n                      <Heart className=\"w-4 h-4\" />\n                    </Button>\n                    <Button size=\"sm\" variant=\"secondary\" className=\"backdrop-blur-sm bg-white/80\">\n                      <Share2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"absolute bottom-4 left-4 flex gap-2\">\n                    <UIBadge className=\"bg-khadamati-blue text-white\">\n                      <Star className=\"w-3 h-3 mr-1\" />\n                      {service.rating}\n                    </UIBadge>\n                    <UIBadge variant=\"secondary\" className=\"backdrop-blur-sm bg-white/80\">\n                      {service.reviewCount} reviews\n                    </UIBadge>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n\n            {/* Service Details */}\n            <motion.div variants={itemVariants}>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n                        {service.title}\n                      </h1>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-300\">\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          {service.duration} minutes\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <DollarSign className=\"w-4 h-4\" />\n                          ${service.price}/{service.priceType}\n                        </div>\n                      </div>\n                    </div>\n                    <UIBadge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                      Available Today\n                    </UIBadge>\n                  </div>\n\n                  <Tabs defaultValue=\"description\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                      <TabsTrigger value=\"description\">Description</TabsTrigger>\n                      <TabsTrigger value=\"features\">Features</TabsTrigger>\n                      <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"description\" className=\"mt-4\">\n                      <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                        {service.description}\n                      </p>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"features\" className=\"mt-4\">\n                      <ul className=\"space-y-2\">\n                        {service.features.map((feature, index) => (\n                          <li key={index} className=\"flex items-center gap-2\">\n                            <Badge className=\"w-4 h-4 text-khadamati-blue\" />\n                            <span className=\"text-gray-700 dark:text-gray-300\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"reviews\" className=\"mt-4\">\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((review) => (\n                          <div key={review} className=\"border rounded-lg p-4\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarFallback>JD</AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className=\"font-semibold text-sm\">John Doe</div>\n                                <div className=\"flex items-center gap-1\">\n                                  {[1, 2, 3, 4, 5].map((star) => (\n                                    <Star key={star} className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              Excellent service! Very professional and thorough cleaning.\n                            </p>\n                          </div>\n                        ))}\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Provider Card */}\n            <motion.div variants={itemVariants}>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={service.provider.avatar} />\n                      <AvatarFallback>{service.provider.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-semibold\">{service.provider.name}</h3>\n                        {service.provider.verified && (\n                          <Shield className=\"w-4 h-4 text-blue-500\" />\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n                        <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                        {service.provider.rating} ({service.provider.reviewCount} reviews)\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n                    <div>\n                      <div className=\"text-gray-600 dark:text-gray-400\">Completed Jobs</div>\n                      <div className=\"font-semibold\">{service.provider.completedJobs}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-gray-600 dark:text-gray-400\">Response Time</div>\n                      <div className=\"font-semibold\">{service.provider.responseTime}</div>\n                    </div>\n                  </div>\n\n                  <Separator className=\"my-4\" />\n\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full bg-khadamati-blue hover:bg-khadamati-blue/90\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Book Now\n                    </Button>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <MessageCircle className=\"w-4 h-4 mr-1\" />\n                        Chat\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Phone className=\"w-4 h-4 mr-1\" />\n                        Call\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Quick Stats */}\n            <motion.div variants={itemVariants}>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold mb-4\">Quick Stats</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Price Range</span>\n                      <span className=\"font-semibold\">${service.price - 10} - ${service.price + 10}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Duration</span>\n                      <span className=\"font-semibold\">{service.duration} min</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Category</span>\n                      <span className=\"font-semibold\">Cleaning</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Location</span>\n                      <span className=\"font-semibold\">Your Area</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Similar Services */}\n            <motion.div variants={itemVariants}>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold mb-4\">Similar Services</h3>\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((item) => (\n                      <div key={item} className=\"flex gap-3 p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer transition-colors\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-khadamati-blue/20 to-khadamati-yellow/20 rounded-lg\"></div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-sm\">Deep Cleaning Service</div>\n                          <div className=\"text-xs text-gray-600\">$55/hour</div>\n                          <div className=\"flex items-center gap-1 text-xs\">\n                            <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                            4.7\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":14496},"client/src/pages/Services.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport InteractiveServiceCard from '@/components/services/InteractiveServiceCard';\nimport SimpleServiceCard from '@/components/services/SimpleServiceCard';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Star, MapPin, Clock, Search, Filter, ArrowRight, Users, Grid, List } from 'lucide-react';\n\ninterface ServicesProps {\n  messages: any;\n}\n\nexport default function Services({ messages }: ServicesProps) {\n  const [location] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [priceRange, setPriceRange] = useState('all');\n  const [sortBy, setSortBy] = useState('rating');\n  const [viewMode, setViewMode] = useState<'category' | 'list'>('category');\n\n  // Mock data for demonstration since API endpoints might not exist\n  const mockCategories = [\n    { id: 1, name: 'Cleaning', description: 'Professional cleaning services', icon: '🧹', color: '#3B82F6' },\n    { id: 2, name: 'Plumbing', description: 'Expert plumbing services', icon: '🔧', color: '#10B981' },\n    { id: 3, name: 'Electrical', description: 'Licensed electrical work', icon: '⚡', color: '#F59E0B' },\n    { id: 4, name: 'Delivery', description: 'Fast delivery services', icon: '🚚', color: '#EF4444' }\n  ];\n\n  const mockServices = [\n    {\n      id: 1,\n      title: 'Professional House Cleaning',\n      description: 'Deep cleaning service for your home with eco-friendly products',\n      price: 45,\n      priceType: 'hour',\n      rating: 4.8,\n      categoryId: 1,\n      location: 'Downtown Area',\n      duration: 120,\n      images: ['https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=400&h=300&fit=crop'],\n      provider: {\n        name: 'Sarah Johnson',\n        avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',\n        rating: 4.9,\n        completedJobs: 200,\n        verified: true\n      }\n    },\n    {\n      id: 2,\n      title: 'Emergency Plumbing Repair',\n      description: '24/7 plumbing repair services for urgent issues',\n      price: 80,\n      priceType: 'hour',\n      rating: 4.7,\n      categoryId: 2,\n      location: 'Citywide',\n      duration: 60,\n      images: ['https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400&h=300&fit=crop'],\n      provider: {\n        name: 'Ahmed Hassan',\n        avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',\n        rating: 4.8,\n        completedJobs: 150,\n        verified: true\n      }\n    },\n    {\n      id: 3,\n      title: 'Home Electrical Installation',\n      description: 'Professional electrical installation and maintenance',\n      price: 65,\n      priceType: 'hour',\n      rating: 4.9,\n      categoryId: 3,\n      location: 'Metro Area',\n      duration: 90,\n      images: ['https://images.unsplash.com/photo-1621905251189-08b45d6a269e?w=400&h=300&fit=crop'],\n      provider: {\n        name: 'Michael Chen',\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n        rating: 4.9,\n        completedJobs: 180,\n        verified: true\n      }\n    }\n  ];\n\n  // Group services by category\n  const servicesByCategory = mockServices.reduce((acc: any, service: any) => {\n    const category = mockCategories.find((cat: any) => cat.id === service.categoryId);\n    if (!category) return acc;\n    \n    if (!acc[category.name]) {\n      acc[category.name] = {\n        category,\n        services: []\n      };\n    }\n    acc[category.name].services.push(service);\n    return acc;\n  }, {});\n\n  const handleBookService = (serviceId: number) => {\n    console.log('Booking service', serviceId);\n    window.location.href = `/booking?service=${serviceId}`;\n  };\n\n  const handleViewDetails = (serviceId: number) => {\n    window.location.href = `/service/${serviceId}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <ScrollReveal>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              {messages.services?.title || 'Our Services'}\n            </h1>\n            <p className=\"text-gray-600 mb-6\">\n              {messages.services?.subtitle || 'Find professional services from trusted providers'}\n            </p>\n          </ScrollReveal>\n\n          {/* Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder={messages.services?.search || 'Search services...'}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full lg:w-48\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {mockCategories.map((category: any) => (\n                  <SelectItem key={category.id} value={category.name}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={priceRange} onValueChange={setPriceRange}>\n              <SelectTrigger className=\"w-full lg:w-48\">\n                <SelectValue placeholder=\"Price Range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Prices</SelectItem>\n                <SelectItem value=\"0-25\">$0 - $25</SelectItem>\n                <SelectItem value=\"25-50\">$25 - $50</SelectItem>\n                <SelectItem value=\"50-100\">$50 - $100</SelectItem>\n                <SelectItem value=\"100+\">$100+</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full lg:w-48\">\n                <SelectValue placeholder=\"Sort By\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"rating\">Rating</SelectItem>\n                <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === 'category' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('category')}\n              >\n                <Grid className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Services Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {viewMode === 'category' ? (\n          // Category View - Hierarchical Structure\n          <div className=\"space-y-12\">\n            {Object.entries(servicesByCategory).map(([categoryName, categoryData]: [string, any]) => (\n              <ScrollReveal key={categoryName}>\n                <div className=\"bg-white rounded-lg shadow-sm p-6\">\n                  {/* Category Header */}\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-12 h-12 rounded-lg flex items-center justify-center text-2xl\"\n                        style={{ backgroundColor: categoryData.category.color + '20' }}\n                      >\n                        {categoryData.category.icon}\n                      </div>\n                      <div>\n                        <h2 className=\"text-2xl font-bold text-gray-900\">\n                          {categoryData.category.name}\n                        </h2>\n                        <p className=\"text-gray-600\">\n                          {categoryData.category.description}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                      <Users className=\"h-3 w-3\" />\n                      {categoryData.services.length} Providers\n                    </Badge>\n                  </div>\n\n                  {/* Services Grid with Interactive Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {categoryData.services.map((service: any) => {\n                      // Transform service data to match InteractiveServiceCard props\n                      const transformedService = {\n                        ...service,\n                        provider: {\n                          name: service.provider?.name || 'Professional Provider',\n                          nameAr: service.provider?.nameAr || '',\n                          avatar: service.provider?.avatar || '',\n                          rating: service.provider?.rating || 4.8,\n                          completedJobs: service.provider?.completedJobs || 150,\n                          verified: service.provider?.verified || true\n                        },\n                        category: {\n                          name: categoryData.category.name,\n                          nameAr: categoryData.category.nameAr || '',\n                          icon: categoryData.category.icon,\n                          color: categoryData.category.color || '#3B82F6'\n                        },\n                        rating: service.rating || 4.8,\n                        location: service.location || 'Your area',\n                        duration: service.duration || 60\n                      };\n                      \n                      return (\n                        <ScrollReveal key={service.id} delay={50}>\n                          <SimpleServiceCard\n                            service={transformedService}\n                            onBook={handleBookService}\n                            onViewDetails={handleViewDetails}\n                          />\n                        </ScrollReveal>\n                      );\n                    })}\n                  </div>\n                </div>\n              </ScrollReveal>\n            ))}\n          </div>\n        ) : (\n          // List View - Traditional Grid\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {mockServices.map((service: any) => {\n              const transformedService = {\n                ...service,\n                provider: {\n                  name: service.provider?.name || 'Professional Provider',\n                  nameAr: service.provider?.nameAr || '',\n                  avatar: service.provider?.avatar || '',\n                  rating: service.provider?.rating || 4.8,\n                  completedJobs: service.provider?.completedJobs || 150,\n                  verified: service.provider?.verified || true\n                },\n                category: {\n                  name: mockCategories.find(cat => cat.id === service.categoryId)?.name || 'Service',\n                  nameAr: '',\n                  icon: mockCategories.find(cat => cat.id === service.categoryId)?.icon || '🔧',\n                  color: mockCategories.find(cat => cat.id === service.categoryId)?.color || '#3B82F6'\n                },\n                rating: service.rating || 4.8,\n                location: service.location || 'Your area',\n                duration: service.duration || 60\n              };\n\n              return (\n                <ScrollReveal key={service.id}>\n                  <SimpleServiceCard\n                    service={transformedService}\n                    onBook={handleBookService}\n                    onViewDetails={handleViewDetails}\n                  />\n                </ScrollReveal>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13127},"client/src/pages/SignUp.tsx":{"content":"import { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Sparkles, ArrowRight, Shield, Users, CheckCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Messages } from '@/lib/i18n';\n\ninterface SignUpProps {\n  messages: Messages;\n}\n\nexport default function SignUp({ messages }: SignUpProps) {\n  useEffect(() => {\n    // Auto-redirect to Replit Auth\n    const timer = setTimeout(() => {\n      window.location.href = '/api/login';\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-600 to-yellow-600 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                {messages.signup?.title || 'Join Taskego'}\n              </CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                {messages.signup?.subtitle || 'Create your account to get started'}\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <Button\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 text-lg font-medium\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                {messages.signup?.button || 'Sign Up with Replit'}\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n              \n              <div className=\"text-center text-sm text-gray-500\">\n                {messages.signup?.secure || 'Secure registration powered by Replit'}\n              </div>\n              \n              <div className=\"space-y-3 pt-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {messages.signup?.benefit1 || 'Connect with trusted service providers'}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {messages.signup?.benefit2 || 'Secure payment processing'}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {messages.signup?.benefit3 || 'Real-time booking management'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\n                <div className=\"text-center\">\n                  <Shield className=\"w-6 h-6 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.signup?.secure_auth || 'Secure Auth'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <Users className=\"w-6 h-6 mx-auto mb-2 text-yellow-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.signup?.community || 'Join Community'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":4168},"client/src/pages/Terms.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport type { Messages } from '@/lib/i18n';\n\ninterface TermsProps {\n  messages: Messages;\n}\n\nexport default function Terms({ messages }: TermsProps) {\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  return (\n    <motion.div\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-slate-800 py-12\"\n    >\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <motion.div variants={itemVariants} className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n            Terms of Service\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n            Please read these terms carefully before using Taskego\n          </p>\n        </motion.div>\n\n        <motion.div variants={itemVariants}>\n          <Card className=\"shadow-xl\">\n            <CardContent className=\"p-8\">\n              <div className=\"space-y-8\">\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    1. Acceptance of Terms\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    By accessing and using Taskego (Khadamati), you accept and agree to be bound by the terms and provision of this agreement. These Terms of Service apply to all users of the service, including but not limited to clients, service providers, and visitors.\n                  </p>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    2. Service Description\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed mb-4\">\n                    Taskego is a platform that connects clients with service providers for various home and professional services including but not limited to:\n                  </p>\n                  <ul className=\"list-disc list-inside text-gray-700 dark:text-gray-300 space-y-2 ml-4\">\n                    <li>Cleaning and housekeeping services</li>\n                    <li>Maintenance and repair services</li>\n                    <li>Professional consulting services</li>\n                    <li>Delivery and transportation services</li>\n                    <li>Other professional services as listed on the platform</li>\n                  </ul>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    3. User Responsibilities\n                  </h2>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">For Clients:</h3>\n                      <ul className=\"list-disc list-inside text-gray-700 dark:text-gray-300 space-y-1 ml-4\">\n                        <li>Provide accurate information about service requirements</li>\n                        <li>Be present at scheduled appointment times</li>\n                        <li>Ensure safe working conditions for service providers</li>\n                        <li>Make payments as agreed upon booking</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">For Service Providers:</h3>\n                      <ul className=\"list-disc list-inside text-gray-700 dark:text-gray-300 space-y-1 ml-4\">\n                        <li>Provide services professionally and competently</li>\n                        <li>Arrive on time for scheduled appointments</li>\n                        <li>Maintain appropriate licensing and insurance</li>\n                        <li>Treat client property with respect and care</li>\n                      </ul>\n                    </div>\n                  </div>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    4. Payment Terms\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed mb-4\">\n                    All payments are processed securely through our platform. We support various payment methods including credit cards, debit cards, and digital wallets. Service fees are clearly displayed before booking confirmation.\n                  </p>\n                  <ul className=\"list-disc list-inside text-gray-700 dark:text-gray-300 space-y-2 ml-4\">\n                    <li>Payment is due upon completion of service unless otherwise arranged</li>\n                    <li>Cancellation fees may apply as per our cancellation policy</li>\n                    <li>Refunds are processed according to our refund policy</li>\n                    <li>Platform service fees are non-refundable</li>\n                  </ul>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    5. Privacy and Data Protection\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    We are committed to protecting your privacy and personal information. Our data collection and usage practices are outlined in our Privacy Policy. By using our service, you consent to the collection and use of information in accordance with our Privacy Policy.\n                  </p>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    6. Limitation of Liability\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    Taskego acts as a platform connecting clients and service providers. We are not responsible for the quality, completeness, or safety of services provided. Our liability is limited to the platform service fees paid. Users engage service providers at their own risk.\n                  </p>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    7. Dispute Resolution\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    In case of disputes between clients and service providers, we provide mediation services to help resolve issues. For disputes involving the platform itself, we encourage users to contact our support team first. Unresolved disputes may be subject to arbitration.\n                  </p>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    8. Changes to Terms\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    We reserve the right to modify these terms at any time. Changes will be posted on this page with an updated effective date. Continued use of the service after changes constitutes acceptance of the new terms.\n                  </p>\n                </section>\n\n                <Separator />\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                    9. Contact Information\n                  </h2>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    For questions about these Terms of Service, please contact us at:\n                  </p>\n                  <div className=\"mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <p className=\"text-gray-700 dark:text-gray-300\">\n                      Email: legal@taskego.com<br />\n                      Phone: +1 (555) 123-4567<br />\n                      Address: 123 Business Street, Tech City, TC 12345\n                    </p>\n                  </div>\n                </section>\n\n                <div className=\"text-center pt-8\">\n                  <p className=\"text-sm text-gray-500\">\n                    Last updated: January 2025\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":9259},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"frontend/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"frontend/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"frontend/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":256},"frontend/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"frontend/src/lib/i18n.ts":{"content":"export interface Messages {\n  [key: string]: string | Messages;\n}\n\nexport type Language = 'en' | 'ar';\n\nexport const defaultLanguage: Language = 'en';\n\nexport const languages: Record<Language, string> = {\n  en: 'English',\n  ar: 'العربية',\n};\n\nexport const isRTL = (lang: Language): boolean => {\n  return lang === 'ar';\n};\n\nexport const getDirection = (lang: Language): 'ltr' | 'rtl' => {\n  return isRTL(lang) ? 'rtl' : 'ltr';\n};\n\nexport const loadMessages = async (lang: Language): Promise<Messages> => {\n  try {\n    const messages = await import(`../messages/${lang}.json`);\n    return messages.default;\n  } catch (error) {\n    console.error(`Failed to load messages for language: ${lang}`, error);\n    // Fallback to English\n    if (lang !== 'en') {\n      return loadMessages('en');\n    }\n    return {};\n  }\n};\n\nexport const t = (key: string, messages: Messages, fallback?: string): string => {\n  const keys = key.split('.');\n  let current: any = messages;\n  \n  for (const k of keys) {\n    if (current && typeof current === 'object' && k in current) {\n      current = current[k];\n    } else {\n      return fallback || key;\n    }\n  }\n  \n  return typeof current === 'string' ? current : fallback || key;\n};\n","size_bytes":1214},"frontend/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"frontend/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"frontend/src/pages/About.tsx":{"content":"import { CheckCircle, Users, Award, Globe, Heart, Shield } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\ninterface AboutProps {\n  messages: any;\n}\n\nexport default function About({ messages }: AboutProps) {\n  const values = [\n    {\n      icon: <CheckCircle className=\"h-8 w-8\" />,\n      title: messages.about_page?.values?.quality || 'Quality',\n      description: 'We ensure the highest standards of service quality through rigorous vetting and continuous monitoring.',\n      color: 'bg-green-100 text-green-600'\n    },\n    {\n      icon: <Shield className=\"h-8 w-8\" />,\n      title: messages.about_page?.values?.trust || 'Trust',\n      description: 'Building lasting relationships through transparency, reliability, and consistent service delivery.',\n      color: 'bg-blue-100 text-blue-600'\n    },\n    {\n      icon: <Globe className=\"h-8 w-8\" />,\n      title: messages.about_page?.values?.innovation || 'Innovation',\n      description: 'Leveraging cutting-edge technology to create seamless experiences for our users.',\n      color: 'bg-purple-100 text-purple-600'\n    },\n    {\n      icon: <Heart className=\"h-8 w-8\" />,\n      title: messages.about_page?.values?.customer || 'Customer Focus',\n      description: 'Putting our customers first in everything we do, from platform design to service delivery.',\n      color: 'bg-red-100 text-red-600'\n    }\n  ];\n\n  const milestones = [\n    {\n      year: '2020',\n      title: 'Company Founded',\n      description: 'Taskego was founded with a vision to revolutionize the local services industry.'\n    },\n    {\n      year: '2021',\n      title: 'First 100 Providers',\n      description: 'Reached our first milestone of 100 verified service providers on the platform.'\n    },\n    {\n      year: '2022',\n      title: 'Multi-Language Support',\n      description: 'Launched Arabic language support to serve our diverse community better.'\n    },\n    {\n      year: '2023',\n      title: 'AI Integration',\n      description: 'Introduced AI-powered matching to connect customers with the best service providers.'\n    },\n    {\n      year: '2024',\n      title: 'Regional Expansion',\n      description: 'Expanded to 25+ cities across the region with 1000+ active providers.'\n    }\n  ];\n\n  const team = [\n    {\n      name: 'Sarah Johnson',\n      role: 'CEO & Founder',\n      image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=300&h=300&fit=crop&crop=face',\n      bio: 'Former McKinsey consultant with 10+ years in technology and operations.'\n    },\n    {\n      name: 'Ahmed Hassan',\n      role: 'CTO',\n      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop&crop=face',\n      bio: 'Tech leader with experience at Google and Microsoft, passionate about AI and user experience.'\n    },\n    {\n      name: 'Maria Rodriguez',\n      role: 'Head of Operations',\n      image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=300&h=300&fit=crop&crop=face',\n      bio: 'Operations expert with a background in scaling marketplace businesses across emerging markets.'\n    },\n    {\n      name: 'David Chen',\n      role: 'Head of Product',\n      image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=300&h=300&fit=crop&crop=face',\n      bio: 'Product strategist with experience building consumer-facing platforms at scale.'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-white\">\n      {/* Hero Section */}\n      <section className=\"py-16 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <ScrollReveal>\n              <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n                {messages.about_page?.title || 'About Taskego'}\n              </h1>\n              <p className=\"text-xl md:text-2xl max-w-3xl mx-auto\">\n                {messages.about_page?.description || 'Learn more about our mission to connect people with trusted service providers.'}\n              </p>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Mission & Vision */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <ScrollReveal>\n              <Card className=\"bg-white shadow-xl border-0 h-full\">\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"w-16 h-16 bg-khadamati-blue rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Award className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h2 className=\"text-3xl font-bold text-khadamati-dark\">\n                      {messages.about_page?.mission?.title || 'Our Mission'}\n                    </h2>\n                  </div>\n                  <p className=\"text-lg text-khadamati-gray text-center leading-relaxed\">\n                    {messages.about_page?.mission?.description || 'To make professional services accessible, reliable, and convenient for everyone.'}\n                  </p>\n                </CardContent>\n              </Card>\n            </ScrollReveal>\n\n            <ScrollReveal delay={200}>\n              <Card className=\"bg-white shadow-xl border-0 h-full\">\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"w-16 h-16 bg-khadamati-yellow rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Globe className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <h2 className=\"text-3xl font-bold text-khadamati-dark\">\n                      {messages.about_page?.vision?.title || 'Our Vision'}\n                    </h2>\n                  </div>\n                  <p className=\"text-lg text-khadamati-gray text-center leading-relaxed\">\n                    {messages.about_page?.vision?.description || 'To become the leading platform for local service providers and customers.'}\n                  </p>\n                </CardContent>\n              </Card>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <ScrollReveal className=\"text-center\">\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={1200} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">Active Providers</div>\n            </ScrollReveal>\n            \n            <ScrollReveal className=\"text-center\" delay={100}>\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={25000} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">Happy Customers</div>\n            </ScrollReveal>\n            \n            <ScrollReveal className=\"text-center\" delay={200}>\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={50000} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">Services Completed</div>\n            </ScrollReveal>\n            \n            <ScrollReveal className=\"text-center\" delay={300}>\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={25} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">Cities Served</div>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Values */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                {messages.about_page?.values?.title || 'Our Values'}\n              </h2>\n              <p className=\"text-xl text-khadamati-gray max-w-2xl mx-auto\">\n                The principles that guide everything we do\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {values.map((value, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0 h-full\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`w-16 h-16 rounded-full flex items-center justify-center ${value.color}`}>\n                        {value.icon}\n                      </div>\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-khadamati-dark mb-3\">\n                          {value.title}\n                        </h3>\n                        <p className=\"text-khadamati-gray leading-relaxed\">\n                          {value.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Timeline */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                Our Journey\n              </h2>\n              <p className=\"text-xl text-khadamati-gray\">\n                Key milestones in our growth story\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-khadamati-blue\"></div>\n            \n            {milestones.map((milestone, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <div className={`flex items-center mb-12 ${index % 2 === 0 ? 'flex-row' : 'flex-row-reverse'}`}>\n                  <div className={`w-1/2 ${index % 2 === 0 ? 'pr-8 text-right' : 'pl-8 text-left'}`}>\n                    <Card className=\"bg-white shadow-lg border-0\">\n                      <CardContent className=\"p-6\">\n                        <Badge className=\"mb-2 bg-khadamati-yellow text-khadamati-dark\">\n                          {milestone.year}\n                        </Badge>\n                        <h3 className=\"text-xl font-semibold text-khadamati-dark mb-2\">\n                          {milestone.title}\n                        </h3>\n                        <p className=\"text-khadamati-gray\">\n                          {milestone.description}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                  <div className=\"w-4 h-4 bg-khadamati-blue rounded-full relative z-10 border-4 border-white shadow-lg\"></div>\n                  <div className=\"w-1/2\"></div>\n                </div>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Team */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                Meet Our Team\n              </h2>\n              <p className=\"text-xl text-khadamati-gray max-w-2xl mx-auto\">\n                The passionate people behind Taskego\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {team.map((member, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0 text-center\">\n                  <CardContent className=\"p-8\">\n                    <img\n                      src={member.image}\n                      alt={member.name}\n                      className=\"w-24 h-24 rounded-full mx-auto mb-4 object-cover\"\n                    />\n                    <h3 className=\"text-xl font-semibold text-khadamati-dark mb-2\">\n                      {member.name}\n                    </h3>\n                    <p className=\"text-khadamati-blue font-medium mb-4\">\n                      {member.role}\n                    </p>\n                    <p className=\"text-khadamati-gray text-sm leading-relaxed\">\n                      {member.bio}\n                    </p>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":13315},"frontend/src/pages/AdminPanel.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Users, Briefcase, TrendingUp, DollarSign, Search, Eye, Ban, Check, X } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\ninterface AdminPanelProps {\n  messages: any;\n}\n\nexport default function AdminPanel({ messages }: AdminPanelProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Mock data - in real app, this would come from API\n  const mockStats = {\n    totalUsers: 2547,\n    activeProviders: 1247,\n    monthlyBookings: 15842,\n    monthlyRevenue: 124578,\n  };\n\n  const mockPendingApprovals = [\n    {\n      id: 1,\n      name: 'David Wilson',\n      type: 'provider',\n      service: 'Electrical Services',\n      date: '2024-01-20',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 2,\n      name: 'Lisa Anderson',\n      type: 'service',\n      service: 'Pet Grooming',\n      date: '2024-01-18',\n      avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 3,\n      name: 'Robert Johnson',\n      type: 'provider',\n      service: 'Landscaping',\n      date: '2024-01-15',\n      avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face'\n    },\n  ];\n\n  const mockUsers = [\n    {\n      id: 1,\n      name: 'John Doe',\n      email: 'john.doe@email.com',\n      type: 'client',\n      joinDate: '2023-11-15',\n      status: 'active',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 2,\n      name: 'Sarah Johnson',\n      email: 'sarah.j@email.com',\n      type: 'provider',\n      joinDate: '2023-10-22',\n      status: 'active',\n      avatar: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 3,\n      name: 'Michael Brown',\n      email: 'michael.b@email.com',\n      type: 'client',\n      joinDate: '2023-12-01',\n      status: 'inactive',\n      avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face'\n    },\n  ];\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    queryFn: () => Promise.resolve(mockStats),\n  });\n\n  const { data: pendingApprovals } = useQuery({\n    queryKey: ['/api/admin/pending-approvals'],\n    queryFn: () => Promise.resolve(mockPendingApprovals),\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/admin/users', searchTerm],\n    queryFn: () => Promise.resolve(mockUsers.filter(user => \n      user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n    )),\n  });\n\n  const handleApprove = (id: number) => {\n    console.log('Approving item:', id);\n    // In real app, this would make an API call\n  };\n\n  const handleReject = (id: number) => {\n    console.log('Rejecting item:', id);\n    // In real app, this would make an API call\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'provider':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'client':\n        return 'bg-blue-100 text-blue-800';\n      case 'service':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'inactive':\n        return 'bg-gray-100 text-gray-800';\n      case 'suspended':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-khadamati-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-12\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n              {messages.admin_panel?.title || 'Admin Panel'}\n            </h1>\n            <p className=\"text-xl text-khadamati-gray\">\n              {messages.admin_panel?.description || 'Platform management and analytics.'}\n            </p>\n          </ScrollReveal>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <ScrollReveal>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.total_users || 'Total Users'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.totalUsers || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-blue rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={100}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.active_providers || 'Active Providers'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.activeProviders || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-success rounded-lg flex items-center justify-center\">\n                    <Briefcase className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={200}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.monthly_bookings || 'Monthly Bookings'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.monthlyBookings || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-yellow rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={300}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.admin_panel?.stats?.revenue || 'Monthly Revenue'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      $<AnimatedCounter end={stats?.monthlyRevenue || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-info rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n        </div>\n\n        {/* Pending Approvals */}\n        <ScrollReveal delay={400}>\n          <Card className=\"bg-white shadow-lg border-0 mb-12\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.admin_panel?.pending_approvals || 'Pending Approvals'}\n                </CardTitle>\n                <Badge className=\"bg-khadamati-error text-white\">\n                  {pendingApprovals?.length || 0} pending\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {pendingApprovals?.map((approval) => (\n                  <div key={approval.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarImage src={approval.avatar} alt={approval.name} />\n                        <AvatarFallback>\n                          {approval.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold text-khadamati-dark\">\n                          {approval.name}\n                        </h3>\n                        <p className=\"text-khadamati-gray text-sm\">\n                          {approval.type === 'provider' ? 'New Provider' : 'New Service'} - {approval.service}\n                        </p>\n                        <p className=\"text-khadamati-gray text-xs\">\n                          {approval.date}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleApprove(approval.id)}\n                        className=\"bg-khadamati-success hover:bg-green-700 text-white\"\n                      >\n                        <Check className=\"h-4 w-4 mr-1\" />\n                        {messages.admin_panel?.approve || 'Approve'}\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => handleReject(approval.id)}\n                      >\n                        <X className=\"h-4 w-4 mr-1\" />\n                        {messages.admin_panel?.reject || 'Reject'}\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n\n        {/* User Management */}\n        <ScrollReveal delay={500}>\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.admin_panel?.user_management || 'User Management'}\n                </CardTitle>\n                <div className=\"flex space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-khadamati-gray\" />\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>{messages.admin_panel?.table?.user || 'User'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.type || 'Type'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.joined || 'Joined'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.status || 'Status'}</TableHead>\n                      <TableHead>{messages.admin_panel?.table?.actions || 'Actions'}</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users?.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarImage src={user.avatar} alt={user.name} />\n                              <AvatarFallback>\n                                {user.name.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"font-medium text-khadamati-dark\">\n                                {user.name}\n                              </div>\n                              <div className=\"text-sm text-khadamati-gray\">\n                                {user.email}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getTypeColor(user.type)}>\n                            {user.type}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{user.joinDate}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(user.status)}>\n                            {user.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"icon\">\n                              <Ban className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15284},"frontend/src/pages/Booking.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Calendar, Clock, MapPin, User, Phone, Mail } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { toast } from '@/hooks/use-toast';\nimport ScrollReveal from '@/components/common/ScrollReveal';\n\ninterface BookingProps {\n  messages: any;\n}\n\nconst bookingSchema = z.object({\n  serviceType: z.string().min(1, 'Please select a service type'),\n  date: z.string().min(1, 'Please select a date'),\n  time: z.string().min(1, 'Please select a time'),\n  location: z.string().min(1, 'Please enter your location'),\n  details: z.string().optional(),\n  phone: z.string().min(1, 'Please enter your phone number'),\n  email: z.string().email('Please enter a valid email address'),\n  name: z.string().min(1, 'Please enter your name'),\n});\n\ntype BookingForm = z.infer<typeof bookingSchema>;\n\nexport default function Booking({ messages }: BookingProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<BookingForm>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      serviceType: '',\n      date: '',\n      time: '',\n      location: '',\n      details: '',\n      phone: '',\n      email: '',\n      name: '',\n    },\n  });\n\n  const onSubmit = async (data: BookingForm) => {\n    setIsSubmitting(true);\n    try {\n      // In a real app, this would make an API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: 'Booking Confirmed!',\n        description: 'Your service has been booked successfully. You will receive a confirmation email shortly.',\n      });\n      \n      form.reset();\n    } catch (error) {\n      toast({\n        title: 'Booking Failed',\n        description: 'Something went wrong. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const serviceTypes = [\n    { value: 'cleaning', label: messages.services?.cleaning?.title || 'Cleaning' },\n    { value: 'plumbing', label: messages.services?.plumbing?.title || 'Plumbing' },\n    { value: 'electrical', label: messages.services?.electrical?.title || 'Electrical' },\n    { value: 'delivery', label: messages.services?.delivery?.title || 'Delivery' },\n    { value: 'maintenance', label: messages.services?.maintenance?.title || 'Maintenance' },\n    { value: 'painting', label: messages.services?.painting?.title || 'Painting' },\n    { value: 'gardening', label: messages.services?.gardening?.title || 'Gardening' },\n    { value: 'tutoring', label: messages.services?.tutoring?.title || 'Tutoring' },\n  ];\n\n  const timeSlots = [\n    { value: '09:00', label: '09:00 AM' },\n    { value: '10:00', label: '10:00 AM' },\n    { value: '11:00', label: '11:00 AM' },\n    { value: '12:00', label: '12:00 PM' },\n    { value: '13:00', label: '01:00 PM' },\n    { value: '14:00', label: '02:00 PM' },\n    { value: '15:00', label: '03:00 PM' },\n    { value: '16:00', label: '04:00 PM' },\n    { value: '17:00', label: '05:00 PM' },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-khadamati-light\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n              {messages.booking_page?.title || 'Book a Service'}\n            </h1>\n            <p className=\"text-xl text-khadamati-gray\">\n              {messages.booking_page?.description || 'Schedule your service in just a few clicks.'}\n            </p>\n          </ScrollReveal>\n        </div>\n\n        <ScrollReveal delay={200}>\n          <Card className=\"bg-white shadow-xl border-0\">\n            <CardHeader className=\"bg-gradient-to-r from-khadamati-blue to-khadamati-yellow text-white\">\n              <CardTitle className=\"text-2xl font-bold\">\n                Service Booking Form\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Personal Information */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4\" />\n                            Full Name\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your full name...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Mail className=\"h-4 w-4\" />\n                            {messages.booking_page?.email || 'Email Address'}\n                          </FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"Your email...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Phone className=\"h-4 w-4\" />\n                          {messages.booking_page?.phone || 'Phone Number'}\n                        </FormLabel>\n                        <FormControl>\n                          <Input type=\"tel\" placeholder=\"Your phone number...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Service Selection */}\n                  <FormField\n                    control={form.control}\n                    name=\"serviceType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {messages.booking_page?.service_type || 'Service Type'}\n                        </FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={messages.booking_page?.select_service || 'Select a service...'} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {serviceTypes.map((service) => (\n                              <SelectItem key={service.value} value={service.value}>\n                                {service.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Date & Time */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"date\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Calendar className=\"h-4 w-4\" />\n                            {messages.booking_page?.date || 'Date'}\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"date\" \n                              min={new Date().toISOString().split('T')[0]}\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"time\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Clock className=\"h-4 w-4\" />\n                            {messages.booking_page?.time || 'Time'}\n                          </FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder={messages.booking_page?.select_time || 'Select time...'} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {timeSlots.map((slot) => (\n                                <SelectItem key={slot.value} value={slot.value}>\n                                  {slot.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Location */}\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <MapPin className=\"h-4 w-4\" />\n                          {messages.booking_page?.location || 'Location'}\n                        </FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter your address...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Additional Details */}\n                  <FormField\n                    control={form.control}\n                    name=\"details\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {messages.booking_page?.details || 'Additional Details'}\n                        </FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe your service requirements...\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Submit Button */}\n                  <div className=\"pt-6\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      className=\"w-full py-4 bg-khadamati-blue hover:bg-blue-700 text-white font-semibold text-lg\"\n                    >\n                      {isSubmitting ? 'Processing...' : (messages.booking_page?.submit || 'Book Service')}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12698},"frontend/src/pages/Contact.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { MapPin, Phone, Mail, Clock, Send } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { toast } from '@/hooks/use-toast';\nimport ScrollReveal from '@/components/common/ScrollReveal';\n\ninterface ContactProps {\n  messages: any;\n}\n\nconst contactSchema = z.object({\n  name: z.string().min(1, 'Please enter your name'),\n  email: z.string().email('Please enter a valid email address'),\n  subject: z.string().min(1, 'Please enter a subject'),\n  message: z.string().min(10, 'Please enter a message with at least 10 characters'),\n});\n\ntype ContactForm = z.infer<typeof contactSchema>;\n\nexport default function Contact({ messages }: ContactProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n    },\n  });\n\n  const onSubmit = async (data: ContactForm) => {\n    setIsSubmitting(true);\n    try {\n      // In a real app, this would make an API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: 'Message Sent!',\n        description: 'Thank you for your message. We will get back to you soon.',\n      });\n      \n      form.reset();\n    } catch (error) {\n      toast({\n        title: 'Failed to Send',\n        description: 'Something went wrong. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const contactInfo = [\n    {\n      icon: <MapPin className=\"h-6 w-6\" />,\n      title: messages.contact_page?.address?.title || 'Address',\n      content: '123 Business Street, Tech City, TC 12345',\n      color: 'bg-blue-100 text-blue-600'\n    },\n    {\n      icon: <Phone className=\"h-6 w-6\" />,\n      title: messages.contact_page?.phone?.title || 'Phone',\n      content: '+1 (555) 123-4567',\n      color: 'bg-green-100 text-green-600'\n    },\n    {\n      icon: <Mail className=\"h-6 w-6\" />,\n      title: messages.contact_page?.email?.title || 'Email',\n      content: 'support@taskego.com',\n      color: 'bg-purple-100 text-purple-600'\n    },\n    {\n      icon: <Clock className=\"h-6 w-6\" />,\n      title: messages.contact_page?.hours?.title || 'Business Hours',\n      content: 'Mon - Fri: 9:00 AM - 6:00 PM\\nSat - Sun: 10:00 AM - 4:00 PM',\n      color: 'bg-orange-100 text-orange-600'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-white\">\n      {/* Hero Section */}\n      <section className=\"py-16 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <ScrollReveal>\n              <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n                {messages.contact_page?.title || 'Contact Us'}\n              </h1>\n              <p className=\"text-xl md:text-2xl max-w-3xl mx-auto\">\n                {messages.contact_page?.description || 'We\\'re here to help. Get in touch with us for any questions or support.'}\n              </p>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Information */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {contactInfo.map((info, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0 text-center h-full\">\n                  <CardContent className=\"p-8\">\n                    <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${info.color}`}>\n                      {info.icon}\n                    </div>\n                    <h3 className=\"text-xl font-semibold text-khadamati-dark mb-3\">\n                      {info.title}\n                    </h3>\n                    <p className=\"text-khadamati-gray whitespace-pre-line\">\n                      {info.content}\n                    </p>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form & Map */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <ScrollReveal>\n              <Card className=\"bg-khadamati-light border-0 shadow-xl\">\n                <CardContent className=\"p-8\">\n                  <h2 className=\"text-3xl font-bold text-khadamati-dark mb-6\">\n                    {messages.contact_page?.form?.title || 'Send us a message'}\n                  </h2>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>\n                                {messages.contact_page?.form?.name || 'Name'}\n                              </FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Your name...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>\n                                {messages.contact_page?.form?.email || 'Email'}\n                              </FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" placeholder=\"Your email...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              {messages.contact_page?.form?.subject || 'Subject'}\n                            </FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Message subject...\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              {messages.contact_page?.form?.message || 'Message'}\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Your message...\"\n                                className=\"min-h-[120px]\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className=\"w-full py-3 bg-khadamati-blue hover:bg-blue-700 text-white font-semibold\"\n                      >\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        {isSubmitting ? 'Sending...' : (messages.contact_page?.form?.submit || 'Send Message')}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </ScrollReveal>\n\n            {/* Map Placeholder */}\n            <ScrollReveal delay={200}>\n              <Card className=\"bg-white border-0 shadow-xl h-full\">\n                <CardContent className=\"p-0 h-full\">\n                  <div className=\"w-full h-full min-h-[500px] bg-gray-100 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <MapPin className=\"h-12 w-12 text-khadamati-blue mx-auto mb-4\" />\n                      <h3 className=\"text-xl font-semibold text-khadamati-dark mb-2\">\n                        Find Us Here\n                      </h3>\n                      <p className=\"text-khadamati-gray\">\n                        Interactive map would be displayed here\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                Frequently Asked Questions\n              </h2>\n              <p className=\"text-xl text-khadamati-gray\">\n                Quick answers to common questions\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"space-y-6\">\n            {[\n              {\n                question: 'How do I book a service?',\n                answer: 'You can book a service by browsing our services page, selecting your preferred provider, and filling out the booking form with your details and preferred time.'\n              },\n              {\n                question: 'Are all service providers verified?',\n                answer: 'Yes, all our service providers go through a comprehensive verification process including background checks, skill assessments, and reference verification.'\n              },\n              {\n                question: 'What payment methods do you accept?',\n                answer: 'We accept all major credit cards, debit cards, and digital payment methods. Payment is processed securely through our platform.'\n              },\n              {\n                question: 'Can I cancel or reschedule my booking?',\n                answer: 'Yes, you can cancel or reschedule your booking up to 24 hours before the scheduled time without any charges.'\n              }\n            ].map((faq, index) => (\n              <ScrollReveal key={index} delay={index * 100}>\n                <Card className=\"bg-white shadow-lg border-0\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold text-khadamati-dark mb-3\">\n                      {faq.question}\n                    </h3>\n                    <p className=\"text-khadamati-gray\">\n                      {faq.answer}\n                    </p>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":12196},"frontend/src/pages/Home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { ArrowRight, Star, Clock, Shield, Users, CheckCircle, Play } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\ninterface HomeProps {\n  messages: any;\n}\n\nexport default function Home({ messages }: HomeProps) {\n  const [currentTestimonial, setCurrentTestimonial] = useState(0);\n\n  const serviceCategories = [\n    {\n      id: 1,\n      name: messages.services?.cleaning?.title || 'Cleaning',\n      description: messages.services?.cleaning?.description || 'Professional house and office cleaning services',\n      icon: '🧹',\n      color: 'from-blue-500 to-purple-600',\n      price: 'Starting from $25',\n      href: '/services?category=cleaning'\n    },\n    {\n      id: 2,\n      name: messages.services?.plumbing?.title || 'Plumbing',\n      description: messages.services?.plumbing?.description || 'Expert plumbing repairs and installations',\n      icon: '🔧',\n      color: 'from-green-500 to-teal-600',\n      price: 'Starting from $40',\n      href: '/services?category=plumbing'\n    },\n    {\n      id: 3,\n      name: messages.services?.electrical?.title || 'Electrical',\n      description: messages.services?.electrical?.description || 'Licensed electrical services and repairs',\n      icon: '⚡',\n      color: 'from-yellow-500 to-orange-600',\n      price: 'Starting from $50',\n      href: '/services?category=electrical'\n    },\n    {\n      id: 4,\n      name: messages.services?.delivery?.title || 'Delivery',\n      description: messages.services?.delivery?.description || 'Fast and reliable delivery services',\n      icon: '🚚',\n      color: 'from-red-500 to-pink-600',\n      price: 'Starting from $15',\n      href: '/services?category=delivery'\n    },\n    {\n      id: 5,\n      name: messages.services?.maintenance?.title || 'Maintenance',\n      description: messages.services?.maintenance?.description || 'General maintenance and handyman services',\n      icon: '🔨',\n      color: 'from-indigo-500 to-purple-600',\n      price: 'Starting from $30',\n      href: '/services?category=maintenance'\n    },\n    {\n      id: 6,\n      name: messages.services?.painting?.title || 'Painting',\n      description: messages.services?.painting?.description || 'Professional interior and exterior painting',\n      icon: '🎨',\n      color: 'from-emerald-500 to-green-600',\n      price: 'Starting from $35',\n      href: '/services?category=painting'\n    },\n    {\n      id: 7,\n      name: messages.services?.gardening?.title || 'Gardening',\n      description: messages.services?.gardening?.description || 'Garden maintenance and landscaping services',\n      icon: '🌱',\n      color: 'from-lime-500 to-green-600',\n      price: 'Starting from $28',\n      href: '/services?category=gardening'\n    },\n    {\n      id: 8,\n      name: messages.services?.tutoring?.title || 'Tutoring',\n      description: messages.services?.tutoring?.description || 'Expert tutoring and educational support',\n      icon: '🎓',\n      color: 'from-cyan-500 to-blue-600',\n      price: 'Starting from $20',\n      href: '/services?category=tutoring'\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: 'Sarah Johnson',\n      role: 'Homeowner',\n      content: 'Taskego made finding a reliable cleaner so easy. The quality of service exceeded my expectations!',\n      rating: 5,\n      image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      name: 'Ahmed Hassan',\n      role: 'Business Owner',\n      content: 'As a service provider, Taskego has helped me grow my business and connect with amazing clients.',\n      rating: 5,\n      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      name: 'Maria Rodriguez',\n      role: 'Property Manager',\n      content: 'The platform is incredibly user-friendly and the providers are thoroughly vetted. Highly recommended!',\n      rating: 5,\n      image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'\n    }\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"hero-gradient text-white py-20 lg:py-32 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-transparent to-black bg-opacity-20\"></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <ScrollReveal>\n              <h1 className=\"text-4xl md:text-6xl font-bold mb-6 leading-tight\">\n                <span>{messages.hero?.title || 'Professional Services'}</span>\n                <br />\n                <span className=\"text-khadamati-yellow\">\n                  {messages.hero?.subtitle || 'At Your Fingertips'}\n                </span>\n              </h1>\n            </ScrollReveal>\n            \n            <ScrollReveal delay={200}>\n              <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto leading-relaxed\">\n                {messages.hero?.description || 'Connect with trusted local service providers for all your home and business needs. From cleaning to repairs, we\\'ve got you covered.'}\n              </p>\n            </ScrollReveal>\n            \n            <ScrollReveal delay={400}>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Link href=\"/services\">\n                  <Button size=\"lg\" className=\"px-8 py-4 bg-khadamati-yellow text-khadamati-dark font-semibold hover:bg-yellow-500 transition-all duration-300 transform hover:scale-105\">\n                    {messages.hero?.cta?.book || 'Book a Service'}\n                    <ArrowRight className=\"ml-2 h-5 w-5\" />\n                  </Button>\n                </Link>\n                <Button \n                  size=\"lg\" \n                  className=\"px-8 py-4 bg-white text-khadamati-blue border-2 border-white hover:bg-gray-100 hover:text-khadamati-dark font-semibold transition-all duration-300\"\n                  onClick={() => window.location.href = '/api/login'}\n                >\n                  {messages.hero?.cta?.provider || 'Become a Provider'}\n                </Button>\n              </div>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <ScrollReveal className=\"text-center\">\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={1200} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">{messages.stats?.providers || 'Service Providers'}</div>\n            </ScrollReveal>\n            \n            <ScrollReveal className=\"text-center\" delay={100}>\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={15000} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">{messages.stats?.bookings || 'Completed Bookings'}</div>\n            </ScrollReveal>\n            \n            <ScrollReveal className=\"text-center\" delay={200}>\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={4.9} suffix=\"\" />\n              </div>\n              <div className=\"text-khadamati-gray\">{messages.stats?.rating || 'Average Rating'}</div>\n            </ScrollReveal>\n            \n            <ScrollReveal className=\"text-center\" delay={300}>\n              <div className=\"text-4xl font-bold text-khadamati-blue mb-2\">\n                <AnimatedCounter end={25} suffix=\"+\" />\n              </div>\n              <div className=\"text-khadamati-gray\">{messages.stats?.cities || 'Cities Covered'}</div>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Categories */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                {messages.services?.title || 'Our Services'}\n              </h2>\n              <p className=\"text-xl text-khadamati-gray max-w-2xl mx-auto\">\n                {messages.services?.description || 'Explore our wide range of professional services designed to make your life easier.'}\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {serviceCategories.map((category, index) => (\n              <ScrollReveal key={category.id} delay={index * 100}>\n                <Link href={category.href}>\n                  <Card className=\"card-hover bg-white rounded-2xl shadow-lg border-0 h-full cursor-pointer\">\n                    <CardContent className=\"p-8 text-center\">\n                      <div className={`w-16 h-16 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mx-auto mb-6`}>\n                        <span className=\"text-2xl\">{category.icon}</span>\n                      </div>\n                      <h3 className=\"text-xl font-semibold text-khadamati-dark mb-3\">\n                        {category.name}\n                      </h3>\n                      <p className=\"text-khadamati-gray mb-4 text-sm\">\n                        {category.description}\n                      </p>\n                      <div className=\"text-khadamati-blue font-semibold text-sm\">\n                        {category.price}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              </ScrollReveal>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <ScrollReveal>\n              <Link href=\"/services\">\n                <Button size=\"lg\" className=\"px-8 py-4 bg-khadamati-blue text-white hover:bg-blue-700 transition-all duration-300 transform hover:scale-105\">\n                  {messages.services?.view_all || 'View All Services'}\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                {messages.how_it_works?.title || 'How It Works'}\n              </h2>\n              <p className=\"text-xl text-khadamati-gray max-w-2xl mx-auto\">\n                {messages.how_it_works?.description || 'Get your service in just a few simple steps.'}\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12\">\n            <ScrollReveal className=\"text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-white text-2xl font-bold\">1</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-khadamati-dark mb-3\">\n                {messages.how_it_works?.step1?.title || 'Choose Service'}\n              </h3>\n              <p className=\"text-khadamati-gray\">\n                {messages.how_it_works?.step1?.description || 'Browse our categories and select the service you need'}\n              </p>\n            </ScrollReveal>\n\n            <ScrollReveal className=\"text-center\" delay={200}>\n              <div className=\"w-20 h-20 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-white text-2xl font-bold\">2</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-khadamati-dark mb-3\">\n                {messages.how_it_works?.step2?.title || 'Book & Pay'}\n              </h3>\n              <p className=\"text-khadamati-gray\">\n                {messages.how_it_works?.step2?.description || 'Select your preferred time and complete the booking'}\n              </p>\n            </ScrollReveal>\n\n            <ScrollReveal className=\"text-center\" delay={400}>\n              <div className=\"w-20 h-20 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-white text-2xl font-bold\">3</span>\n              </div>\n              <h3 className=\"text-xl font-semibold text-khadamati-dark mb-3\">\n                {messages.how_it_works?.step3?.title || 'Get Service'}\n              </h3>\n              <p className=\"text-khadamati-gray\">\n                {messages.how_it_works?.step3?.description || 'Professional service provider arrives at your location'}\n              </p>\n            </ScrollReveal>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 bg-khadamati-light\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <ScrollReveal>\n              <h2 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n                What Our Customers Say\n              </h2>\n              <p className=\"text-xl text-khadamati-gray\">\n                Real feedback from our satisfied customers\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <ScrollReveal>\n            <Card className=\"bg-white shadow-xl border-0\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"flex justify-center mb-6\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"h-6 w-6 text-khadamati-yellow fill-current\" />\n                  ))}\n                </div>\n                <blockquote className=\"text-xl text-khadamati-dark mb-8 italic\">\n                  \"{testimonials[currentTestimonial].content}\"\n                </blockquote>\n                <div className=\"flex items-center justify-center space-x-4\">\n                  <img\n                    src={testimonials[currentTestimonial].image}\n                    alt={testimonials[currentTestimonial].name}\n                    className=\"w-16 h-16 rounded-full object-cover\"\n                  />\n                  <div>\n                    <div className=\"font-semibold text-khadamati-dark\">\n                      {testimonials[currentTestimonial].name}\n                    </div>\n                    <div className=\"text-khadamati-gray text-sm\">\n                      {testimonials[currentTestimonial].role}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <div className=\"flex justify-center mt-8 space-x-2\">\n            {testimonials.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentTestimonial(index)}\n                className={`w-3 h-3 rounded-full transition-colors ${\n                  index === currentTestimonial ? 'bg-khadamati-blue' : 'bg-gray-300'\n                }`}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <ScrollReveal>\n            <h2 className=\"text-4xl font-bold mb-4\">\n              {messages.cta?.title || 'Ready to Get Started?'}\n            </h2>\n            <p className=\"text-xl mb-8 max-w-2xl mx-auto\">\n              {messages.cta?.description || 'Join thousands of satisfied customers who trust Taskego for their service needs.'}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/signup\">\n                <Button size=\"lg\" className=\"px-8 py-4 bg-white text-khadamati-blue hover:bg-gray-100 transition-all duration-300 transform hover:scale-105\">\n                  {messages.cta?.download_app || 'Get Started Now'}\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/about\">\n                <Button size=\"lg\" variant=\"outline\" className=\"px-8 py-4 border-2 border-white text-white hover:bg-white hover:text-khadamati-blue transition-all duration-300\">\n                  {messages.cta?.learn_more || 'Learn More'}\n                </Button>\n              </Link>\n            </div>\n          </ScrollReveal>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":17583},"frontend/src/pages/Landing.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Messages } from '@/lib/i18n';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Users, Shield, Zap } from 'lucide-react';\n\ninterface LandingProps {\n  messages: Messages;\n}\n\nexport default function Landing({ messages }: LandingProps) {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-20\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center max-w-4xl mx-auto\"\n        >\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"p-4 bg-blue-600 rounded-full\">\n              <Sparkles className=\"w-12 h-12 text-white\" />\n            </div>\n          </div>\n          \n          <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n            {messages.welcome || 'Welcome to Taskego'}\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto\">\n            {messages.heroSubtitle || 'Your trusted local service marketplace connecting clients with skilled providers'}\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              {messages.getStarted || 'Get Started'}\n            </Button>\n            \n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"px-8 py-4 text-lg\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              {messages.becomeProvider || 'Become a Provider'}\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\"\n          >\n            <Users className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {messages.trustedProviders || 'Trusted Providers'}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              {messages.trustedProvidersDesc || 'Connect with verified local service providers'}\n            </p>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\"\n          >\n            <Shield className=\"w-12 h-12 text-yellow-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {messages.secureBooking || 'Secure Booking'}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              {messages.secureBookingDesc || 'Safe and secure booking system with payment protection'}\n            </p>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n            className=\"text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\"\n          >\n            <Zap className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {messages.quickService || 'Quick Service'}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              {messages.quickServiceDesc || 'Fast and reliable service delivery when you need it'}\n            </p>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4271},"frontend/src/pages/Login.tsx":{"content":"\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Sparkles, ArrowRight, Shield, Users } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Messages } from '@/lib/i18n';\n\ninterface LoginProps {\n  messages: Messages;\n}\n\nexport default function Login({ messages }: LoginProps) {\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-600 to-yellow-600 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                {messages.login?.title || 'Welcome Back'}\n              </CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                {messages.login?.subtitle || 'Sign in to access your Taskego account'}\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <Button\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 text-lg font-medium\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                {messages.login?.button || 'Continue with Replit'}\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n              \n              <div className=\"text-center text-sm text-gray-500\">\n                {messages.login?.secure || 'Secure authentication powered by Replit'}\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"text-center\">\n                  <Shield className=\"w-6 h-6 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.login?.secure_auth || 'Secure Auth'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <Users className=\"w-6 h-6 mx-auto mb-2 text-yellow-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.login?.trusted || 'Trusted Platform'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":2859},"frontend/src/pages/ProviderDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Calendar, DollarSign, Star, Briefcase, TrendingUp, Eye, Edit, Trash2, Plus } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport AnimatedCounter from '@/components/common/AnimatedCounter';\n\ninterface ProviderDashboardProps {\n  messages: any;\n}\n\nexport default function ProviderDashboard({ messages }: ProviderDashboardProps) {\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n\n  // Mock data - in real app, this would come from API\n  const mockStats = {\n    totalBookings: 247,\n    totalEarnings: 8547,\n    averageRating: 4.8,\n    activeServices: 3,\n  };\n\n  const mockBookings = [\n    {\n      id: 1,\n      clientName: 'John Smith',\n      service: 'House Cleaning',\n      date: '2024-01-20',\n      status: 'completed',\n      amount: 75,\n      clientAvatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 2,\n      clientName: 'Emily Johnson',\n      service: 'Deep Cleaning',\n      date: '2024-01-18',\n      status: 'in_progress',\n      amount: 120,\n      clientAvatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'\n    },\n    {\n      id: 3,\n      clientName: 'Michael Brown',\n      service: 'Office Cleaning',\n      date: '2024-01-15',\n      status: 'pending',\n      amount: 90,\n      clientAvatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=100&h=100&fit=crop&crop=face'\n    },\n  ];\n\n  const mockServices = [\n    {\n      id: 1,\n      title: 'Premium House Cleaning',\n      description: 'Deep cleaning service for residential homes',\n      price: 35,\n      priceType: 'hourly',\n      status: 'active',\n      bookings: 24,\n      rating: 4.9,\n    },\n    {\n      id: 2,\n      title: 'Office Cleaning',\n      description: 'Commercial cleaning for offices and businesses',\n      price: 45,\n      priceType: 'hourly',\n      status: 'active',\n      bookings: 18,\n      rating: 4.8,\n    },\n    {\n      id: 3,\n      title: 'Move-in/Move-out Cleaning',\n      description: 'Comprehensive cleaning for relocations',\n      price: 120,\n      priceType: 'fixed',\n      status: 'inactive',\n      bookings: 12,\n      rating: 4.7,\n    },\n  ];\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/provider/stats'],\n    queryFn: () => Promise.resolve(mockStats),\n  });\n\n  const { data: recentBookings } = useQuery({\n    queryKey: ['/api/provider/bookings', selectedPeriod],\n    queryFn: () => Promise.resolve(mockBookings),\n  });\n\n  const { data: services } = useQuery({\n    queryKey: ['/api/provider/services'],\n    queryFn: () => Promise.resolve(mockServices),\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'Completed';\n      case 'in_progress':\n        return 'In Progress';\n      case 'pending':\n        return 'Pending';\n      case 'cancelled':\n        return 'Cancelled';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12 bg-khadamati-light\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-12\">\n          <ScrollReveal>\n            <h1 className=\"text-4xl font-bold text-khadamati-dark mb-4\">\n              {messages.provider_dashboard?.title || 'Provider Dashboard'}\n            </h1>\n            <p className=\"text-xl text-khadamati-gray\">\n              {messages.provider_dashboard?.description || 'Manage your services and bookings.'}\n            </p>\n          </ScrollReveal>\n        </div>\n\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <ScrollReveal>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.total_bookings || 'Total Bookings'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.totalBookings || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-blue rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={100}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.earnings || 'Total Earnings'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      $<AnimatedCounter end={stats?.totalEarnings || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-success rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={200}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.rating || 'Average Rating'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.averageRating || 0} suffix=\"\" />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-yellow rounded-lg flex items-center justify-center\">\n                    <Star className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n\n          <ScrollReveal delay={300}>\n            <Card className=\"bg-white shadow-lg border-0\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-khadamati-gray text-sm font-medium\">\n                      {messages.provider_dashboard?.stats?.active_services || 'Active Services'}\n                    </p>\n                    <p className=\"text-3xl font-bold text-khadamati-dark\">\n                      <AnimatedCounter end={stats?.activeServices || 0} />\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-khadamati-info rounded-lg flex items-center justify-center\">\n                    <Briefcase className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </ScrollReveal>\n        </div>\n\n        {/* Recent Bookings */}\n        <ScrollReveal delay={400}>\n          <Card className=\"bg-white shadow-lg border-0 mb-12\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.provider_dashboard?.recent_bookings || 'Recent Bookings'}\n                </CardTitle>\n                <Button variant=\"outline\" size=\"sm\">\n                  {messages.provider_dashboard?.view_all || 'View All'}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>{messages.provider_dashboard?.table?.client || 'Client'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.service || 'Service'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.date || 'Date'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.status || 'Status'}</TableHead>\n                      <TableHead>{messages.provider_dashboard?.table?.amount || 'Amount'}</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {recentBookings?.map((booking) => (\n                      <TableRow key={booking.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage src={booking.clientAvatar} alt={booking.clientName} />\n                              <AvatarFallback>\n                                {booking.clientName.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-medium\">{booking.clientName}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>{booking.service}</TableCell>\n                        <TableCell>{booking.date}</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(booking.status)}>\n                            {getStatusLabel(booking.status)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"font-semibold\">${booking.amount}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n\n        {/* Service Management */}\n        <ScrollReveal delay={500}>\n          <Card className=\"bg-white shadow-lg border-0\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-2xl font-bold text-khadamati-dark\">\n                  {messages.provider_dashboard?.services || 'My Services'}\n                </CardTitle>\n                <Button className=\"bg-khadamati-blue hover:bg-blue-700\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {messages.provider_dashboard?.add_service || 'Add Service'}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {services?.map((service) => (\n                  <Card key={service.id} className=\"border border-gray-200\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-semibold text-khadamati-dark mb-2\">\n                            {service.title}\n                          </h3>\n                          <p className=\"text-khadamati-gray text-sm mb-3\">\n                            {service.description}\n                          </p>\n                          <div className=\"flex items-center gap-4 text-sm text-khadamati-gray\">\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-4 w-4\" />\n                              {service.bookings} bookings\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Star className=\"h-4 w-4 text-khadamati-yellow\" />\n                              {service.rating}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-lg font-bold text-khadamati-blue\">\n                          ${service.price}/{service.priceType === 'hourly' ? 'hour' : 'job'}\n                        </span>\n                        <Badge className={service.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>\n                          {service.status}\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </ScrollReveal>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14330},"frontend/src/pages/Services.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport ScrollReveal from '@/components/common/ScrollReveal';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Star, MapPin, Clock, Search, Filter, ArrowRight, Users, Grid, List } from 'lucide-react';\n\ninterface ServicesProps {\n  messages: any;\n}\n\nexport default function Services({ messages }: ServicesProps) {\n  const [location] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [priceRange, setPriceRange] = useState('all');\n  const [sortBy, setSortBy] = useState('rating');\n  const [viewMode, setViewMode] = useState<'category' | 'list'>('category');\n\n  // Fetch service categories\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: ['/api/service-categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/service-categories');\n      return response.json();\n    },\n  });\n\n  // Fetch services with filters\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: ['/api/services', selectedCategory, searchTerm, priceRange, sortBy],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCategory !== 'all') params.append('category', selectedCategory);\n      if (searchTerm) params.append('search', searchTerm);\n      if (priceRange !== 'all') params.append('priceRange', priceRange);\n      if (sortBy) params.append('sortBy', sortBy);\n      \n      const response = await fetch(`/api/services?${params}`);\n      return response.json();\n    },\n  });\n\n  // Group services by category for hierarchical display\n  const servicesByCategory = services?.reduce((acc: any, service: any) => {\n    const category = categories?.find((cat: any) => cat.id === service.categoryId);\n    if (!category) return acc;\n    \n    if (!acc[category.name]) {\n      acc[category.name] = {\n        category,\n        services: []\n      };\n    }\n    acc[category.name].services.push(service);\n    return acc;\n  }, {}) || {};\n\n  const handleBookService = (serviceId: number) => {\n    console.log('Booking service', serviceId);\n    // Handle booking logic here\n  };\n\n  if (servicesLoading || categoriesLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"h-96\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-32 w-full mb-4\" />\n                  <Skeleton className=\"h-4 w-full mb-2\" />\n                  <Skeleton className=\"h-4 w-2/3\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <ScrollReveal>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              {messages.services?.title || 'Our Services'}\n            </h1>\n            <p className=\"text-gray-600 mb-6\">\n              {messages.services?.subtitle || 'Find professional services from trusted providers'}\n            </p>\n          </ScrollReveal>\n\n          {/* Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder={messages.services?.search || 'Search services...'}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full lg:w-48\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories?.map((category: any) => (\n                  <SelectItem key={category.id} value={category.name}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={priceRange} onValueChange={setPriceRange}>\n              <SelectTrigger className=\"w-full lg:w-48\">\n                <SelectValue placeholder=\"Price Range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Prices</SelectItem>\n                <SelectItem value=\"0-25\">$0 - $25</SelectItem>\n                <SelectItem value=\"25-50\">$25 - $50</SelectItem>\n                <SelectItem value=\"50-100\">$50 - $100</SelectItem>\n                <SelectItem value=\"100+\">$100+</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full lg:w-48\">\n                <SelectValue placeholder=\"Sort By\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"rating\">Rating</SelectItem>\n                <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === 'category' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('category')}\n              >\n                <Grid className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Services Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {viewMode === 'category' ? (\n          // Category View - Hierarchical Structure\n          <div className=\"space-y-12\">\n            {Object.entries(servicesByCategory).map(([categoryName, categoryData]: [string, any]) => (\n              <ScrollReveal key={categoryName}>\n                <div className=\"bg-white rounded-lg shadow-sm p-6\">\n                  {/* Category Header */}\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-3\">\n                      <div \n                        className=\"w-12 h-12 rounded-lg flex items-center justify-center text-2xl\"\n                        style={{ backgroundColor: categoryData.category.color + '20' }}\n                      >\n                        {categoryData.category.icon}\n                      </div>\n                      <div>\n                        <h2 className=\"text-2xl font-bold text-gray-900\">\n                          {categoryData.category.name}\n                        </h2>\n                        <p className=\"text-gray-600\">\n                          {categoryData.category.description}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                      <Users className=\"h-3 w-3\" />\n                      {categoryData.services.length} Providers\n                    </Badge>\n                  </div>\n\n                  {/* Services Grid */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {categoryData.services.map((service: any) => (\n                      <Card key={service.id} className=\"hover:shadow-md transition-shadow duration-200\">\n                        <div className=\"aspect-w-16 aspect-h-9 mb-4\">\n                          <img\n                            src={service.images?.[0] || 'https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=800&h=400&fit=crop'}\n                            alt={service.title}\n                            className=\"w-full h-48 object-cover rounded-t-lg\"\n                          />\n                        </div>\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex justify-between items-start\">\n                            <CardTitle className=\"text-lg\">{service.title}</CardTitle>\n                            <div className=\"flex items-center gap-1\">\n                              <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                              <span className=\"text-sm font-medium\">{service.rating}</span>\n                            </div>\n                          </div>\n                          <CardDescription className=\"text-sm\">\n                            {service.description}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                              <div className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-4 w-4\" />\n                                {service.location}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"h-4 w-4\" />\n                                {service.duration} min\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-lg font-bold text-khadamati-blue\">\n                              ${service.price}\n                              <span className=\"text-sm font-normal text-gray-600\">\n                                /{service.priceType}\n                              </span>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              className=\"bg-khadamati-yellow text-khadamati-dark hover:bg-yellow-500\"\n                              onClick={() => handleBookService(service.id)}\n                            >\n                              Book Now\n                              <ArrowRight className=\"ml-1 h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </ScrollReveal>\n            ))}\n          </div>\n        ) : (\n          // List View - Traditional Grid\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {services?.map((service: any) => (\n              <ScrollReveal key={service.id}>\n                <Card className=\"hover:shadow-md transition-shadow duration-200\">\n                  <div className=\"aspect-w-16 aspect-h-9 mb-4\">\n                    <img\n                      src={service.images?.[0] || 'https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=800&h=400&fit=crop'}\n                      alt={service.title}\n                      className=\"w-full h-48 object-cover rounded-t-lg\"\n                    />\n                  </div>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex justify-between items-start\">\n                      <CardTitle className=\"text-lg\">{service.title}</CardTitle>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                        <span className=\"text-sm font-medium\">{service.rating}</span>\n                      </div>\n                    </div>\n                    <CardDescription className=\"text-sm\">\n                      {service.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                        <div className=\"flex items-center gap-1\">\n                          <MapPin className=\"h-4 w-4\" />\n                          {service.location}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          {service.duration} min\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-lg font-bold text-khadamati-blue\">\n                        ${service.price}\n                        <span className=\"text-sm font-normal text-gray-600\">\n                          /{service.priceType}\n                        </span>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-khadamati-yellow text-khadamati-dark hover:bg-yellow-500\"\n                        onClick={() => handleBookService(service.id)}\n                      >\n                        Book Now\n                        <ArrowRight className=\"ml-1 h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </ScrollReveal>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14876},"frontend/src/pages/SignUp.tsx":{"content":"import { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Sparkles, ArrowRight, Shield, Users, CheckCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Messages } from '@/lib/i18n';\n\ninterface SignUpProps {\n  messages: Messages;\n}\n\nexport default function SignUp({ messages }: SignUpProps) {\n  useEffect(() => {\n    // Auto-redirect to Replit Auth\n    const timer = setTimeout(() => {\n      window.location.href = '/api/login';\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-600 to-yellow-600 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                {messages.signup?.title || 'Join Taskego'}\n              </CardTitle>\n              <CardDescription className=\"text-gray-600\">\n                {messages.signup?.subtitle || 'Create your account to get started'}\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <Button\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 text-lg font-medium\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                {messages.signup?.button || 'Sign Up with Replit'}\n                <ArrowRight className=\"ml-2 w-5 h-5\" />\n              </Button>\n              \n              <div className=\"text-center text-sm text-gray-500\">\n                {messages.signup?.secure || 'Secure registration powered by Replit'}\n              </div>\n              \n              <div className=\"space-y-3 pt-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {messages.signup?.benefit1 || 'Connect with trusted service providers'}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {messages.signup?.benefit2 || 'Secure payment processing'}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {messages.signup?.benefit3 || 'Real-time booking management'}\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\n                <div className=\"text-center\">\n                  <Shield className=\"w-6 h-6 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.signup?.secure_auth || 'Secure Auth'}\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <Users className=\"w-6 h-6 mx-auto mb-2 text-yellow-600\" />\n                  <p className=\"text-xs text-gray-600\">\n                    {messages.signup?.community || 'Join Community'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":4168},"frontend/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/common/AnimatedCounter.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { motion, useAnimation, useInView } from 'framer-motion';\n\ninterface AnimatedCounterProps {\n  end: number;\n  duration?: number;\n  suffix?: string;\n  prefix?: string;\n  className?: string;\n}\n\nexport default function AnimatedCounter({ \n  end, \n  duration = 2, \n  suffix = '', \n  prefix = '', \n  className = '' \n}: AnimatedCounterProps) {\n  const [count, setCount] = useState(0);\n  const controls = useAnimation();\n  const ref = React.useRef(null);\n  const isInView = useInView(ref, { once: true });\n\n  useEffect(() => {\n    if (isInView) {\n      let startTime: number;\n      let animationFrame: number;\n\n      const animate = (timestamp: number) => {\n        if (!startTime) startTime = timestamp;\n        const progress = (timestamp - startTime) / (duration * 1000);\n\n        if (progress < 1) {\n          setCount(Math.floor(end * progress));\n          animationFrame = requestAnimationFrame(animate);\n        } else {\n          setCount(end);\n        }\n      };\n\n      animationFrame = requestAnimationFrame(animate);\n\n      return () => {\n        if (animationFrame) {\n          cancelAnimationFrame(animationFrame);\n        }\n      };\n    }\n  }, [isInView, end, duration]);\n\n  return (\n    <motion.span\n      ref={ref}\n      initial={{ opacity: 0, scale: 0.5 }}\n      animate={isInView ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.5 }}\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\n      className={className}\n    >\n      {prefix}{count.toLocaleString()}{suffix}\n    </motion.span>\n  );\n}","size_bytes":1565},"client/src/components/common/EnhancedFloatingChat.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MessageCircle, X, Send, Minimize2, Maximize2, Bot, Sparkles } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport type { Messages } from '@/lib/i18n';\n\ninterface EnhancedFloatingChatProps {\n  messages: Messages;\n}\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'bot';\n  content: string;\n  timestamp: Date;\n  suggestions?: string[];\n}\n\nexport default function EnhancedFloatingChat({ messages }: EnhancedFloatingChatProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      type: 'bot',\n      content: 'Hello! I\\'m your AI assistant. I can help you find services, compare prices, and answer questions. What do you need help with today?',\n      timestamp: new Date(),\n      suggestions: ['Find cleaning services', 'Compare prices', 'Book emergency repair', 'Show available today']\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasNewMessage, setHasNewMessage] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatMessages]);\n\n  const simulateBotResponse = (userMessage: string) => {\n    setIsTyping(true);\n    \n    setTimeout(() => {\n      let botResponse = '';\n      let suggestions: string[] = [];\n\n      const message = userMessage.toLowerCase();\n      \n      if (message.includes('clean') || message.includes('maid')) {\n        botResponse = '🧹 I found several excellent cleaning services for you! Professional House Cleaning ($45/hour, 4.8★), Quick Clean Service ($35/hour, 4.6★), and Deep Clean Experts ($55/hour, 4.9★). All are available today with verified professionals.';\n        suggestions = ['Book Professional House Cleaning', 'Compare all cleaning options', 'Show reviews', 'Check availability'];\n      } else if (message.includes('plumb') || message.includes('repair')) {\n        botResponse = '🔧 For plumbing and repairs, I recommend: FastFix Plumbers (24/7 emergency, $80/hour), Ahmed\\'s Reliable Plumbing ($65/hour), and City Plumbing Solutions ($70/hour). All have 5-star ratings and immediate availability.';\n        suggestions = ['Emergency plumber now', 'Schedule plumbing visit', 'Compare repair prices', 'View plumber profiles'];\n      } else if (message.includes('price') || message.includes('cost') || message.includes('cheap')) {\n        botResponse = '💰 Here are budget-friendly options: Services under $30 (15 available), Services under $50 (47 available), and Premium services with best value. I can filter by your specific budget range!';\n        suggestions = ['Show under $30', 'Show under $50', 'Best value services', 'Compare by price'];\n      } else {\n        botResponse = '✨ I\\'m here to help you find the perfect service! I can assist with booking, price comparisons, provider recommendations, scheduling, and much more. What specific service are you looking for?';\n        suggestions = ['Browse all services', 'Find providers near me', 'Emergency services', 'Popular services'];\n      }\n\n      const newMessage: ChatMessage = {\n        id: Date.now().toString(),\n        type: 'bot',\n        content: botResponse,\n        timestamp: new Date(),\n        suggestions\n      };\n\n      setChatMessages(prev => [...prev, newMessage]);\n      setIsTyping(false);\n      \n      if (!isOpen) {\n        setHasNewMessage(true);\n      }\n    }, 1200 + Math.random() * 800);\n  };\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    simulateBotResponse(inputMessage);\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputMessage(suggestion);\n    setTimeout(() => handleSendMessage(), 100);\n  };\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n    if (!isOpen) {\n      setHasNewMessage(false);\n    }\n  };\n\n  // Button variants\n  const buttonVariants = {\n    initial: { scale: 1 },\n    hover: { scale: 1.05 },\n    tap: { scale: 0.95 },\n    pulse: {\n      scale: [1, 1.1, 1],\n      transition: {\n        duration: 2,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  // Chat container variants\n  const chatVariants = {\n    hidden: {\n      opacity: 0,\n      scale: 0.8,\n      y: 20,\n      transition: {\n        duration: 0.2\n      }\n    },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      y: 0,\n      transition: {\n        duration: 0.3,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  // Message variants\n  const messageVariants = {\n    hidden: { opacity: 0, y: 20, scale: 0.8 },\n    visible: { \n      opacity: 1, \n      y: 0, \n      scale: 1,\n      transition: { duration: 0.3, ease: \"easeOut\" }\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-24 right-6 z-50\">\n      {/* Chat Window */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            variants={chatVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            className=\"mb-4 w-80 md:w-96\"\n          >\n            <Card className=\"shadow-2xl border-0 overflow-hidden bg-white dark:bg-gray-900\">\n              {/* Header */}\n              <CardHeader className=\"bg-gradient-to-r from-khadamati-blue to-khadamati-yellow text-white p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"relative\">\n                      <Avatar className=\"w-8 h-8 border-2 border-white\">\n                        <AvatarFallback className=\"bg-white text-khadamati-blue\">\n                          <Bot className=\"w-4 h-4\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <motion.div\n                        animate={{ scale: [1, 1.2, 1] }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white\"\n                      />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">Taskego AI Assistant</h3>\n                      <p className=\"text-xs text-white/80\">Always here to help</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-white hover:bg-white/20 p-1 h-6 w-6\"\n                      onClick={() => setIsMinimized(!isMinimized)}\n                    >\n                      {isMinimized ? <Maximize2 className=\"w-3 h-3\" /> : <Minimize2 className=\"w-3 h-3\" />}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-white hover:bg-white/20 p-1 h-6 w-6\"\n                      onClick={toggleChat}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n\n              {/* Chat Body */}\n              <AnimatePresence>\n                {!isMinimized && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <CardContent className=\"p-0\">\n                      {/* Messages */}\n                      <ScrollArea className=\"h-80 p-4\">\n                        <div className=\"space-y-4\">\n                          <AnimatePresence>\n                            {chatMessages.map((message) => (\n                              <motion.div\n                                key={message.id}\n                                variants={messageVariants}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                              >\n                                {message.type === 'bot' && (\n                                  <Avatar className=\"w-6 h-6 flex-shrink-0\">\n                                    <AvatarFallback className=\"bg-khadamati-blue text-white text-xs\">\n                                      <Bot className=\"w-3 h-3\" />\n                                    </AvatarFallback>\n                                  </Avatar>\n                                )}\n                                \n                                <div className={`max-w-[75%] ${message.type === 'user' ? 'order-1' : ''}`}>\n                                  <div\n                                    className={`rounded-2xl px-4 py-2 ${\n                                      message.type === 'user'\n                                        ? 'bg-khadamati-blue text-white ml-auto'\n                                        : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'\n                                    }`}\n                                  >\n                                    <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                                  </div>\n                                  \n                                  {message.suggestions && (\n                                    <div className=\"mt-2 space-y-1\">\n                                      {message.suggestions.map((suggestion, index) => (\n                                        <motion.button\n                                          key={index}\n                                          whileHover={{ scale: 1.02 }}\n                                          whileTap={{ scale: 0.98 }}\n                                          onClick={() => handleSuggestionClick(suggestion)}\n                                          className=\"block w-full text-left text-xs text-khadamati-blue hover:text-khadamati-blue/80 hover:bg-blue-50 dark:hover:bg-blue-900/20 px-3 py-2 rounded-lg transition-all duration-200 border border-khadamati-blue/20 hover:border-khadamati-blue/40\"\n                                        >\n                                          {suggestion}\n                                        </motion.button>\n                                      ))}\n                                    </div>\n                                  )}\n                                  \n                                  <p className=\"text-xs text-gray-500 mt-1\">\n                                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                                  </p>\n                                </div>\n                              </motion.div>\n                            ))}\n                          </AnimatePresence>\n                          \n                          {isTyping && (\n                            <motion.div\n                              initial={{ opacity: 0, y: 20 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              className=\"flex gap-3\"\n                            >\n                              <Avatar className=\"w-6 h-6\">\n                                <AvatarFallback className=\"bg-khadamati-blue text-white text-xs\">\n                                  <Bot className=\"w-3 h-3\" />\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"bg-gray-100 dark:bg-gray-800 rounded-2xl px-4 py-2\">\n                                <div className=\"flex space-x-1\">\n                                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                                </div>\n                              </div>\n                            </motion.div>\n                          )}\n                          \n                          <div ref={messagesEndRef} />\n                        </div>\n                      </ScrollArea>\n\n                      {/* Input Area */}\n                      <div className=\"border-t p-4 bg-gray-50 dark:bg-gray-800/50\">\n                        <div className=\"flex gap-2\">\n                          <Input\n                            value={inputMessage}\n                            onChange={(e) => setInputMessage(e.target.value)}\n                            placeholder=\"Ask me anything...\"\n                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                            className=\"flex-1 border-gray-200 dark:border-gray-700\"\n                          />\n                          <Button \n                            onClick={handleSendMessage}\n                            disabled={!inputMessage.trim() || isTyping}\n                            className=\"bg-khadamati-blue hover:bg-khadamati-blue/90 px-3\"\n                          >\n                            <Send className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Chat Toggle Button */}\n      <motion.div\n        variants={buttonVariants}\n        initial=\"initial\"\n        whileHover=\"hover\"\n        whileTap=\"tap\"\n        animate={hasNewMessage ? \"pulse\" : \"initial\"}\n        className=\"relative\"\n      >\n        <Button\n          onClick={toggleChat}\n          className=\"w-14 h-14 rounded-full bg-gradient-to-r from-khadamati-blue to-khadamati-yellow text-white shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden\"\n        >\n          <AnimatePresence mode=\"wait\">\n            {isOpen ? (\n              <motion.div\n                key=\"close\"\n                initial={{ rotate: 90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: -90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <X className=\"w-6 h-6\" />\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"open\"\n                initial={{ rotate: -90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: 90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"relative\"\n              >\n                <MessageCircle className=\"w-6 h-6\" />\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                  className=\"absolute -top-1 -right-1\"\n                >\n                  <Sparkles className=\"w-3 h-3\" />\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </Button>\n\n        {/* New Message Indicator */}\n        <AnimatePresence>\n          {hasNewMessage && !isOpen && (\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              exit={{ scale: 0 }}\n              className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold\"\n            >\n              !\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":16647},"client/src/components/common/FloatingChat.tsx":{"content":"import { useState } from 'react';\nimport { MessageCircle, X, Send, Bot, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface FloatingChatProps {\n  messages: any;\n}\n\ninterface ChatMessage {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport default function FloatingChat({ messages }: FloatingChatProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      text: messages.chat?.welcome || \"Hello! I'm here to help you find the perfect service. What can I help you with today?\",\n      isUser: false,\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const newMessage: ChatMessage = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setChatMessages(prev => [...prev, newMessage]);\n    setInputMessage('');\n\n    // Simulate AI response\n    setTimeout(() => {\n      const aiResponse: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        text: messages.chat?.response || \"I found several available providers for your request. What's your location and preferred time?\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setChatMessages(prev => [...prev, aiResponse]);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Chat Button */}\n      <Button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"floating w-16 h-16 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n      >\n        {isOpen ? (\n          <X className=\"h-6 w-6 text-white\" />\n        ) : (\n          <MessageCircle className=\"h-6 w-6 text-white\" />\n        )}\n      </Button>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <Card className=\"absolute bottom-20 right-0 w-80 h-96 shadow-2xl border-0 overflow-hidden\">\n          <CardHeader className=\"bg-gradient-to-r from-khadamati-blue to-khadamati-yellow p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                  <Bot className=\"h-4 w-4 text-white\" />\n                </div>\n                <div className=\"text-white\">\n                  <CardTitle className=\"text-sm font-semibold\">\n                    {messages.chat?.title || 'Taskego Assistant'}\n                  </CardTitle>\n                  <p className=\"text-xs opacity-90\">\n                    {messages.chat?.status || 'Online'}\n                  </p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsOpen(false)}\n                className=\"text-white hover:bg-white hover:bg-opacity-20\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0 h-64 flex flex-col\">\n            <ScrollArea className=\"flex-1 p-4 bg-khadamati-light\">\n              <div className=\"space-y-4\">\n                {chatMessages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex items-start space-x-2 ${\n                      message.isUser ? 'flex-row-reverse space-x-reverse' : ''\n                    }`}\n                  >\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      message.isUser \n                        ? 'bg-khadamati-yellow' \n                        : 'bg-khadamati-blue'\n                    }`}>\n                      {message.isUser ? (\n                        <User className=\"h-4 w-4 text-white\" />\n                      ) : (\n                        <Bot className=\"h-4 w-4 text-white\" />\n                      )}\n                    </div>\n                    <div className={`max-w-xs rounded-lg p-3 ${\n                      message.isUser\n                        ? 'bg-khadamati-blue text-white ml-auto'\n                        : 'bg-white text-khadamati-dark'\n                    }`}>\n                      <p className=\"text-sm\">{message.text}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            <div className=\"p-4 border-t bg-white\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder={messages.chat?.placeholder || 'Type your message...'}\n                  className=\"flex-1 text-sm\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  size=\"icon\"\n                  className=\"bg-khadamati-blue hover:bg-blue-700\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":5737},"client/src/components/common/LanguageSwitcher.tsx":{"content":"import { useState } from 'react';\nimport { Globe, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\n\ninterface LanguageSwitcherProps {\n  currentLanguage: string;\n  onLanguageChange: (lang: 'en' | 'ar') => void;\n  messages: any;\n}\n\nexport default function LanguageSwitcher({ currentLanguage, onLanguageChange, messages }: LanguageSwitcherProps) {\n  const languages = [\n    { code: 'en', label: 'English', nativeLabel: 'English' },\n    { code: 'ar', label: 'Arabic', nativeLabel: 'العربية' },\n  ];\n\n  const currentLang = languages.find(lang => lang.code === currentLanguage) || languages[0];\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"flex items-center space-x-2 px-3 py-2\">\n          <Globe className=\"h-4 w-4 text-khadamati-gray\" />\n          <span className=\"text-sm font-medium\">{currentLang.code.toUpperCase()}</span>\n          <ChevronDown className=\"h-3 w-3 text-khadamati-gray\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-32\">\n        {languages.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => onLanguageChange(lang.code as 'en' | 'ar')}\n            className={`cursor-pointer ${\n              currentLanguage === lang.code ? 'bg-khadamati-light' : ''\n            }`}\n          >\n            <span className=\"text-sm\">{lang.nativeLabel}</span>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":1687},"client/src/components/common/ParallaxHero.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { motion, useScroll, useTransform, useSpring } from 'framer-motion';\nimport { ArrowDown, Play, Star, Users, CheckCircle, TrendingUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport ScrollReveal from './ScrollReveal';\nimport type { Messages } from '@/lib/i18n';\n\ninterface ParallaxHeroProps {\n  messages: Messages;\n  onGetStarted: () => void;\n  onWatchDemo: () => void;\n}\n\nexport default function ParallaxHero({ messages, onGetStarted, onWatchDemo }: ParallaxHeroProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start start\", \"end start\"]\n  });\n\n  // Parallax transforms\n  const y1 = useTransform(scrollYProgress, [0, 1], [0, -50]);\n  const y2 = useTransform(scrollYProgress, [0, 1], [0, -100]);\n  const y3 = useTransform(scrollYProgress, [0, 1], [0, -150]);\n  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);\n  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.8]);\n\n  // Smooth spring animations\n  const springConfig = { stiffness: 100, damping: 30, restDelta: 0.001 };\n  const y1Spring = useSpring(y1, springConfig);\n  const y2Spring = useSpring(y2, springConfig);\n  const y3Spring = useSpring(y3, springConfig);\n\n  const stats = [\n    { icon: Users, label: 'Active Users', value: '50K+', color: 'text-khadamati-blue' },\n    { icon: CheckCircle, label: 'Services Completed', value: '125K+', color: 'text-khadamati-success' },\n    { icon: Star, label: 'Average Rating', value: '4.9/5', color: 'text-khadamati-yellow' },\n    { icon: TrendingUp, label: 'Growth Rate', value: '+120%', color: 'text-khadamati-blue' }\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.3\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.25, 0.46, 0.45, 0.94]\n      }\n    }\n  };\n\n  const floatingVariants = {\n    initial: { y: 0 },\n    animate: {\n      y: [-10, 10, -10],\n      transition: {\n        duration: 6,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <div ref={ref} className=\"relative min-h-screen overflow-hidden bg-gradient-to-br from-white via-blue-50 to-purple-50\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0\">\n        {/* Animated Gradient Orbs */}\n        <motion.div\n          style={{ y: y3Spring }}\n          className=\"absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-khadamati-blue/20 to-khadamati-yellow/20 rounded-full blur-3xl\"\n          animate={{\n            scale: [1, 1.2, 1],\n            rotate: [0, 180, 360]\n          }}\n          transition={{\n            duration: 20,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n        />\n        <motion.div\n          style={{ y: y2Spring }}\n          className=\"absolute bottom-32 right-16 w-96 h-96 bg-gradient-to-r from-khadamati-yellow/15 to-khadamati-blue/15 rounded-full blur-3xl\"\n          animate={{\n            scale: [1.2, 1, 1.2],\n            rotate: [360, 180, 0]\n          }}\n          transition={{\n            duration: 25,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n        />\n        \n        {/* Geometric Patterns */}\n        <motion.div\n          style={{ y: y1Spring }}\n          className=\"absolute top-1/4 right-1/4 w-64 h-64 opacity-5\"\n        >\n          <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n            <motion.polygon\n              points=\"100,10 40,198 190,78 10,78 160,198\"\n              fill=\"currentColor\"\n              className=\"text-khadamati-blue\"\n              animate={{ rotate: [0, 360] }}\n              transition={{ duration: 30, repeat: Infinity, ease: \"linear\" }}\n            />\n          </svg>\n        </motion.div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 container mx-auto px-4 min-h-screen flex items-center\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center w-full\">\n          {/* Left Column - Content */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            style={{ opacity, scale }}\n            className=\"text-center lg:text-left\"\n          >\n            {/* Badge */}\n            <motion.div variants={itemVariants} className=\"mb-6\">\n              <Badge className=\"bg-blue-600 text-white px-6 py-3 text-lg font-bold shadow-xl border-2 border-blue-700\">\n                🚀 #1 Service Platform in the Region\n              </Badge>\n            </motion.div>\n\n            {/* Main Heading */}\n            <motion.h1 variants={itemVariants} className=\"text-4xl md:text-5xl lg:text-6xl font-black mb-6 leading-tight\">\n              <span className=\"text-blue-800 drop-shadow-lg\">Taskego</span>\n              <br />\n              <span className=\"text-gray-900 font-black\">\n                Your Trusted Service\n              </span>\n              <br />\n              <span className=\"text-blue-800 font-black\">Marketplace</span>\n            </motion.h1>\n\n            {/* Subheading */}\n            <motion.p variants={itemVariants} className=\"text-lg md:text-xl text-gray-800 mb-8 leading-relaxed max-w-2xl font-bold\">\n              Connect with verified professionals for \n              <span className=\"text-blue-700 font-black\"> cleaning</span>,\n              <span className=\"text-slate-600 font-black\"> repairs</span>, and\n              <span className=\"text-blue-700 font-black\"> maintenance</span> services. \n              Available in English and Arabic.\n            </motion.p>\n\n            {/* CTA Buttons */}\n            <motion.div variants={itemVariants} className=\"flex flex-col sm:flex-row gap-4 mb-12\">\n              <Button\n                onClick={onGetStarted}\n                size=\"lg\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-xl font-bold shadow-xl border-2 border-blue-700 hover:scale-105 transition-all duration-300\"\n              >\n                Get Started Free\n                <ArrowDown className=\"w-5 h-5 ml-2\" />\n              </Button>\n              \n              <Button\n                onClick={onWatchDemo}\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-3 border-blue-700 text-blue-700 hover:bg-blue-700 hover:text-white px-8 py-4 text-xl font-bold shadow-lg transition-all duration-300\"\n              >\n                <Play className=\"w-5 h-5 mr-2\" />\n                Watch Demo\n              </Button>\n            </motion.div>\n\n            {/* Stats */}\n            <motion.div variants={itemVariants} className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n              {stats.map((stat, index) => (\n                <ScrollReveal key={index} delay={index * 0.1}>\n                  <Card className=\"text-center bg-white/80 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300\">\n                    <CardContent className=\"p-4\">\n                      <div className={`inline-flex items-center justify-center w-12 h-12 rounded-full bg-white shadow-lg mb-3 ${stat.color}`}>\n                        <stat.icon className=\"w-6 h-6\" />\n                      </div>\n                      <div className=\"text-2xl font-bold text-gray-900\">{stat.value}</div>\n                      <div className=\"text-sm text-gray-600\">{stat.label}</div>\n                    </CardContent>\n                  </Card>\n                </ScrollReveal>\n              ))}\n            </motion.div>\n          </motion.div>\n\n          {/* Right Column - Visual Elements */}\n          <motion.div\n            style={{ y: y1Spring }}\n            className=\"relative hidden lg:block\"\n          >\n            {/* Main Device Mockup */}\n            <motion.div\n              variants={floatingVariants}\n              initial=\"initial\"\n              animate=\"animate\"\n              className=\"relative z-10\"\n            >\n              <Card className=\"bg-white/90 backdrop-blur-sm border-0 shadow-2xl transform rotate-3 hover:rotate-0 transition-transform duration-500\">\n                <CardContent className=\"p-8\">\n                  <div className=\"bg-gradient-to-br from-blue-50 to-slate-50 rounded-2xl p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-slate-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-blue-300 rounded-full\"></div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                      <div className=\"h-8 bg-gradient-to-r from-blue-600 to-slate-600 rounded-lg\"></div>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div className=\"h-16 bg-gray-100 rounded-lg\"></div>\n                        <div className=\"h-16 bg-gray-100 rounded-lg\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Floating Cards */}\n            <motion.div\n              variants={floatingVariants}\n              initial=\"initial\"\n              animate=\"animate\"\n              className=\"absolute -top-6 -left-6\"\n              style={{ animationDelay: '1s' }}\n            >\n              <Card className=\"bg-white/90 backdrop-blur-sm border-0 shadow-xl\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl mb-1\">⭐</div>\n                  <div className=\"text-sm font-semibold text-khadamati-blue\">4.9/5 Rating</div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              variants={floatingVariants}\n              initial=\"initial\"\n              animate=\"animate\"\n              className=\"absolute -bottom-6 -right-6\"\n              style={{ animationDelay: '2s' }}\n            >\n              <Card className=\"bg-gradient-to-r from-blue-600 to-slate-600 border-0 shadow-xl\">\n                <CardContent className=\"p-4 text-center text-white\">\n                  <div className=\"text-2xl mb-1\">🚀</div>\n                  <div className=\"text-sm font-semibold\">50K+ Users</div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Scroll Indicator */}\n      <motion.div\n        style={{ opacity }}\n        className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\"\n      >\n        <motion.div\n          animate={{ y: [0, 10, 0] }}\n          transition={{ duration: 2, repeat: Infinity }}\n          className=\"text-gray-400 dark:text-gray-500\"\n        >\n          <ArrowDown className=\"w-6 h-6\" />\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":11358},"client/src/components/common/ScrollReveal.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { motion, useAnimation, useInView } from 'framer-motion';\n\ninterface ScrollRevealProps {\n  children: React.ReactNode;\n  direction?: 'up' | 'down' | 'left' | 'right';\n  delay?: number;\n  duration?: number;\n  distance?: number;\n  threshold?: number;\n  className?: string;\n  once?: boolean;\n}\n\nexport default function ScrollReveal({\n  children,\n  direction = 'up',\n  delay = 0,\n  duration = 0.6,\n  distance = 50,\n  threshold = 0.1,\n  className = '',\n  once = true\n}: ScrollRevealProps) {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { amount: threshold, once });\n  const controls = useAnimation();\n\n  const getInitialPosition = () => {\n    switch (direction) {\n      case 'up':\n        return { y: distance, opacity: 0 };\n      case 'down':\n        return { y: -distance, opacity: 0 };\n      case 'left':\n        return { x: distance, opacity: 0 };\n      case 'right':\n        return { x: -distance, opacity: 0 };\n      default:\n        return { y: distance, opacity: 0 };\n    }\n  };\n\n  const getFinalPosition = () => {\n    return { x: 0, y: 0, opacity: 1 };\n  };\n\n  useEffect(() => {\n    if (isInView) {\n      controls.start({\n        ...getFinalPosition(),\n        transition: {\n          duration,\n          delay,\n          ease: [0.25, 0.46, 0.45, 0.94]\n        }\n      });\n    } else if (!once) {\n      controls.start(getInitialPosition());\n    }\n  }, [isInView, controls, delay, duration, once]);\n\n  return (\n    <motion.div\n      ref={ref}\n      initial={getInitialPosition()}\n      animate={controls}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n}","size_bytes":1666},"client/src/components/navigation/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';\n\ninterface FooterProps {\n  messages: any;\n}\n\nexport default function Footer({ messages }: FooterProps) {\n  return (\n    <footer className=\"bg-khadamati-dark text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-xl flex items-center justify-center\">\n                <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold text-gradient\">Taskego</span>\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              {messages.footer?.description || 'Your trusted platform for professional local services. Connect with skilled providers and get the job done right.'}\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Facebook className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Instagram className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Linkedin className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {messages.footer?.quick_links || 'Quick Links'}\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.home || 'Home'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.services || 'Services'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.about || 'About'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.contact || 'Contact'}\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {messages.footer?.services_title || 'Services'}\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/services?category=cleaning\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.cleaning?.title || 'Cleaning'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services?category=plumbing\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.plumbing?.title || 'Plumbing'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services?category=electrical\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.electrical?.title || 'Electrical'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services?category=delivery\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.delivery?.title || 'Delivery'}\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Support */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {messages.footer?.support || 'Support'}\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/help\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.help_center || 'Help Center'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.privacy || 'Privacy Policy'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.terms || 'Terms of Service'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/faq\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.faq || 'FAQ'}\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 pt-8 mt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\">\n              {messages.footer?.copyright || '© 2023 Taskego. All rights reserved.'}\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <Link href=\"/privacy\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n                {messages.footer?.privacy || 'Privacy'}\n              </Link>\n              <Link href=\"/terms\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n                {messages.footer?.terms || 'Terms'}\n              </Link>\n              <Link href=\"/cookies\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n                {messages.footer?.cookies || 'Cookies'}\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6756},"client/src/components/navigation/Header.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Menu, X, Globe, User, Bell } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\nimport LanguageSwitcher from '../common/LanguageSwitcher';\nimport { useQuery } from '@tanstack/react-query';\nimport type { User as UserType } from '@shared/schema';\n\ninterface HeaderProps {\n  currentLanguage: string;\n  onLanguageChange: (lang: 'en' | 'ar') => void;\n  messages: any;\n}\n\nexport default function Header({ currentLanguage, onLanguageChange, messages }: HeaderProps) {\n  const [location] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n  \n  // Get user data from auth hook\n  const { data: user } = useQuery<UserType | null>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n  });\n\n  const navItems = [\n    { href: '/', label: messages.nav?.home || 'Home' },\n    { href: '/services', label: messages.nav?.services || 'Services' },\n    { href: '/about', label: messages.nav?.about || 'About' },\n    { href: '/contact', label: messages.nav?.contact || 'Contact' },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/') return location === '/';\n    return location.startsWith(href);\n  };\n\n  return (\n    <header className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-xl flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n              </svg>\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xl font-bold text-gradient\">Taskego</span>\n              <span className=\"text-xs text-khadamati-gray hidden sm:inline\">Khadamati</span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`font-medium transition-colors hover:text-khadamati-blue ${\n                  isActive(item.href) ? 'text-khadamati-blue' : 'text-khadamati-gray'\n                }`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </nav>\n\n          {/* Right Side Controls */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Switcher */}\n            <LanguageSwitcher\n              currentLanguage={currentLanguage}\n              onLanguageChange={onLanguageChange}\n              messages={messages}\n            />\n\n            {/* Notifications */}\n            {user && (\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                <Bell className=\"h-5 w-5\" />\n                <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 bg-khadamati-error text-white\">\n                  3\n                </Badge>\n              </Button>\n            )}\n\n            {/* User Menu */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <User className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <Link href=\"/profile\">Profile</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Link href=\"/dashboard\">Dashboard</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Link href=\"/bookings\">My Bookings</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <button onClick={() => window.location.href = '/api/logout'}>Logout</button>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden md:flex items-center space-x-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-khadamati-blue text-khadamati-blue hover:bg-khadamati-blue hover:text-white\"\n                  onClick={() => window.location.href = '/api/login'}\n                >\n                  {messages.nav?.login || 'Login'}\n                </Button>\n                <Button \n                  className=\"bg-khadamati-blue hover:bg-blue-700\"\n                  onClick={() => window.location.href = '/api/login'}\n                >\n                  {messages.nav?.signup || 'Sign Up'}\n                </Button>\n              </div>\n            )}\n\n            {/* Mobile Menu */}\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {navItems.map((item) => (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      className={`text-lg font-medium transition-colors hover:text-khadamati-blue ${\n                        isActive(item.href) ? 'text-khadamati-blue' : 'text-khadamati-gray'\n                      }`}\n                      onClick={() => setIsOpen(false)}\n                    >\n                      {item.label}\n                    </Link>\n                  ))}\n                  \n                  {!user && (\n                    <div className=\"pt-4 border-t space-y-3\">\n                      <Link href=\"/login\" onClick={() => setIsOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full border-khadamati-blue text-khadamati-blue hover:bg-khadamati-blue hover:text-white\">\n                          {messages.nav?.login || 'Login'}\n                        </Button>\n                      </Link>\n                      <Link href=\"/signup\" onClick={() => setIsOpen(false)}>\n                        <Button className=\"w-full bg-khadamati-blue hover:bg-blue-700\">\n                          {messages.nav?.signup || 'Sign Up'}\n                        </Button>\n                      </Link>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7243},"client/src/components/services/InteractiveServiceCard.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Star, Clock, MapPin, User, ArrowRight, Heart, Share2, TrendingUp, Shield, Award } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\ninterface InteractiveServiceCardProps {\n  service: {\n    id: number;\n    title: string;\n    description: string;\n    price: number;\n    priceType: string;\n    rating: number;\n    location: string;\n    duration: number;\n    images?: string[];\n    provider: {\n      name: string;\n      nameAr?: string;\n      avatar?: string;\n      rating: number;\n      completedJobs: number;\n      verified: boolean;\n    };\n    category: {\n      name: string;\n      nameAr?: string;\n      icon: string;\n      color: string;\n    };\n  };\n  onBook: (serviceId: number) => void;\n  onViewDetails: (serviceId: number) => void;\n}\n\nexport default function InteractiveServiceCard({ service, onBook, onViewDetails }: InteractiveServiceCardProps) {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const cardVariants = {\n    initial: { \n      scale: 1,\n      rotateY: 0,\n      boxShadow: \"0 4px 6px -1px rgba(0, 0, 0, 0.1)\"\n    },\n    hover: { \n      scale: 1.02,\n      rotateY: isFlipped ? 180 : 0,\n      boxShadow: \"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)\",\n      transition: { duration: 0.3 }\n    },\n    flipped: {\n      rotateY: 180,\n      transition: { duration: 0.6 }\n    }\n  };\n\n  const contentVariants = {\n    front: {\n      rotateY: 0,\n      opacity: 1\n    },\n    back: {\n      rotateY: 180,\n      opacity: 1\n    }\n  };\n\n  const iconVariants = {\n    initial: { scale: 1, rotate: 0 },\n    hover: { scale: 1.1, rotate: 5 },\n    tap: { scale: 0.95 }\n  };\n\n  const heartVariants = {\n    initial: { scale: 1 },\n    liked: { scale: 1.2, color: \"#ef4444\" },\n    tap: { scale: 0.8 }\n  };\n\n  return (\n    <div className=\"relative h-80 perspective-1000\">\n      <motion.div\n        variants={cardVariants}\n        initial=\"initial\"\n        whileHover=\"hover\"\n        animate={isFlipped ? \"flipped\" : \"initial\"}\n        onHoverStart={() => setIsHovered(true)}\n        onHoverEnd={() => setIsHovered(false)}\n        style={{ transformStyle: \"preserve-3d\" }}\n        className=\"w-full h-full cursor-pointer\"\n      >\n        {/* Front Side */}\n        <motion.div\n          variants={contentVariants}\n          animate=\"front\"\n          style={{ \n            backfaceVisibility: \"hidden\",\n            transform: \"rotateY(0deg)\"\n          }}\n          className=\"absolute inset-0\"\n        >\n          <Card className=\"h-full overflow-hidden bg-gradient-to-br from-white to-gray-50 dark:from-gray-900 dark:to-gray-800 border-0 shadow-lg\">\n            <CardContent className=\"p-0 h-full\">\n              {/* Header with Image/Icon */}\n              <div \n                className=\"relative h-32 bg-gradient-to-br overflow-hidden\"\n                style={{ \n                  background: `linear-gradient(135deg, ${service.category.color}20 0%, ${service.category.color}40 100%)`\n                }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                \n                {/* Category Icon */}\n                <div className=\"absolute top-4 left-4\">\n                  <motion.div\n                    variants={iconVariants}\n                    initial=\"initial\"\n                    whileHover=\"hover\"\n                    whileTap=\"tap\"\n                    className=\"w-10 h-10 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center\"\n                  >\n                    <span className=\"text-2xl\">{service.category.icon}</span>\n                  </motion.div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"absolute top-4 right-4 flex gap-2\">\n                  <motion.button\n                    variants={heartVariants}\n                    initial=\"initial\"\n                    animate={isLiked ? \"liked\" : \"initial\"}\n                    whileTap=\"tap\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setIsLiked(!isLiked);\n                    }}\n                    className=\"w-8 h-8 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center text-white hover:bg-white/30 transition-colors\"\n                  >\n                    <Heart className={`w-4 h-4 ${isLiked ? 'fill-current text-red-500' : ''}`} />\n                  </motion.button>\n                  \n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"w-8 h-8 p-0 rounded-full bg-white/20 backdrop-blur-sm text-white hover:bg-white/30\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Share functionality\n                    }}\n                  >\n                    <Share2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Rating Badge */}\n                <div className=\"absolute bottom-4 left-4\">\n                  <Badge className=\"bg-white/90 text-gray-900 backdrop-blur-sm\">\n                    <Star className=\"w-3 h-3 mr-1 fill-yellow-400 text-yellow-400\" />\n                    {service.rating}\n                  </Badge>\n                </div>\n\n                {/* Price */}\n                <div className=\"absolute bottom-4 right-4\">\n                  <div className=\"bg-khadamati-blue text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                    ${service.price}/{service.priceType}\n                  </div>\n                </div>\n              </div>\n\n              {/* Content */}\n              <div className=\"p-4 flex-1 flex flex-col\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-lg text-gray-900 dark:text-white mb-2 line-clamp-2\">\n                    {service.title}\n                  </h3>\n                  \n                  <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2\">\n                    {service.description}\n                  </p>\n\n                  <div className=\"flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400 mb-3\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"w-3 h-3\" />\n                      {service.duration}min\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"w-3 h-3\" />\n                      {service.location || \"Your area\"}\n                    </div>\n                  </div>\n\n                  {/* Provider Info */}\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Avatar className=\"w-6 h-6\">\n                      <AvatarImage src={service.provider.avatar} />\n                      <AvatarFallback className=\"text-xs\">\n                        {service.provider.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-1\">\n                        <span className=\"text-xs font-medium text-gray-700 dark:text-gray-300 truncate\">\n                          {service.provider.name}\n                        </span>\n                        {service.provider.verified && (\n                          <Shield className=\"w-3 h-3 text-blue-500\" />\n                        )}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {service.provider.completedJobs} jobs completed\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setIsFlipped(true);\n                    }}\n                  >\n                    Details\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    className=\"flex-1 bg-khadamati-blue hover:bg-khadamati-blue/90\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onBook(service.id);\n                    }}\n                  >\n                    Book Now\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Back Side */}\n        <motion.div\n          variants={contentVariants}\n          animate=\"back\"\n          style={{ \n            backfaceVisibility: \"hidden\",\n            transform: \"rotateY(180deg)\"\n          }}\n          className=\"absolute inset-0\"\n        >\n          <Card className=\"h-full bg-gradient-to-br from-khadamati-blue to-khadamati-yellow text-white border-0 shadow-lg\">\n            <CardContent className=\"p-4 h-full flex flex-col\">\n              {/* Back to front button */}\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"font-semibold text-lg\">Service Details</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setIsFlipped(false);\n                  }}\n                >\n                  ←\n                </Button>\n              </div>\n\n              <div className=\"flex-1 space-y-4\">\n                {/* Key Features */}\n                <div>\n                  <h4 className=\"font-medium mb-2\">What's Included:</h4>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Professional equipment</li>\n                    <li>• Quality guarantee</li>\n                    <li>• Flexible scheduling</li>\n                    <li>• Insured service</li>\n                  </ul>\n                </div>\n\n                {/* Provider Stats */}\n                <div>\n                  <h4 className=\"font-medium mb-2\">Provider Stats:</h4>\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n                      <div className=\"font-semibold\">{service.provider.rating}</div>\n                      <div className=\"text-xs opacity-80\">Rating</div>\n                    </div>\n                    <div className=\"bg-white/20 rounded-lg p-2 text-center\">\n                      <div className=\"font-semibold\">{service.provider.completedJobs}</div>\n                      <div className=\"text-xs opacity-80\">Jobs Done</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Availability */}\n                <div>\n                  <h4 className=\"font-medium mb-2\">Availability:</h4>\n                  <div className=\"text-sm\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                      Available today\n                    </div>\n                    <div className=\"text-xs opacity-80\">Next slot: 2:00 PM</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* CTA Buttons */}\n              <div className=\"space-y-2\">\n                <Button\n                  className=\"w-full bg-white text-khadamati-blue hover:bg-gray-100\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onViewDetails(service.id);\n                  }}\n                >\n                  View Full Details\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full border-white text-white hover:bg-white/20\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onBook(service.id);\n                  }}\n                >\n                  Book This Service\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n\n      {/* Hover Glow Effect */}\n      <AnimatePresence>\n        {isHovered && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute -inset-1 bg-gradient-to-r from-khadamati-blue to-khadamati-yellow rounded-lg blur opacity-20 -z-10\"\n          />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":13213},"client/src/components/services/ServiceCard.tsx":{"content":"import { Star, Clock, MapPin } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface ServiceCardProps {\n  id: number;\n  title: string;\n  description: string;\n  price: string;\n  priceType: string;\n  rating: number;\n  reviewCount: number;\n  provider: {\n    name: string;\n    image?: string;\n  };\n  location: string;\n  duration?: number;\n  category: string;\n  image?: string;\n  onBook?: () => void;\n  messages: any;\n}\n\nexport default function ServiceCard({\n  id,\n  title,\n  description,\n  price,\n  priceType,\n  rating,\n  reviewCount,\n  provider,\n  location,\n  duration,\n  category,\n  image,\n  onBook,\n  messages,\n}: ServiceCardProps) {\n  const formatPrice = (price: string, type: string) => {\n    const amount = parseFloat(price);\n    if (type === 'hourly') {\n      return `$${amount}/hr`;\n    } else if (type === 'fixed') {\n      return `$${amount}`;\n    }\n    return `$${amount}`;\n  };\n\n  return (\n    <Card className=\"card-hover bg-white rounded-2xl shadow-lg overflow-hidden border-0\">\n      {/* Service Image */}\n      {image && (\n        <div className=\"relative h-48 overflow-hidden\">\n          <img\n            src={image}\n            alt={title}\n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute top-4 left-4\">\n            <Badge variant=\"secondary\" className=\"bg-white text-khadamati-dark\">\n              {category}\n            </Badge>\n          </div>\n        </div>\n      )}\n\n      <CardContent className=\"p-6\">\n        {/* Service Info */}\n        <div className=\"flex justify-between items-start mb-3\">\n          <h3 className=\"text-xl font-semibold text-khadamati-dark line-clamp-2\">\n            {title}\n          </h3>\n          <span className=\"text-lg font-bold text-khadamati-blue ml-2\">\n            {formatPrice(price, priceType)}\n          </span>\n        </div>\n\n        <p className=\"text-khadamati-gray text-sm mb-4 line-clamp-2\">\n          {description}\n        </p>\n\n        {/* Service Details */}\n        <div className=\"flex items-center gap-4 mb-4 text-sm text-khadamati-gray\">\n          {duration && (\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{duration} min</span>\n            </div>\n          )}\n          {location && (\n            <div className=\"flex items-center gap-1\">\n              <MapPin className=\"h-4 w-4\" />\n              <span className=\"line-clamp-1\">{location}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Provider Info */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={provider.image} alt={provider.name} />\n              <AvatarFallback>\n                {provider.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"font-medium text-khadamati-dark text-sm\">\n                {provider.name}\n              </div>\n              <div className=\"flex items-center gap-1 text-xs text-khadamati-gray\">\n                <Star className=\"h-3 w-3 fill-khadamati-yellow text-khadamati-yellow\" />\n                <span>{rating}</span>\n                <span>({reviewCount} reviews)</span>\n              </div>\n            </div>\n          </div>\n\n          <Button\n            onClick={onBook}\n            className=\"bg-khadamati-blue hover:bg-blue-700 text-white\"\n            size=\"sm\"\n          >\n            {messages.services_page?.book || 'Book'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3850},"client/src/components/services/ServiceGrid.tsx":{"content":"import { useState } from 'react';\nimport { Search, Filter, SlidersHorizontal } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ServiceCard from './ServiceCard';\n\ninterface ServiceGridProps {\n  services: any[];\n  categories: any[];\n  onServiceBook: (serviceId: number) => void;\n  messages: any;\n}\n\nexport default function ServiceGrid({ services, categories, onServiceBook, messages }: ServiceGridProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [priceRange, setPriceRange] = useState('all');\n  const [sortBy, setSortBy] = useState('rating');\n\n  const filteredServices = services.filter(service => {\n    const matchesSearch = service.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         service.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || service.category === selectedCategory;\n    const price = parseFloat(service.price);\n    const matchesPrice = priceRange === 'all' ||\n                        (priceRange === '0-25' && price <= 25) ||\n                        (priceRange === '25-50' && price > 25 && price <= 50) ||\n                        (priceRange === '50-100' && price > 50 && price <= 100) ||\n                        (priceRange === '100+' && price > 100);\n    \n    return matchesSearch && matchesCategory && matchesPrice;\n  });\n\n  const sortedServices = [...filteredServices].sort((a, b) => {\n    switch (sortBy) {\n      case 'rating':\n        return parseFloat(b.rating) - parseFloat(a.rating);\n      case 'price-low':\n        return parseFloat(a.price) - parseFloat(b.price);\n      case 'price-high':\n        return parseFloat(b.price) - parseFloat(a.price);\n      case 'newest':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      default:\n        return 0;\n    }\n  });\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Search and Filters */}\n      <Card className=\"bg-khadamati-light border-0\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-khadamati-gray\" />\n              <Input\n                placeholder={messages.services_page?.filter?.search || 'Search services...'}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder={messages.services_page?.filter?.category || 'Category'} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.name}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={priceRange} onValueChange={setPriceRange}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder={messages.services_page?.filter?.price || 'Price Range'} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Prices</SelectItem>\n                  <SelectItem value=\"0-25\">$0 - $25</SelectItem>\n                  <SelectItem value=\"25-50\">$25 - $50</SelectItem>\n                  <SelectItem value=\"50-100\">$50 - $100</SelectItem>\n                  <SelectItem value=\"100+\">$100+</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Results Count */}\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-khadamati-gray\">\n          {sortedServices.length} services found\n        </p>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n          <SlidersHorizontal className=\"h-4 w-4\" />\n          More Filters\n        </Button>\n      </div>\n\n      {/* Services Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {sortedServices.map((service) => (\n          <ServiceCard\n            key={service.id}\n            id={service.id}\n            title={service.title}\n            description={service.description}\n            price={service.price}\n            priceType={service.priceType}\n            rating={parseFloat(service.rating)}\n            reviewCount={service.reviewCount}\n            provider={service.provider}\n            location={service.location}\n            duration={service.duration}\n            category={service.category}\n            image={service.image}\n            onBook={() => onServiceBook(service.id)}\n            messages={messages}\n          />\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {sortedServices.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-24 h-24 bg-khadamati-light rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Search className=\"h-12 w-12 text-khadamati-gray\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-khadamati-dark mb-2\">\n            No services found\n          </h3>\n          <p className=\"text-khadamati-gray mb-4\">\n            Try adjusting your search criteria or filters\n          </p>\n          <Button onClick={() => {\n            setSearchTerm('');\n            setSelectedCategory('all');\n            setPriceRange('all');\n          }}>\n            Clear Filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6974},"client/src/components/services/SimpleServiceCard.tsx":{"content":"import React from 'react';\nimport { Star, Clock, MapPin, ArrowRight, Shield } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface SimpleServiceCardProps {\n  service: {\n    id: number;\n    title: string;\n    description: string;\n    price: number;\n    priceType: string;\n    rating: number;\n    location: string;\n    duration: number;\n    images?: string[];\n    provider: {\n      name: string;\n      avatar?: string;\n      rating: number;\n      completedJobs: number;\n      verified: boolean;\n    };\n    category: {\n      name: string;\n      icon: string;\n      color: string;\n    };\n  };\n  onBook: (serviceId: number) => void;\n  onViewDetails: (serviceId: number) => void;\n}\n\nexport default function SimpleServiceCard({ service, onBook, onViewDetails }: SimpleServiceCardProps) {\n  return (\n    <Card className=\"h-full overflow-hidden bg-white border shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\">\n      {/* Header with Category Icon and Rating */}\n      <div \n        className=\"h-32 relative bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center\"\n        style={{ \n          background: `linear-gradient(135deg, ${service.category.color}15 0%, ${service.category.color}30 100%)`\n        }}\n      >\n        <div className=\"text-4xl\">{service.category.icon}</div>\n        \n        {/* Rating Badge */}\n        <div className=\"absolute top-3 left-3\">\n          <Badge className=\"bg-white text-gray-900\">\n            <Star className=\"w-3 h-3 mr-1 fill-yellow-400 text-yellow-400\" />\n            {service.rating}\n          </Badge>\n        </div>\n        \n        {/* Price */}\n        <div className=\"absolute top-3 right-3\">\n          <div className=\"bg-khadamati-blue text-white px-3 py-1 rounded-full text-sm font-semibold\">\n            ${service.price}/{service.priceType}\n          </div>\n        </div>\n      </div>\n\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold text-gray-900 line-clamp-1\">\n          {service.title}\n        </CardTitle>\n        <p className=\"text-sm text-gray-600 line-clamp-2\">\n          {service.description}\n        </p>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        {/* Service Info */}\n        <div className=\"flex items-center gap-4 text-xs text-gray-500 mb-4\">\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"w-3 h-3\" />\n            {service.duration}min\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <MapPin className=\"w-3 h-3\" />\n            {service.location}\n          </div>\n        </div>\n\n        {/* Provider Info */}\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Avatar className=\"w-8 h-8\">\n            <AvatarImage src={service.provider.avatar} />\n            <AvatarFallback className=\"text-xs bg-khadamati-blue text-white\">\n              {service.provider.name.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-1\">\n              <span className=\"text-sm font-medium text-gray-700 truncate\">\n                {service.provider.name}\n              </span>\n              {service.provider.verified && (\n                <Shield className=\"w-3 h-3 text-blue-500\" />\n              )}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              {service.provider.completedJobs} jobs completed\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onViewDetails(service.id);\n            }}\n          >\n            Details\n          </Button>\n          <Button\n            size=\"sm\"\n            className=\"flex-1 bg-khadamati-blue hover:bg-khadamati-blue/90 text-white\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onBook(service.id);\n            }}\n          >\n            Book Now\n            <ArrowRight className=\"w-3 h-3 ml-1\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4509},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"frontend/src/components/common/AnimatedCounter.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface AnimatedCounterProps {\n  end: number;\n  duration?: number;\n  suffix?: string;\n  className?: string;\n}\n\nexport default function AnimatedCounter({ end, duration = 2000, suffix = '', className = '' }: AnimatedCounterProps) {\n  const [count, setCount] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  const elementRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isVisible) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const startTime = Date.now();\n    const startValue = 0;\n    const endValue = end;\n\n    const updateCount = () => {\n      const now = Date.now();\n      const elapsed = now - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      const currentValue = Math.round(startValue + (endValue - startValue) * easeOutQuart);\n\n      setCount(currentValue);\n\n      if (progress < 1) {\n        requestAnimationFrame(updateCount);\n      }\n    };\n\n    requestAnimationFrame(updateCount);\n  }, [isVisible, end, duration]);\n\n  return (\n    <span ref={elementRef} className={className}>\n      {count.toLocaleString()}{suffix}\n    </span>\n  );\n}\n","size_bytes":1550},"frontend/src/components/common/FloatingChat.tsx":{"content":"import { useState } from 'react';\nimport { MessageCircle, X, Send, Bot, User } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface FloatingChatProps {\n  messages: any;\n}\n\ninterface ChatMessage {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport default function FloatingChat({ messages }: FloatingChatProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      text: messages.chat?.welcome || \"Hello! I'm here to help you find the perfect service. What can I help you with today?\",\n      isUser: false,\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const newMessage: ChatMessage = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setChatMessages(prev => [...prev, newMessage]);\n    setInputMessage('');\n\n    // Simulate AI response\n    setTimeout(() => {\n      const aiResponse: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        text: messages.chat?.response || \"I found several available providers for your request. What's your location and preferred time?\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setChatMessages(prev => [...prev, aiResponse]);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Chat Button */}\n      <Button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"floating w-16 h-16 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n      >\n        {isOpen ? (\n          <X className=\"h-6 w-6 text-white\" />\n        ) : (\n          <MessageCircle className=\"h-6 w-6 text-white\" />\n        )}\n      </Button>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <Card className=\"absolute bottom-20 right-0 w-80 h-96 shadow-2xl border-0 overflow-hidden\">\n          <CardHeader className=\"bg-gradient-to-r from-khadamati-blue to-khadamati-yellow p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                  <Bot className=\"h-4 w-4 text-white\" />\n                </div>\n                <div className=\"text-white\">\n                  <CardTitle className=\"text-sm font-semibold\">\n                    {messages.chat?.title || 'Taskego Assistant'}\n                  </CardTitle>\n                  <p className=\"text-xs opacity-90\">\n                    {messages.chat?.status || 'Online'}\n                  </p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsOpen(false)}\n                className=\"text-white hover:bg-white hover:bg-opacity-20\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0 h-64 flex flex-col\">\n            <ScrollArea className=\"flex-1 p-4 bg-khadamati-light\">\n              <div className=\"space-y-4\">\n                {chatMessages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex items-start space-x-2 ${\n                      message.isUser ? 'flex-row-reverse space-x-reverse' : ''\n                    }`}\n                  >\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      message.isUser \n                        ? 'bg-khadamati-yellow' \n                        : 'bg-khadamati-blue'\n                    }`}>\n                      {message.isUser ? (\n                        <User className=\"h-4 w-4 text-white\" />\n                      ) : (\n                        <Bot className=\"h-4 w-4 text-white\" />\n                      )}\n                    </div>\n                    <div className={`max-w-xs rounded-lg p-3 ${\n                      message.isUser\n                        ? 'bg-khadamati-blue text-white ml-auto'\n                        : 'bg-white text-khadamati-dark'\n                    }`}>\n                      <p className=\"text-sm\">{message.text}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            <div className=\"p-4 border-t bg-white\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder={messages.chat?.placeholder || 'Type your message...'}\n                  className=\"flex-1 text-sm\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  size=\"icon\"\n                  className=\"bg-khadamati-blue hover:bg-blue-700\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":5737},"frontend/src/components/common/LanguageSwitcher.tsx":{"content":"import { useState } from 'react';\nimport { Globe, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\n\ninterface LanguageSwitcherProps {\n  currentLanguage: string;\n  onLanguageChange: (lang: 'en' | 'ar') => void;\n  messages: any;\n}\n\nexport default function LanguageSwitcher({ currentLanguage, onLanguageChange, messages }: LanguageSwitcherProps) {\n  const languages = [\n    { code: 'en', label: 'English', nativeLabel: 'English' },\n    { code: 'ar', label: 'Arabic', nativeLabel: 'العربية' },\n  ];\n\n  const currentLang = languages.find(lang => lang.code === currentLanguage) || languages[0];\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"flex items-center space-x-2 px-3 py-2\">\n          <Globe className=\"h-4 w-4 text-khadamati-gray\" />\n          <span className=\"text-sm font-medium\">{currentLang.code.toUpperCase()}</span>\n          <ChevronDown className=\"h-3 w-3 text-khadamati-gray\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-32\">\n        {languages.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => onLanguageChange(lang.code as 'en' | 'ar')}\n            className={`cursor-pointer ${\n              currentLanguage === lang.code ? 'bg-khadamati-light' : ''\n            }`}\n          >\n            <span className=\"text-sm\">{lang.nativeLabel}</span>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":1687},"frontend/src/components/common/ScrollReveal.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface ScrollRevealProps {\n  children: React.ReactNode;\n  className?: string;\n  delay?: number;\n}\n\nexport default function ScrollReveal({ children, className = '', delay = 0 }: ScrollRevealProps) {\n  const [isRevealed, setIsRevealed] = useState(false);\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setTimeout(() => {\n            setIsRevealed(true);\n          }, delay);\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px',\n      }\n    );\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [delay]);\n\n  return (\n    <div\n      ref={elementRef}\n      className={`scroll-reveal ${isRevealed ? 'revealed' : ''} ${className}`}\n    >\n      {children}\n    </div>\n  );\n}\n","size_bytes":977},"frontend/src/components/navigation/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';\n\ninterface FooterProps {\n  messages: any;\n}\n\nexport default function Footer({ messages }: FooterProps) {\n  return (\n    <footer className=\"bg-khadamati-dark text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-xl flex items-center justify-center\">\n                <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n                </svg>\n              </div>\n              <span className=\"text-xl font-bold text-gradient\">Taskego</span>\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              {messages.footer?.description || 'Your trusted platform for professional local services. Connect with skilled providers and get the job done right.'}\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Facebook className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Instagram className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center hover:bg-khadamati-blue transition-colors\">\n                <Linkedin className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {messages.footer?.quick_links || 'Quick Links'}\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.home || 'Home'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.services || 'Services'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.about || 'About'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.contact || 'Contact'}\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {messages.footer?.services_title || 'Services'}\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/services?category=cleaning\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.cleaning?.title || 'Cleaning'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services?category=plumbing\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.plumbing?.title || 'Plumbing'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services?category=electrical\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.electrical?.title || 'Electrical'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services?category=delivery\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.services?.delivery?.title || 'Delivery'}\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Support */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {messages.footer?.support || 'Support'}\n            </h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/help\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.help_center || 'Help Center'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.privacy || 'Privacy Policy'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.terms || 'Terms of Service'}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/faq\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  {messages.footer?.faq || 'FAQ'}\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 pt-8 mt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\">\n              {messages.footer?.copyright || '© 2023 Taskego. All rights reserved.'}\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <Link href=\"/privacy\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n                {messages.footer?.privacy || 'Privacy'}\n              </Link>\n              <Link href=\"/terms\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n                {messages.footer?.terms || 'Terms'}\n              </Link>\n              <Link href=\"/cookies\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n                {messages.footer?.cookies || 'Cookies'}\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6756},"frontend/src/components/navigation/Header.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Menu, X, Globe, User, Bell } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\nimport LanguageSwitcher from '../common/LanguageSwitcher';\nimport { useQuery } from '@tanstack/react-query';\nimport type { User as UserType } from '@shared/schema';\n\ninterface HeaderProps {\n  currentLanguage: string;\n  onLanguageChange: (lang: 'en' | 'ar') => void;\n  messages: any;\n}\n\nexport default function Header({ currentLanguage, onLanguageChange, messages }: HeaderProps) {\n  const [location] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n  \n  // Get user data from auth hook\n  const { data: user } = useQuery<UserType | null>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n  });\n\n  const navItems = [\n    { href: '/', label: messages.nav?.home || 'Home' },\n    { href: '/services', label: messages.nav?.services || 'Services' },\n    { href: '/about', label: messages.nav?.about || 'About' },\n    { href: '/contact', label: messages.nav?.contact || 'Contact' },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/') return location === '/';\n    return location.startsWith(href);\n  };\n\n  return (\n    <header className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-khadamati-blue to-khadamati-yellow rounded-xl flex items-center justify-center\">\n              <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n              </svg>\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xl font-bold text-gradient\">Taskego</span>\n              <span className=\"text-xs text-khadamati-gray hidden sm:inline\">Khadamati</span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`font-medium transition-colors hover:text-khadamati-blue ${\n                  isActive(item.href) ? 'text-khadamati-blue' : 'text-khadamati-gray'\n                }`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </nav>\n\n          {/* Right Side Controls */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Switcher */}\n            <LanguageSwitcher\n              currentLanguage={currentLanguage}\n              onLanguageChange={onLanguageChange}\n              messages={messages}\n            />\n\n            {/* Notifications */}\n            {user && (\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                <Bell className=\"h-5 w-5\" />\n                <Badge className=\"absolute -top-1 -right-1 h-5 w-5 p-0 bg-khadamati-error text-white\">\n                  3\n                </Badge>\n              </Button>\n            )}\n\n            {/* User Menu */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <User className=\"h-5 w-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <Link href=\"/profile\">Profile</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Link href=\"/dashboard\">Dashboard</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Link href=\"/bookings\">My Bookings</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <button onClick={() => window.location.href = '/api/logout'}>Logout</button>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden md:flex items-center space-x-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-khadamati-blue text-khadamati-blue hover:bg-khadamati-blue hover:text-white\"\n                  onClick={() => window.location.href = '/api/login'}\n                >\n                  {messages.nav?.login || 'Login'}\n                </Button>\n                <Button \n                  className=\"bg-khadamati-blue hover:bg-blue-700\"\n                  onClick={() => window.location.href = '/api/login'}\n                >\n                  {messages.nav?.signup || 'Sign Up'}\n                </Button>\n              </div>\n            )}\n\n            {/* Mobile Menu */}\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {navItems.map((item) => (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      className={`text-lg font-medium transition-colors hover:text-khadamati-blue ${\n                        isActive(item.href) ? 'text-khadamati-blue' : 'text-khadamati-gray'\n                      }`}\n                      onClick={() => setIsOpen(false)}\n                    >\n                      {item.label}\n                    </Link>\n                  ))}\n                  \n                  {!user && (\n                    <div className=\"pt-4 border-t space-y-3\">\n                      <Link href=\"/login\" onClick={() => setIsOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full border-khadamati-blue text-khadamati-blue hover:bg-khadamati-blue hover:text-white\">\n                          {messages.nav?.login || 'Login'}\n                        </Button>\n                      </Link>\n                      <Link href=\"/signup\" onClick={() => setIsOpen(false)}>\n                        <Button className=\"w-full bg-khadamati-blue hover:bg-blue-700\">\n                          {messages.nav?.signup || 'Sign Up'}\n                        </Button>\n                      </Link>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7243},"frontend/src/components/services/ServiceCard.tsx":{"content":"import { Star, Clock, MapPin } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface ServiceCardProps {\n  id: number;\n  title: string;\n  description: string;\n  price: string;\n  priceType: string;\n  rating: number;\n  reviewCount: number;\n  provider: {\n    name: string;\n    image?: string;\n  };\n  location: string;\n  duration?: number;\n  category: string;\n  image?: string;\n  onBook?: () => void;\n  messages: any;\n}\n\nexport default function ServiceCard({\n  id,\n  title,\n  description,\n  price,\n  priceType,\n  rating,\n  reviewCount,\n  provider,\n  location,\n  duration,\n  category,\n  image,\n  onBook,\n  messages,\n}: ServiceCardProps) {\n  const formatPrice = (price: string, type: string) => {\n    const amount = parseFloat(price);\n    if (type === 'hourly') {\n      return `$${amount}/hr`;\n    } else if (type === 'fixed') {\n      return `$${amount}`;\n    }\n    return `$${amount}`;\n  };\n\n  return (\n    <Card className=\"card-hover bg-white rounded-2xl shadow-lg overflow-hidden border-0\">\n      {/* Service Image */}\n      {image && (\n        <div className=\"relative h-48 overflow-hidden\">\n          <img\n            src={image}\n            alt={title}\n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute top-4 left-4\">\n            <Badge variant=\"secondary\" className=\"bg-white text-khadamati-dark\">\n              {category}\n            </Badge>\n          </div>\n        </div>\n      )}\n\n      <CardContent className=\"p-6\">\n        {/* Service Info */}\n        <div className=\"flex justify-between items-start mb-3\">\n          <h3 className=\"text-xl font-semibold text-khadamati-dark line-clamp-2\">\n            {title}\n          </h3>\n          <span className=\"text-lg font-bold text-khadamati-blue ml-2\">\n            {formatPrice(price, priceType)}\n          </span>\n        </div>\n\n        <p className=\"text-khadamati-gray text-sm mb-4 line-clamp-2\">\n          {description}\n        </p>\n\n        {/* Service Details */}\n        <div className=\"flex items-center gap-4 mb-4 text-sm text-khadamati-gray\">\n          {duration && (\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{duration} min</span>\n            </div>\n          )}\n          {location && (\n            <div className=\"flex items-center gap-1\">\n              <MapPin className=\"h-4 w-4\" />\n              <span className=\"line-clamp-1\">{location}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Provider Info */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={provider.image} alt={provider.name} />\n              <AvatarFallback>\n                {provider.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"font-medium text-khadamati-dark text-sm\">\n                {provider.name}\n              </div>\n              <div className=\"flex items-center gap-1 text-xs text-khadamati-gray\">\n                <Star className=\"h-3 w-3 fill-khadamati-yellow text-khadamati-yellow\" />\n                <span>{rating}</span>\n                <span>({reviewCount} reviews)</span>\n              </div>\n            </div>\n          </div>\n\n          <Button\n            onClick={onBook}\n            className=\"bg-khadamati-blue hover:bg-blue-700 text-white\"\n            size=\"sm\"\n          >\n            {messages.services_page?.book || 'Book'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3850},"frontend/src/components/services/ServiceGrid.tsx":{"content":"import { useState } from 'react';\nimport { Search, Filter, SlidersHorizontal } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport ServiceCard from './ServiceCard';\n\ninterface ServiceGridProps {\n  services: any[];\n  categories: any[];\n  onServiceBook: (serviceId: number) => void;\n  messages: any;\n}\n\nexport default function ServiceGrid({ services, categories, onServiceBook, messages }: ServiceGridProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [priceRange, setPriceRange] = useState('all');\n  const [sortBy, setSortBy] = useState('rating');\n\n  const filteredServices = services.filter(service => {\n    const matchesSearch = service.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         service.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || service.category === selectedCategory;\n    const price = parseFloat(service.price);\n    const matchesPrice = priceRange === 'all' ||\n                        (priceRange === '0-25' && price <= 25) ||\n                        (priceRange === '25-50' && price > 25 && price <= 50) ||\n                        (priceRange === '50-100' && price > 50 && price <= 100) ||\n                        (priceRange === '100+' && price > 100);\n    \n    return matchesSearch && matchesCategory && matchesPrice;\n  });\n\n  const sortedServices = [...filteredServices].sort((a, b) => {\n    switch (sortBy) {\n      case 'rating':\n        return parseFloat(b.rating) - parseFloat(a.rating);\n      case 'price-low':\n        return parseFloat(a.price) - parseFloat(b.price);\n      case 'price-high':\n        return parseFloat(b.price) - parseFloat(a.price);\n      case 'newest':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      default:\n        return 0;\n    }\n  });\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Search and Filters */}\n      <Card className=\"bg-khadamati-light border-0\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-khadamati-gray\" />\n              <Input\n                placeholder={messages.services_page?.filter?.search || 'Search services...'}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder={messages.services_page?.filter?.category || 'Category'} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.name}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={priceRange} onValueChange={setPriceRange}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder={messages.services_page?.filter?.price || 'Price Range'} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Prices</SelectItem>\n                  <SelectItem value=\"0-25\">$0 - $25</SelectItem>\n                  <SelectItem value=\"25-50\">$25 - $50</SelectItem>\n                  <SelectItem value=\"50-100\">$50 - $100</SelectItem>\n                  <SelectItem value=\"100+\">$100+</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Results Count */}\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-khadamati-gray\">\n          {sortedServices.length} services found\n        </p>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n          <SlidersHorizontal className=\"h-4 w-4\" />\n          More Filters\n        </Button>\n      </div>\n\n      {/* Services Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {sortedServices.map((service) => (\n          <ServiceCard\n            key={service.id}\n            id={service.id}\n            title={service.title}\n            description={service.description}\n            price={service.price}\n            priceType={service.priceType}\n            rating={parseFloat(service.rating)}\n            reviewCount={service.reviewCount}\n            provider={service.provider}\n            location={service.location}\n            duration={service.duration}\n            category={service.category}\n            image={service.image}\n            onBook={() => onServiceBook(service.id)}\n            messages={messages}\n          />\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {sortedServices.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-24 h-24 bg-khadamati-light rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Search className=\"h-12 w-12 text-khadamati-gray\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-khadamati-dark mb-2\">\n            No services found\n          </h3>\n          <p className=\"text-khadamati-gray mb-4\">\n            Try adjusting your search criteria or filters\n          </p>\n          <Button onClick={() => {\n            setSearchTerm('');\n            setSelectedCategory('all');\n            setPriceRange('all');\n          }}>\n            Clear Filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6974},"frontend/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"frontend/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"frontend/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"frontend/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"frontend/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"frontend/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"frontend/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"frontend/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"frontend/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"frontend/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"frontend/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"frontend/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"frontend/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"frontend/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"frontend/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"frontend/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"frontend/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"frontend/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"frontend/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"frontend/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"frontend/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"frontend/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"frontend/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"frontend/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"frontend/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"frontend/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"frontend/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"frontend/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"frontend/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"frontend/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"frontend/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"frontend/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"frontend/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"frontend/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"frontend/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"frontend/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"frontend/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"frontend/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"frontend/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"frontend/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"frontend/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"frontend/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"frontend/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"frontend/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"frontend/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"frontend/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/ai.ts":{"content":"import OpenAI from 'openai';\nimport { Anthropic } from '@anthropic-ai/sdk';\nimport natural from 'natural';\nimport { Service, ServiceCategory, User } from '../shared/schema';\n\n// Initialize OpenAI\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n}) : null;\n\n// Initialize Anthropic (Claude)\nconst anthropic = process.env.ANTHROPIC_API_KEY ? new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n}) : null;\n\n// NLP Tokenizer for text analysis\nconst tokenizer = new natural.WordTokenizer();\nconst stemmer = natural.PorterStemmer;\n\nexport class AIService {\n  // Generate service recommendations based on user preferences and history\n  async generateServiceRecommendations(\n    userId: string,\n    userPreferences: any,\n    availableServices: Service[],\n    serviceCategories: ServiceCategory[]\n  ): Promise<Service[]> {\n    try {\n      if (!openai) {\n        console.warn('OpenAI not configured, using basic recommendations');\n        return this.generateBasicRecommendations(availableServices, userPreferences);\n      }\n\n      const prompt = `\n        As an AI assistant for a service marketplace, analyze the following user data and recommend the most suitable services:\n        \n        User Preferences: ${JSON.stringify(userPreferences)}\n        Available Services: ${JSON.stringify(availableServices.slice(0, 10))} // Limit for prompt size\n        Service Categories: ${JSON.stringify(serviceCategories)}\n        \n        Please recommend 5-8 services that best match the user's needs, considering:\n        - Location proximity\n        - Budget constraints\n        - Service ratings and reviews\n        - User's previous booking history\n        - Time availability\n        \n        Return a JSON array of service IDs ranked by relevance.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.7,\n        max_tokens: 1000,\n      });\n\n      const recommendations = JSON.parse(response.choices[0].message.content || '[]');\n      return availableServices.filter(service => recommendations.includes(service.id));\n    } catch (error) {\n      console.error('AI recommendation error:', error);\n      // Fallback to basic filtering\n      return this.generateBasicRecommendations(availableServices, userPreferences);\n    }\n  }\n\n  // Fallback basic recommendations when AI is not available\n  private generateBasicRecommendations(services: Service[], preferences: any): Service[] {\n    let filtered = [...services];\n    \n    // Filter by budget if provided\n    if (preferences.budget) {\n      filtered = filtered.filter(service => parseFloat(service.price) <= preferences.budget);\n    }\n    \n    // Sort by rating and review count\n    filtered.sort((a, b) => {\n      const aScore = parseFloat(a.rating || '0') * (a.reviewCount || 1);\n      const bScore = parseFloat(b.rating || '0') * (b.reviewCount || 1);\n      return bScore - aScore;\n    });\n    \n    return filtered.slice(0, 6);\n  }\n\n  // AI-powered chatbot for customer support\n  async chatbotResponse(\n    message: string,\n    context: {\n      userId?: string;\n      language: string;\n      conversationHistory?: Array<{ role: string; content: string }>;\n    }\n  ): Promise<string> {\n    try {\n      if (!openai) {\n        return this.generateFallbackResponse(message, context.language);\n      }\n\n      const systemPrompt = `You are Taskego AI Assistant, a helpful customer service chatbot for a bilingual service marketplace platform. \n\n      Your capabilities:\n      - Help users find services\n      - Assist with booking processes\n      - Answer questions about pricing and availability\n      - Provide support in both English and Arabic\n      - Handle complaints and feedback professionally\n      \n      Current language: ${context.language}\n      \n      Always respond in a friendly, professional manner and provide accurate information about our platform.`;\n\n      const messages = [\n        { role: \"system\", content: systemPrompt },\n        ...(context.conversationHistory || []),\n        { role: \"user\", content: message }\n      ];\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: messages as any,\n        temperature: 0.8,\n        max_tokens: 500,\n      });\n\n      return response.choices[0].message.content || \"I apologize, but I'm having trouble processing your request right now. Please try again.\";\n    } catch (error) {\n      console.error('Chatbot error:', error);\n      return this.generateFallbackResponse(message, context.language);\n    }\n  }\n\n  // Fallback responses when AI is not available\n  private generateFallbackResponse(message: string, language: string = 'en'): string {\n    const lowerMessage = message.toLowerCase();\n    \n    if (language === 'ar') {\n      if (lowerMessage.includes('booking') || lowerMessage.includes('حجز')) {\n        return 'مرحباً! يمكنك حجز الخدمات من خلال تصفح فئات الخدمات واختيار مقدم الخدمة المناسب. هل تحتاج مساعدة في العثور على خدمة معينة؟';\n      }\n      if (lowerMessage.includes('price') || lowerMessage.includes('سعر')) {\n        return 'الأسعار تختلف حسب نوع الخدمة ومقدم الخدمة. يمكنك مراجعة الأسعار في صفحة كل خدمة. هل تبحث عن خدمة محددة؟';\n      }\n      return 'مرحباً! أنا مساعد تاسكيجو الذكي. كيف يمكنني مساعدتك اليوم؟ يمكنني مساعدتك في العثور على الخدمات وإجراء الحجوزات.';\n    }\n    \n    if (lowerMessage.includes('booking')) {\n      return 'Hello! You can book services by browsing our service categories and selecting the right provider. Do you need help finding a specific service?';\n    }\n    if (lowerMessage.includes('price')) {\n      return 'Prices vary by service type and provider. You can check pricing on each service page. Are you looking for a specific service?';\n    }\n    return 'Hello! I\\'m Taskego AI Assistant. How can I help you today? I can assist you with finding services and making bookings.';\n  }\n\n  // Smart service matching based on natural language descriptions\n  async matchServicesByDescription(\n    description: string,\n    availableServices: Service[],\n    categories: ServiceCategory[]\n  ): Promise<{\n    matches: Service[];\n    confidence: number;\n    suggestions: string[];\n  }> {\n    try {\n      if (!openai) {\n        return this.generateBasicMatches(description, availableServices);\n      }\n\n      const prompt = `\n        Analyze this service request and match it with the most relevant services:\n        \n        User Request: \"${description}\"\n        Available Services: ${JSON.stringify(availableServices.map(s => ({\n          id: s.id,\n          title: s.title,\n          description: s.description,\n          category: s.categoryId\n        })))}\n        Categories: ${JSON.stringify(categories)}\n        \n        Return a JSON object with:\n        {\n          \"matchedServiceIds\": [array of service IDs],\n          \"confidence\": number (0-1),\n          \"suggestions\": [array of helpful suggestions for the user]\n        }\n      `;\n\n      const response = await openai!.chat.completions.create({\n        model: \"gpt-4\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.3,\n        max_tokens: 800,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        matches: availableServices.filter(service => \n          result.matchedServiceIds?.includes(service.id)\n        ),\n        confidence: result.confidence || 0.5,\n        suggestions: result.suggestions || []\n      };\n    } catch (error) {\n      console.error('Service matching error:', error);\n      return {\n        matches: [],\n        confidence: 0,\n        suggestions: ['Please try describing your service needs more specifically.']\n      };\n    }\n  }\n\n  // Basic fallback matching when AI is not available\n  private generateBasicMatches(description: string, services: Service[]): {\n    matches: Service[];\n    confidence: number;\n    suggestions: string[];\n  } {\n    const lowerDescription = description.toLowerCase();\n    const tokens = lowerDescription.split(/\\s+/);\n    \n    const matches = services.filter(service => {\n      const searchText = `${service.title} ${service.description}`.toLowerCase();\n      return tokens.some(token => searchText.includes(token));\n    });\n    \n    return {\n      matches: matches.slice(0, 5),\n      confidence: matches.length > 0 ? 0.6 : 0.1,\n      suggestions: matches.length === 0 ? \n        ['Try using more specific keywords', 'Browse our service categories', 'Contact support for help'] : \n        [`Found ${matches.length} matching services`]\n    };\n  }\n\n  // Generate dynamic pricing suggestions based on market analysis\n  async generatePricingSuggestions(\n    serviceType: string,\n    location: string,\n    duration: number,\n    competitorPrices: number[]\n  ): Promise<{\n    suggestedPrice: number;\n    priceRange: { min: number; max: number };\n    marketAnalysis: string;\n  }> {\n    try {\n      const prompt = `\n        As a pricing expert for service marketplaces, analyze the market and suggest optimal pricing:\n        \n        Service Type: ${serviceType}\n        Location: ${location}\n        Duration: ${duration} minutes\n        Competitor Prices: ${competitorPrices.join(', ')}\n        \n        Provide pricing analysis considering:\n        - Market competition\n        - Service complexity\n        - Location-based pricing variations\n        - Duration-based calculations\n        \n        Return JSON format:\n        {\n          \"suggestedPrice\": number,\n          \"priceRange\": {\"min\": number, \"max\": number},\n          \"marketAnalysis\": \"detailed analysis string\"\n        }\n      `;\n\n      if (!openai) {\n        throw new Error('OpenAI not configured');\n      }\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.4,\n        max_tokens: 600,\n      });\n\n      return JSON.parse(response.choices[0].message.content || '{}');\n    } catch (error) {\n      console.error('Pricing analysis error:', error);\n      const avgPrice = competitorPrices.reduce((a, b) => a + b, 0) / competitorPrices.length || 50;\n      return {\n        suggestedPrice: Math.round(avgPrice),\n        priceRange: { min: Math.round(avgPrice * 0.8), max: Math.round(avgPrice * 1.2) },\n        marketAnalysis: 'Basic pricing analysis based on competitor average.'\n      };\n    }\n  }\n\n  // Sentiment analysis for reviews and feedback\n  async analyzeSentiment(text: string): Promise<{\n    sentiment: 'positive' | 'negative' | 'neutral';\n    score: number;\n    keywords: string[];\n  }> {\n    try {\n      // Use Natural's built-in sentiment analyzer\n      const analyzer = new natural.SentimentAnalyzer('English', \n        natural.PorterStemmer, 'negation');\n      \n      const tokens = tokenizer.tokenize(text.toLowerCase());\n      const stemmedTokens = tokens?.map(token => stemmer.stem(token)) || [];\n      \n      const score = analyzer.getSentiment(stemmedTokens);\n      \n      let sentiment: 'positive' | 'negative' | 'neutral';\n      if (score > 0.1) sentiment = 'positive';\n      else if (score < -0.1) sentiment = 'negative';\n      else sentiment = 'neutral';\n\n      return {\n        sentiment,\n        score,\n        keywords: tokens?.slice(0, 5) || []\n      };\n    } catch (error) {\n      console.error('Sentiment analysis error:', error);\n      // Fallback to simple analysis\n      const positiveWords = ['good', 'great', 'excellent', 'amazing', 'love', 'perfect'];\n      const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'horrible', 'worst'];\n      \n      const lowerText = text.toLowerCase();\n      const hasPositive = positiveWords.some(word => lowerText.includes(word));\n      const hasNegative = negativeWords.some(word => lowerText.includes(word));\n      \n      let sentiment: 'positive' | 'negative' | 'neutral' = 'neutral';\n      let score = 0;\n      \n      if (hasPositive && !hasNegative) {\n        sentiment = 'positive';\n        score = 0.5;\n      } else if (hasNegative && !hasPositive) {\n        sentiment = 'negative';\n        score = -0.5;\n      }\n      \n      return {\n        sentiment,\n        score,\n        keywords: tokenizer.tokenize(text.toLowerCase())?.slice(0, 5) || []\n      };\n    }\n  }\n\n  // Generate automated responses for common queries\n  async generateAutoResponse(\n    query: string,\n    queryType: 'booking' | 'pricing' | 'availability' | 'support' | 'general',\n    context: any = {}\n  ): Promise<string> {\n    try {\n      const systemPrompts = {\n        booking: \"You are helping users with booking-related questions. Be specific about the booking process.\",\n        pricing: \"You are answering pricing questions. Always be transparent about costs and any additional fees.\",\n        availability: \"You are helping users check service availability. Provide clear scheduling information.\",\n        support: \"You are providing customer support. Be empathetic and solution-focused.\",\n        general: \"You are a general assistant for the Taskego platform. Be helpful and informative.\"\n      };\n\n      if (!openai) {\n        throw new Error('OpenAI not configured');\n      }\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          { role: \"system\", content: systemPrompts[queryType] },\n          { role: \"user\", content: query }\n        ],\n        temperature: 0.7,\n        max_tokens: 300,\n      });\n\n      return response.choices[0].message.content || \"I'd be happy to help you with that. Could you provide more details?\";\n    } catch (error) {\n      console.error('Auto-response error:', error);\n      return \"Thank you for your question. Our team will get back to you soon.\";\n    }\n  }\n\n  // Quality assessment for service provider profiles\n  async assessProviderProfile(provider: User, services: Service[]): Promise<{\n    score: number;\n    recommendations: string[];\n    strengths: string[];\n    improvementAreas: string[];\n  }> {\n    try {\n      const prompt = `\n        Analyze this service provider profile and provide quality assessment:\n        \n        Provider: ${JSON.stringify({\n          firstName: provider.firstName,\n          lastName: provider.lastName,\n          role: provider.role,\n          isVerified: provider.isVerified\n        })}\n        \n        Services: ${JSON.stringify(services.map(s => ({\n          title: s.title,\n          description: s.description,\n          rating: s.rating,\n          reviewCount: s.reviewCount\n        })))}\n        \n        Provide assessment with:\n        - Overall quality score (0-100)\n        - Key strengths\n        - Areas for improvement\n        - Specific recommendations\n        \n        Return JSON format.\n      `;\n\n      if (!openai) {\n        throw new Error('OpenAI not configured');\n      }\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.3,\n        max_tokens: 800,\n      });\n\n      return JSON.parse(response.choices[0].message.content || '{}');\n    } catch (error) {\n      console.error('Profile assessment error:', error);\n      return {\n        score: 75,\n        recommendations: ['Complete your profile information', 'Add more service descriptions'],\n        strengths: ['Verified account'],\n        improvementAreas: ['Profile completeness']\n      };\n    }\n  }\n}\n\nexport const aiService = new AIService();","size_bytes":15770},"server/app.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst swaggerJSDoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\nconst connectDB = require('./config/database');\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst aiRoutes = require('./routes/ai');\nconst paymentRoutes = require('./routes/payment');\n\nconst app = express();\n\n// Connect to MongoDB\nconnectDB();\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n    },\n  },\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:5000',\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Accept-Language']\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    error: 'Too many requests from this IP, please try again later.'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\napp.use('/api/', limiter);\n\n// Stricter rate limiting for AI endpoints\nconst aiLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 20, // limit each IP to 20 AI requests per minute\n  message: {\n    error: 'Too many AI requests, please slow down.'\n  }\n});\napp.use('/api/ai/', aiLimiter);\napp.use('/api/chat-ai/', aiLimiter);\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Language detection middleware\napp.use((req, res, next) => {\n  const acceptLanguage = req.headers['accept-language'];\n  req.language = acceptLanguage?.includes('ar') ? 'ar' : 'en';\n  next();\n});\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const timestamp = new Date().toISOString();\n  console.log(`${timestamp} - ${req.method} ${req.path} - IP: ${req.ip}`);\n  next();\n});\n\n// Swagger configuration\nconst swaggerOptions = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Taskego API',\n      version: '1.0.0',\n      description: 'Bilingual AI-powered service marketplace API',\n      contact: {\n        name: 'Taskego Support',\n        email: 'support@taskego.com'\n      }\n    },\n    servers: [\n      {\n        url: process.env.API_BASE_URL || 'http://localhost:5000/api',\n        description: 'Development server'\n      }\n    ],\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT'\n        }\n      }\n    }\n  },\n  apis: ['./routes/*.js', './controllers/*.js']\n};\n\nconst swaggerSpec = swaggerJSDoc(swaggerOptions);\n\n// API Documentation\napp.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec, {\n  explorer: true,\n  customCss: '.swagger-ui .topbar { display: none }'\n}));\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV || 'development',\n    version: '1.0.0'\n  });\n});\n\n// API Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/ai', aiRoutes);\napp.use('/api/chat-ai', aiRoutes); // Alternative endpoint for chat\napp.use('/api/payments', paymentRoutes);\n\n// 404 handler for API routes\napp.use('/api/*', (req, res) => {\n  res.status(404).json({\n    message: 'API endpoint not found',\n    path: req.path,\n    method: req.method\n  });\n});\n\n// Global error handler\napp.use((error, req, res, next) => {\n  console.error('Global error handler:', error);\n\n  // Mongoose validation error\n  if (error.name === 'ValidationError') {\n    const errors = Object.values(error.errors).map(err => err.message);\n    return res.status(400).json({\n      message: 'Validation Error',\n      errors\n    });\n  }\n\n  // Mongoose duplicate key error\n  if (error.code === 11000) {\n    const field = Object.keys(error.keyValue)[0];\n    return res.status(400).json({\n      message: `${field} already exists`,\n      field\n    });\n  }\n\n  // JWT errors\n  if (error.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      message: 'Invalid token'\n    });\n  }\n\n  if (error.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      message: 'Token expired'\n    });\n  }\n\n  // Default server error\n  res.status(error.status || 500).json({\n    message: process.env.NODE_ENV === 'production' \n      ? 'Internal server error' \n      : error.message,\n    ...(process.env.NODE_ENV !== 'production' && { stack: error.stack })\n  });\n});\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM received, shutting down gracefully');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT received, shutting down gracefully');\n  process.exit(0);\n});\n\nmodule.exports = app;","size_bytes":5165},"server/config/ai.js":{"content":"const { GoogleGenerativeAI } = require('@google/generative-ai');\n\nlet genAI;\n\n// Initialize Gemini AI with API key\nif (process.env.GEMINI_API_KEY) {\n  genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n}\n\nconst getGeminiModel = () => {\n  if (!genAI) {\n    throw new Error('Gemini API not initialized. Please set GEMINI_API_KEY environment variable.');\n  }\n  return genAI.getGenerativeModel({ model: 'gemini-pro' });\n};\n\n// Fallback NLP functions when Gemini is not available\nconst fallbackNLP = {\n  // Simple keyword matching for service recommendations\n  findServices: (query, services) => {\n    const keywords = query.toLowerCase().split(' ');\n    return services.filter(service => {\n      const searchText = `${service.title} ${service.description} ${service.category}`.toLowerCase();\n      return keywords.some(keyword => searchText.includes(keyword));\n    });\n  },\n\n  // Basic sentiment analysis using simple word lists\n  analyzeSentiment: (text) => {\n    const positiveWords = ['good', 'great', 'excellent', 'amazing', 'perfect', 'love', 'best'];\n    const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'worst', 'horrible', 'disappointing'];\n    \n    const words = text.toLowerCase().split(' ');\n    let positive = 0, negative = 0;\n    \n    words.forEach(word => {\n      if (positiveWords.includes(word)) positive++;\n      if (negativeWords.includes(word)) negative++;\n    });\n    \n    if (positive > negative) return 'positive';\n    if (negative > positive) return 'negative';\n    return 'neutral';\n  },\n\n  // Generate basic chatbot responses\n  generateResponse: (message, language = 'en') => {\n    const responses = {\n      en: {\n        greeting: \"Hello! I'm Taskego AI Assistant. How can I help you today?\",\n        booking: \"I can help you book services. What type of service are you looking for?\",\n        pricing: \"Prices vary by service and provider. You can check specific pricing on each service page.\",\n        default: \"I'm here to help! You can ask me about services, bookings, or any questions about Taskego.\"\n      },\n      ar: {\n        greeting: \"مرحباً! أنا مساعد تاسكيجو الذكي. كيف يمكنني مساعدتك اليوم؟\",\n        booking: \"يمكنني مساعدتك في حجز الخدمات. ما نوع الخدمة التي تبحث عنها؟\",\n        pricing: \"الأسعار تختلف حسب الخدمة ومقدم الخدمة. يمكنك مراجعة الأسعار في صفحة كل خدمة.\",\n        default: \"أنا هنا للمساعدة! يمكنك سؤالي عن الخدمات أو الحجوزات أو أي أسئلة حول تاسكيجو.\"\n      }\n    };\n\n    const lang = responses[language] || responses.en;\n    const msg = message.toLowerCase();\n\n    if (msg.includes('hello') || msg.includes('hi') || msg.includes('مرحبا')) {\n      return lang.greeting;\n    }\n    if (msg.includes('book') || msg.includes('حجز')) {\n      return lang.booking;\n    }\n    if (msg.includes('price') || msg.includes('سعر')) {\n      return lang.pricing;\n    }\n    \n    return lang.default;\n  }\n};\n\nmodule.exports = {\n  getGeminiModel,\n  fallbackNLP,\n  isGeminiAvailable: () => !!genAI\n};","size_bytes":3182},"server/config/database.js":{"content":"const mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    // Use MongoDB connection string from environment or fallback to local\n    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/taskego';\n    \n    const conn = await mongoose.connect(mongoURI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('Database connection error:', error);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;","size_bytes":561},"server/controllers/aiController.js":{"content":"const { getGeminiModel, fallbackNLP, isGeminiAvailable } = require('../config/ai');\nconst Service = require('../models/Service');\nconst User = require('../models/User');\nconst Review = require('../models/Review');\nconst Booking = require('../models/Booking');\n\n// AI-powered chat endpoint\nconst chatWithAI = async (req, res) => {\n  try {\n    const { message, language = 'en', conversationHistory = [] } = req.body;\n    const userId = req.user?._id;\n\n    let response;\n\n    if (isGeminiAvailable()) {\n      try {\n        const model = getGeminiModel();\n        \n        // Build conversation context\n        const conversationContext = conversationHistory.map(msg => \n          `${msg.role}: ${msg.content}`\n        ).join('\\n');\n\n        const systemPrompt = `You are Taskego AI Assistant, a helpful customer service chatbot for a bilingual service marketplace platform in Lebanon and the Middle East.\n\nYour capabilities:\n- Help users find services across categories: maintenance, cleaning, delivery, events, care, gardens, auto, tech, admin\n- Assist with booking processes and pricing inquiries\n- Provide support in both English and Arabic\n- Handle complaints and feedback professionally\n- Suggest relevant services based on user needs\n\nCurrent language: ${language}\nUser context: ${userId ? 'Logged in user' : 'Guest user'}\nConversation history: ${conversationContext}\n\nGuidelines:\n- Always respond in ${language === 'ar' ? 'Arabic' : 'English'}\n- Be helpful, professional, and friendly\n- If asked about specific services, suggest browsing categories or searching\n- For booking help, guide users through the process\n- Keep responses concise but informative\n\nUser message: ${message}`;\n\n        const result = await model.generateContent(systemPrompt);\n        response = result.response.text();\n\n      } catch (geminiError) {\n        console.error('Gemini API error:', geminiError);\n        // Fallback to local NLP\n        response = fallbackNLP.generateResponse(message, language);\n      }\n    } else {\n      // Use fallback NLP\n      response = fallbackNLP.generateResponse(message, language);\n    }\n\n    // Log the conversation if user is logged in\n    if (userId) {\n      // In a real app, you might want to store conversation history in the database\n      console.log(`User ${userId} chatted: ${message}`);\n    }\n\n    res.json({\n      response,\n      aiProvider: isGeminiAvailable() ? 'gemini' : 'fallback',\n      language,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Chat AI error:', error);\n    res.status(500).json({\n      message: 'AI chat service temporarily unavailable',\n      error: error.message\n    });\n  }\n};\n\n// Smart service recommendations\nconst getServiceRecommendations = async (req, res) => {\n  try {\n    const { query, location, budget, category, language = 'en' } = req.body;\n    const userId = req.user?._id;\n\n    // Get available services\n    let services = await Service.find({ \n      status: 'approved', \n      isActive: true \n    }).populate('providerId', 'name rating location');\n\n    // Apply basic filters\n    if (category) {\n      services = services.filter(service => service.category === category);\n    }\n\n    if (budget) {\n      services = services.filter(service => service.price <= budget);\n    }\n\n    if (location?.city) {\n      services = services.filter(service => \n        service.location.city.toLowerCase().includes(location.city.toLowerCase())\n      );\n    }\n\n    let recommendations;\n\n    if (query && isGeminiAvailable()) {\n      try {\n        const model = getGeminiModel();\n        \n        const servicesSummary = services.map(s => ({\n          id: s._id,\n          title: language === 'ar' ? s.title_ar || s.title : s.title,\n          description: language === 'ar' ? s.description_ar || s.description : s.description,\n          category: s.category,\n          price: s.price,\n          rating: s.rating.average,\n          location: s.location.city\n        }));\n\n        const prompt = `Analyze this service request and recommend the most suitable services:\n\nUser Query: \"${query}\"\nUser Location: ${location?.city || 'Not specified'}\nBudget: ${budget || 'Not specified'}\nLanguage: ${language}\n\nAvailable Services: ${JSON.stringify(servicesSummary)}\n\nPlease provide:\n1. Top 3-5 most relevant services with reasons\n2. Brief explanation of why each service matches\n3. Any additional suggestions or tips\n\nRespond in ${language === 'ar' ? 'Arabic' : 'English'}.`;\n\n        const result = await model.generateContent(prompt);\n        const aiResponse = result.response.text();\n\n        // Extract service IDs from AI response (basic implementation)\n        const recommendedIds = servicesSummary\n          .filter(service => aiResponse.includes(service.id.toString()))\n          .map(service => service.id);\n\n        recommendations = services.filter(service => \n          recommendedIds.includes(service._id.toString())\n        ).slice(0, 5);\n\n        res.json({\n          recommendations,\n          aiExplanation: aiResponse,\n          totalAvailable: services.length,\n          aiProvider: 'gemini'\n        });\n\n      } catch (geminiError) {\n        console.error('Gemini recommendation error:', geminiError);\n        // Fallback to simple matching\n        recommendations = fallbackNLP.findServices(query, services);\n        \n        res.json({\n          recommendations: recommendations.slice(0, 5),\n          totalAvailable: services.length,\n          aiProvider: 'fallback'\n        });\n      }\n    } else {\n      // Simple filtering and sorting\n      if (query) {\n        recommendations = fallbackNLP.findServices(query, services);\n      } else {\n        recommendations = services.sort((a, b) => b.rating.average - a.rating.average);\n      }\n\n      res.json({\n        recommendations: recommendations.slice(0, 10),\n        totalAvailable: services.length,\n        aiProvider: 'basic'\n      });\n    }\n\n  } catch (error) {\n    console.error('Service recommendations error:', error);\n    res.status(500).json({\n      message: 'Failed to get service recommendations',\n      error: error.message\n    });\n  }\n};\n\n// Analyze review sentiment\nconst analyzeReviewSentiment = async (req, res) => {\n  try {\n    const { text, language = 'en' } = req.body;\n\n    let sentiment, confidence, keywords;\n\n    if (isGeminiAvailable()) {\n      try {\n        const model = getGeminiModel();\n        \n        const prompt = `Analyze the sentiment of this review text:\n\nReview: \"${text}\"\nLanguage: ${language}\n\nPlease provide:\n1. Sentiment: positive, negative, or neutral\n2. Confidence: 0.0 to 1.0\n3. Key topics/keywords mentioned\n4. Brief explanation\n\nReturn as JSON format.`;\n\n        const result = await model.generateContent(prompt);\n        const aiResponse = result.response.text();\n        \n        // Parse AI response (basic implementation)\n        sentiment = fallbackNLP.analyzeSentiment(text);\n        confidence = 0.8; // Mock confidence for AI analysis\n        keywords = text.toLowerCase().split(' ').slice(0, 5);\n\n      } catch (geminiError) {\n        console.error('Gemini sentiment analysis error:', geminiError);\n        sentiment = fallbackNLP.analyzeSentiment(text);\n        confidence = 0.6;\n        keywords = text.toLowerCase().split(' ').slice(0, 5);\n      }\n    } else {\n      sentiment = fallbackNLP.analyzeSentiment(text);\n      confidence = 0.6;\n      keywords = text.toLowerCase().split(' ').slice(0, 5);\n    }\n\n    res.json({\n      sentiment,\n      confidence,\n      keywords,\n      aiProvider: isGeminiAvailable() ? 'gemini' : 'fallback'\n    });\n\n  } catch (error) {\n    console.error('Sentiment analysis error:', error);\n    res.status(500).json({\n      message: 'Sentiment analysis failed',\n      error: error.message\n    });\n  }\n};\n\n// Smart pricing suggestions for providers\nconst getPricingSuggestions = async (req, res) => {\n  try {\n    const { category, subcategory, location, serviceDetails } = req.body;\n\n    // Get similar services for price comparison\n    const similarServices = await Service.find({\n      category,\n      subcategory: { $regex: subcategory, $options: 'i' },\n      status: 'approved',\n      isActive: true\n    });\n\n    if (similarServices.length === 0) {\n      return res.json({\n        message: 'No similar services found for price comparison',\n        suggestedPrice: null\n      });\n    }\n\n    const prices = similarServices.map(s => s.price);\n    const avgPrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;\n    const minPrice = Math.min(...prices);\n    const maxPrice = Math.max(...prices);\n\n    let aiSuggestion;\n\n    if (isGeminiAvailable() && serviceDetails) {\n      try {\n        const model = getGeminiModel();\n        \n        const prompt = `Analyze pricing for this service:\n\nCategory: ${category}\nSubcategory: ${subcategory}\nLocation: ${location?.city || 'Not specified'}\nService Details: ${serviceDetails}\n\nMarket Data:\n- Average Price: $${avgPrice.toFixed(2)}\n- Price Range: $${minPrice.toFixed(2)} - $${maxPrice.toFixed(2)}\n- Number of Competitors: ${similarServices.length}\n\nProvide pricing recommendations considering:\n1. Market positioning (budget, standard, premium)\n2. Location factors\n3. Service complexity\n4. Competitive advantage\n\nSuggest optimal pricing strategy.`;\n\n        const result = await model.generateContent(prompt);\n        aiSuggestion = result.response.text();\n\n      } catch (geminiError) {\n        console.error('Gemini pricing error:', geminiError);\n        aiSuggestion = null;\n      }\n    }\n\n    res.json({\n      marketAnalysis: {\n        averagePrice: avgPrice.toFixed(2),\n        priceRange: {\n          min: minPrice.toFixed(2),\n          max: maxPrice.toFixed(2)\n        },\n        competitorCount: similarServices.length\n      },\n      recommendations: {\n        competitive: (avgPrice * 0.9).toFixed(2),\n        market: avgPrice.toFixed(2),\n        premium: (avgPrice * 1.2).toFixed(2)\n      },\n      aiSuggestion,\n      aiProvider: isGeminiAvailable() ? 'gemini' : 'basic'\n    });\n\n  } catch (error) {\n    console.error('Pricing suggestions error:', error);\n    res.status(500).json({\n      message: 'Failed to get pricing suggestions',\n      error: error.message\n    });\n  }\n};\n\nmodule.exports = {\n  chatWithAI,\n  getServiceRecommendations,\n  analyzeReviewSentiment,\n  getPricingSuggestions\n};","size_bytes":10304},"server/controllers/authController.js":{"content":"const User = require('../models/User');\nconst Wallet = require('../models/Wallet');\nconst { generateToken } = require('../middleware/auth');\nconst crypto = require('crypto');\nconst nodemailer = require('nodemailer');\n\n// Email transporter setup (configure with your email service)\nconst transporter = nodemailer.createTransporter({\n  // Configure with your email service (Gmail, SendGrid, etc.)\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS\n  }\n});\n\n// User registration\nconst signup = async (req, res) => {\n  try {\n    const { name, email, phone, password, role = 'client', language = 'en' } = req.body;\n\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      $or: [{ email }, { phone }]\n    });\n\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'User already exists with this email or phone number'\n      });\n    }\n\n    // Generate verification token\n    const verificationToken = crypto.randomBytes(32).toString('hex');\n\n    // Create user\n    const user = new User({\n      name,\n      email,\n      phone,\n      passwordHash: password, // Will be hashed by pre-save middleware\n      role,\n      language,\n      verificationToken\n    });\n\n    await user.save();\n\n    // Create wallet for the user\n    const wallet = new Wallet({\n      userId: user._id\n    });\n    await wallet.save();\n\n    // Generate JWT token\n    const token = generateToken(user._id);\n\n    // Send verification email (if email service is configured)\n    try {\n      if (process.env.EMAIL_USER) {\n        const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/verify/${verificationToken}`;\n        \n        await transporter.sendMail({\n          from: process.env.EMAIL_USER,\n          to: email,\n          subject: 'Verify your Taskego account',\n          html: `\n            <h2>Welcome to Taskego!</h2>\n            <p>Please click the link below to verify your email address:</p>\n            <a href=\"${verificationUrl}\">Verify Email</a>\n            <p>This link will expire in 24 hours.</p>\n          `\n        });\n      }\n    } catch (emailError) {\n      console.error('Email sending failed:', emailError);\n      // Don't fail registration if email fails\n    }\n\n    res.status(201).json({\n      message: 'User registered successfully',\n      token,\n      user: user.toJSON()\n    });\n\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({\n      message: 'Registration failed',\n      error: error.message\n    });\n  }\n};\n\n// User login\nconst login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Find user by email\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({\n        message: 'Invalid email or password'\n      });\n    }\n\n    // Check if user is blocked\n    if (user.isBlocked) {\n      return res.status(403).json({\n        message: 'Account is blocked. Please contact support.'\n      });\n    }\n\n    // Verify password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      return res.status(401).json({\n        message: 'Invalid email or password'\n      });\n    }\n\n    // Generate JWT token\n    const token = generateToken(user._id);\n\n    res.json({\n      message: 'Login successful',\n      token,\n      user: user.toJSON()\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      message: 'Login failed',\n      error: error.message\n    });\n  }\n};\n\n// Email verification\nconst verifyEmail = async (req, res) => {\n  try {\n    const { token } = req.params;\n\n    const user = await User.findOne({ verificationToken: token });\n    if (!user) {\n      return res.status(400).json({\n        message: 'Invalid or expired verification token'\n      });\n    }\n\n    user.isVerified = true;\n    user.verificationToken = undefined;\n    await user.save();\n\n    res.json({\n      message: 'Email verified successfully'\n    });\n\n  } catch (error) {\n    console.error('Email verification error:', error);\n    res.status(500).json({\n      message: 'Email verification failed',\n      error: error.message\n    });\n  }\n};\n\n// Password reset request\nconst requestPasswordReset = async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    const user = await User.findOne({ email });\n    if (!user) {\n      // Don't reveal if user exists for security\n      return res.json({\n        message: 'If an account with this email exists, a password reset link has been sent.'\n      });\n    }\n\n    // Generate reset token\n    const resetToken = crypto.randomBytes(32).toString('hex');\n    user.resetPasswordToken = resetToken;\n    user.resetPasswordExpires = Date.now() + 3600000; // 1 hour\n    await user.save();\n\n    // Send reset email (if email service is configured)\n    try {\n      if (process.env.EMAIL_USER) {\n        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/reset-password/${resetToken}`;\n        \n        await transporter.sendMail({\n          from: process.env.EMAIL_USER,\n          to: email,\n          subject: 'Password Reset - Taskego',\n          html: `\n            <h2>Password Reset Request</h2>\n            <p>You requested a password reset. Click the link below to reset your password:</p>\n            <a href=\"${resetUrl}\">Reset Password</a>\n            <p>This link will expire in 1 hour.</p>\n            <p>If you didn't request this, please ignore this email.</p>\n          `\n        });\n      }\n    } catch (emailError) {\n      console.error('Password reset email failed:', emailError);\n    }\n\n    res.json({\n      message: 'If an account with this email exists, a password reset link has been sent.'\n    });\n\n  } catch (error) {\n    console.error('Password reset request error:', error);\n    res.status(500).json({\n      message: 'Password reset request failed',\n      error: error.message\n    });\n  }\n};\n\n// Reset password\nconst resetPassword = async (req, res) => {\n  try {\n    const { token, password } = req.body;\n\n    const user = await User.findOne({\n      resetPasswordToken: token,\n      resetPasswordExpires: { $gt: Date.now() }\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        message: 'Invalid or expired reset token'\n      });\n    }\n\n    user.passwordHash = password; // Will be hashed by pre-save middleware\n    user.resetPasswordToken = undefined;\n    user.resetPasswordExpires = undefined;\n    await user.save();\n\n    res.json({\n      message: 'Password reset successful'\n    });\n\n  } catch (error) {\n    console.error('Password reset error:', error);\n    res.status(500).json({\n      message: 'Password reset failed',\n      error: error.message\n    });\n  }\n};\n\n// Get current user\nconst getCurrentUser = async (req, res) => {\n  try {\n    res.json({\n      user: req.user.toJSON()\n    });\n  } catch (error) {\n    console.error('Get current user error:', error);\n    res.status(500).json({\n      message: 'Failed to get user data',\n      error: error.message\n    });\n  }\n};\n\nmodule.exports = {\n  signup,\n  login,\n  verifyEmail,\n  requestPasswordReset,\n  resetPassword,\n  getCurrentUser\n};","size_bytes":7183},"server/controllers/paymentController.js":{"content":"const Payment = require('../models/Payment');\nconst Booking = require('../models/Booking');\nconst Wallet = require('../models/Wallet');\nconst User = require('../models/User');\nconst crypto = require('crypto');\n\n// Apple Pay Configuration\nconst APPLE_PAY_CONFIG = {\n  merchantId: process.env.APPLE_PAY_MERCHANT_ID || 'merchant.com.taskego.app',\n  merchantName: 'Taskego',\n  countryCode: 'LB', // Lebanon\n  currencyCode: 'USD',\n  supportedNetworks: ['visa', 'masterCard', 'amex', 'discover'],\n  merchantCapabilities: ['supports3DS', 'supportsEMV', 'supportsCredit', 'supportsDebit'],\n  supportedCountries: ['LB', 'US', 'CA', 'AE', 'SA']\n};\n\n// Initialize Apple Pay session\nconst createApplePaySession = async (req, res) => {\n  try {\n    const { validationURL, domain } = req.body;\n    \n    // Validate domain (security check)\n    const allowedDomains = [\n      'localhost:5000',\n      'taskego.replit.app',\n      process.env.FRONTEND_DOMAIN\n    ].filter(Boolean);\n    \n    if (!allowedDomains.some(allowedDomain => domain.includes(allowedDomain))) {\n      return res.status(400).json({\n        message: 'Invalid domain for Apple Pay session'\n      });\n    }\n\n    // In production, you would validate with Apple's servers\n    // For now, we'll return a mock session for development\n    const merchantSession = {\n      epochTimestamp: Date.now(),\n      expiresAt: Date.now() + (5 * 60 * 1000), // 5 minutes\n      merchantSessionIdentifier: crypto.randomUUID(),\n      nonce: crypto.randomBytes(16).toString('hex'),\n      merchantIdentifier: APPLE_PAY_CONFIG.merchantId,\n      domainName: domain,\n      displayName: APPLE_PAY_CONFIG.merchantName,\n      signature: 'mock_signature_for_development'\n    };\n\n    res.json({\n      merchantSession,\n      config: APPLE_PAY_CONFIG\n    });\n\n  } catch (error) {\n    console.error('Apple Pay session creation error:', error);\n    res.status(500).json({\n      message: 'Failed to create Apple Pay session',\n      error: error.message\n    });\n  }\n};\n\n// Process Apple Pay payment\nconst processApplePayment = async (req, res) => {\n  try {\n    const { \n      paymentData, \n      paymentMethod, \n      transactionIdentifier,\n      bookingId,\n      amount,\n      currency = 'USD'\n    } = req.body;\n    \n    const userId = req.user._id;\n\n    // Validate booking if provided\n    let booking;\n    if (bookingId) {\n      booking = await Booking.findById(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: 'Booking not found' });\n      }\n      \n      if (booking.clientId.toString() !== userId.toString()) {\n        return res.status(403).json({ message: 'Unauthorized booking access' });\n      }\n    }\n\n    // Calculate processing fee (Apple Pay typically charges 2.9% + $0.30)\n    const processingFee = Math.round((amount * 0.029 + 0.30) * 100) / 100;\n\n    // Create payment record\n    const payment = new Payment({\n      userId,\n      bookingId,\n      amount,\n      currency,\n      paymentMethod: 'apple_pay',\n      status: 'processing',\n      processingFee,\n      description: booking ? `Payment for booking #${booking._id}` : 'Wallet recharge',\n      applePayment: {\n        transactionIdentifier,\n        paymentData,\n        paymentMethod: {\n          displayName: paymentMethod.displayName,\n          network: paymentMethod.network,\n          type: paymentMethod.type\n        }\n      },\n      metadata: {\n        userAgent: req.headers['user-agent'],\n        ipAddress: req.ip\n      }\n    });\n\n    await payment.save();\n\n    // In production, you would process the payment with Apple Pay\n    // For now, we'll simulate successful processing\n    setTimeout(async () => {\n      try {\n        payment.status = 'completed';\n        payment.processedAt = new Date();\n        await payment.save();\n\n        // Update booking status if this is a booking payment\n        if (booking) {\n          booking.paymentStatus = 'paid';\n          booking.status = 'accepted';\n          booking.addSystemLog('payment_completed', `Apple Pay payment completed: ${payment.receiptNumber}`);\n          await booking.save();\n        } else {\n          // This is a wallet recharge\n          const wallet = await Wallet.findOne({ userId });\n          if (wallet) {\n            await wallet.addTransaction({\n              type: 'recharge',\n              amount: payment.netAmount,\n              description: `Apple Pay recharge - ${payment.receiptNumber}`,\n              status: 'completed',\n              paymentMethod: 'apple_pay',\n              externalTransactionId: payment._id\n            });\n          }\n        }\n\n        console.log(`Apple Pay payment completed: ${payment.receiptNumber}`);\n      } catch (error) {\n        console.error('Apple Pay post-processing error:', error);\n        payment.status = 'failed';\n        payment.failureReason = error.message;\n        await payment.save();\n      }\n    }, 2000); // Simulate processing delay\n\n    res.json({\n      message: 'Apple Pay payment initiated successfully',\n      paymentId: payment._id,\n      receiptNumber: payment.receiptNumber,\n      status: payment.status,\n      processingFee,\n      netAmount: payment.netAmount\n    });\n\n  } catch (error) {\n    console.error('Apple Pay processing error:', error);\n    res.status(500).json({\n      message: 'Apple Pay payment failed',\n      error: error.message\n    });\n  }\n};\n\n// Create payment intent for any payment method\nconst createPaymentIntent = async (req, res) => {\n  try {\n    const { \n      amount, \n      currency = 'USD',\n      paymentMethod,\n      bookingId,\n      description \n    } = req.body;\n    \n    const userId = req.user._id;\n\n    // Validate booking if provided\n    let booking;\n    if (bookingId) {\n      booking = await Booking.findById(bookingId);\n      if (!booking || booking.clientId.toString() !== userId.toString()) {\n        return res.status(404).json({ message: 'Booking not found or unauthorized' });\n      }\n    }\n\n    // Calculate processing fees based on payment method\n    let processingFee = 0;\n    switch (paymentMethod) {\n      case 'apple_pay':\n        processingFee = Math.round((amount * 0.029 + 0.30) * 100) / 100;\n        break;\n      case 'card':\n        processingFee = Math.round((amount * 0.029 + 0.30) * 100) / 100;\n        break;\n      case 'bank_transfer':\n        processingFee = Math.round(amount * 0.01 * 100) / 100; // 1% for bank transfers\n        break;\n      case 'wallet':\n        processingFee = 0; // No fee for wallet payments\n        break;\n      default:\n        processingFee = 0;\n    }\n\n    // Create payment intent\n    const paymentIntent = {\n      intentId: crypto.randomUUID(),\n      clientSecret: crypto.randomBytes(32).toString('hex'),\n      paymentProvider: paymentMethod === 'apple_pay' ? 'apple_pay' : 'stripe'\n    };\n\n    // Create payment record\n    const payment = new Payment({\n      userId,\n      bookingId,\n      amount,\n      currency,\n      paymentMethod,\n      status: 'pending',\n      processingFee,\n      description: description || (booking ? `Payment for booking #${booking._id}` : 'Payment'),\n      paymentIntent,\n      metadata: {\n        userAgent: req.headers['user-agent'],\n        ipAddress: req.ip\n      }\n    });\n\n    await payment.save();\n\n    res.json({\n      paymentIntentId: payment._id,\n      clientSecret: paymentIntent.clientSecret,\n      amount,\n      currency,\n      processingFee,\n      netAmount: payment.netAmount,\n      paymentMethod,\n      applePayConfig: paymentMethod === 'apple_pay' ? APPLE_PAY_CONFIG : undefined\n    });\n\n  } catch (error) {\n    console.error('Payment intent creation error:', error);\n    res.status(500).json({\n      message: 'Failed to create payment intent',\n      error: error.message\n    });\n  }\n};\n\n// Get payment history\nconst getPaymentHistory = async (req, res) => {\n  try {\n    const userId = req.user._id;\n    const { page = 1, limit = 20, status, paymentMethod } = req.query;\n\n    const query = { userId };\n    if (status) query.status = status;\n    if (paymentMethod) query.paymentMethod = paymentMethod;\n\n    const payments = await Payment.find(query)\n      .populate('bookingId', 'serviceId date status')\n      .sort({ createdAt: -1 })\n      .skip((page - 1) * limit)\n      .limit(parseInt(limit));\n\n    const totalCount = await Payment.countDocuments(query);\n\n    res.json({\n      payments,\n      pagination: {\n        currentPage: parseInt(page),\n        totalPages: Math.ceil(totalCount / limit),\n        totalCount,\n        hasMore: page * limit < totalCount\n      }\n    });\n\n  } catch (error) {\n    console.error('Payment history error:', error);\n    res.status(500).json({\n      message: 'Failed to get payment history',\n      error: error.message\n    });\n  }\n};\n\n// Get payment details\nconst getPaymentDetails = async (req, res) => {\n  try {\n    const { paymentId } = req.params;\n    const userId = req.user._id;\n\n    const payment = await Payment.findById(paymentId)\n      .populate('bookingId')\n      .populate('userId', 'name email');\n\n    if (!payment) {\n      return res.status(404).json({ message: 'Payment not found' });\n    }\n\n    // Check authorization (user can only see their own payments, or admins can see all)\n    if (payment.userId._id.toString() !== userId.toString() && req.user.role !== 'admin') {\n      return res.status(403).json({ message: 'Unauthorized access to payment details' });\n    }\n\n    res.json({ payment });\n\n  } catch (error) {\n    console.error('Payment details error:', error);\n    res.status(500).json({\n      message: 'Failed to get payment details',\n      error: error.message\n    });\n  }\n};\n\n// Request refund\nconst requestRefund = async (req, res) => {\n  try {\n    const { paymentId } = req.params;\n    const { amount, reason } = req.body;\n    const userId = req.user._id;\n\n    const payment = await Payment.findById(paymentId);\n    if (!payment) {\n      return res.status(404).json({ message: 'Payment not found' });\n    }\n\n    if (payment.userId.toString() !== userId.toString()) {\n      return res.status(403).json({ message: 'Unauthorized access to payment' });\n    }\n\n    if (!payment.canBeRefunded()) {\n      return res.status(400).json({ \n        message: 'Payment cannot be refunded',\n        reason: 'Payment is not eligible for refund (status, time limit, or already refunded)'\n      });\n    }\n\n    const refundAmount = amount || payment.getRemainingRefundAmount();\n    if (refundAmount <= 0 || refundAmount > payment.getRemainingRefundAmount()) {\n      return res.status(400).json({ message: 'Invalid refund amount' });\n    }\n\n    // Create refund record (in production, process with payment provider)\n    payment.status = 'refunded';\n    payment.refundAmount += refundAmount;\n    payment.refundedAt = new Date();\n    payment.metadata.refundReason = reason;\n    \n    await payment.save();\n\n    // Update booking if applicable\n    if (payment.bookingId) {\n      const booking = await Booking.findById(payment.bookingId);\n      if (booking) {\n        booking.status = 'cancelled';\n        booking.paymentStatus = 'refunded';\n        booking.addSystemLog('payment_refunded', `Refund processed: $${refundAmount}`);\n        await booking.save();\n      }\n    }\n\n    res.json({\n      message: 'Refund processed successfully',\n      refundAmount,\n      remainingAmount: payment.getRemainingRefundAmount()\n    });\n\n  } catch (error) {\n    console.error('Refund request error:', error);\n    res.status(500).json({\n      message: 'Failed to process refund',\n      error: error.message\n    });\n  }\n};\n\n// Get supported payment methods\nconst getSupportedPaymentMethods = async (req, res) => {\n  try {\n    const { country = 'LB', currency = 'USD' } = req.query;\n\n    const paymentMethods = {\n      apple_pay: {\n        available: APPLE_PAY_CONFIG.supportedCountries.includes(country),\n        config: APPLE_PAY_CONFIG,\n        processingFee: '2.9% + $0.30'\n      },\n      card: {\n        available: true,\n        supportedCards: ['visa', 'mastercard', 'amex'],\n        processingFee: '2.9% + $0.30'\n      },\n      bank_transfer: {\n        available: country === 'LB',\n        processingFee: '1%'\n      },\n      wallet: {\n        available: true,\n        processingFee: 'Free'\n      }\n    };\n\n    res.json({\n      country,\n      currency,\n      supportedMethods: paymentMethods\n    });\n\n  } catch (error) {\n    console.error('Supported payment methods error:', error);\n    res.status(500).json({\n      message: 'Failed to get supported payment methods',\n      error: error.message\n    });\n  }\n};\n\nmodule.exports = {\n  createApplePaySession,\n  processApplePayment,\n  createPaymentIntent,\n  getPaymentHistory,\n  getPaymentDetails,\n  requestRefund,\n  getSupportedPaymentMethods\n};","size_bytes":12613},"server/controllers/serviceController.js":{"content":"const Service = require('../models/Service');\nconst User = require('../models/User');\nconst { getGeminiModel, fallbackNLP, isGeminiAvailable } = require('../config/ai');\n\n// Get all services with filtering and search\nconst getServices = async (req, res) => {\n  try {\n    const { \n      page = 1, \n      limit = 12, \n      category, \n      subcategory,\n      minPrice, \n      maxPrice, \n      city, \n      search,\n      sortBy = 'newest',\n      language = 'en'\n    } = req.query;\n\n    const query = { \n      status: 'approved', \n      isActive: true \n    };\n\n    // Apply filters\n    if (category) query.category = category;\n    if (subcategory) query.subcategory = new RegExp(subcategory, 'i');\n    if (city) query['location.city'] = new RegExp(city, 'i');\n    if (minPrice || maxPrice) {\n      query.price = {};\n      if (minPrice) query.price.$gte = parseFloat(minPrice);\n      if (maxPrice) query.price.$lte = parseFloat(maxPrice);\n    }\n\n    // Text search\n    if (search) {\n      query.$or = [\n        { title: new RegExp(search, 'i') },\n        { description: new RegExp(search, 'i') },\n        { tags: new RegExp(search, 'i') }\n      ];\n      \n      // Add Arabic search if available\n      if (language === 'ar') {\n        query.$or.push(\n          { title_ar: new RegExp(search, 'i') },\n          { description_ar: new RegExp(search, 'i') }\n        );\n      }\n    }\n\n    // Sorting\n    let sort = {};\n    switch (sortBy) {\n      case 'price_low':\n        sort.price = 1;\n        break;\n      case 'price_high':\n        sort.price = -1;\n        break;\n      case 'rating':\n        sort['rating.average'] = -1;\n        break;\n      case 'popular':\n        sort.bookingCount = -1;\n        break;\n      default:\n        sort.createdAt = -1;\n    }\n\n    const services = await Service.find(query)\n      .populate('providerId', 'name location rating')\n      .sort(sort)\n      .skip((page - 1) * limit)\n      .limit(parseInt(limit));\n\n    const totalCount = await Service.countDocuments(query);\n\n    // Localize service data based on language\n    const localizedServices = services.map(service => ({\n      ...service.toObject(),\n      title: language === 'ar' && service.title_ar ? service.title_ar : service.title,\n      description: language === 'ar' && service.description_ar ? service.description_ar : service.description\n    }));\n\n    res.json({\n      services: localizedServices,\n      pagination: {\n        currentPage: parseInt(page),\n        totalPages: Math.ceil(totalCount / limit),\n        totalCount,\n        hasMore: page * limit < totalCount\n      },\n      filters: {\n        category,\n        subcategory,\n        minPrice,\n        maxPrice,  \n        city,\n        search,\n        sortBy,\n        language\n      }\n    });\n\n  } catch (error) {\n    console.error('Get services error:', error);\n    res.status(500).json({\n      message: 'Failed to get services',\n      error: error.message\n    });\n  }\n};\n\n// Get service categories\nconst getServiceCategories = async (req, res) => {\n  try {\n    const { language = 'en' } = req.query;\n\n    const categories = {\n      maintenance: {\n        name: language === 'ar' ? 'الصيانة' : 'Maintenance',\n        subcategories: [\n          { key: 'electrical', name: language === 'ar' ? 'الكهرباء' : 'Electrical Repair' },\n          { key: 'plumbing', name: language === 'ar' ? 'السباكة' : 'Plumbing' },\n          { key: 'ac_fridge', name: language === 'ar' ? 'المكيفات والثلاجات' : 'AC/Fridge' },\n          { key: 'carpentry', name: language === 'ar' ? 'النجارة' : 'Carpentry' },\n          { key: 'appliances', name: language === 'ar' ? 'الأجهزة المنزلية' : 'Home Appliances' }\n        ]\n      },\n      cleaning: {\n        name: language === 'ar' ? 'التنظيف' : 'Cleaning',\n        subcategories: [\n          { key: 'homes', name: language === 'ar' ? 'المنازل' : 'Homes' },\n          { key: 'offices', name: language === 'ar' ? 'المكاتب' : 'Offices' },\n          { key: 'carpets', name: language === 'ar' ? 'السجاد' : 'Carpets' },\n          { key: 'glass', name: language === 'ar' ? 'الزجاج' : 'Glass Facades' },\n          { key: 'water_tanks', name: language === 'ar' ? 'خزانات المياه' : 'Water Tanks' }\n        ]\n      },\n      delivery: {\n        name: language === 'ar' ? 'التوصيل' : 'Delivery',\n        subcategories: [\n          { key: 'furniture', name: language === 'ar' ? 'الأثاث' : 'Furniture' },\n          { key: 'documents', name: language === 'ar' ? 'المستندات' : 'Documents' },\n          { key: 'packages', name: language === 'ar' ? 'الطرود السريعة' : 'Express Packages' }\n        ]\n      },\n      events: {\n        name: language === 'ar' ? 'المناسبات' : 'Events',\n        subcategories: [\n          { key: 'hospitality', name: language === 'ar' ? 'الضيافة' : 'Hospitality (Coffee, Buffets)' },\n          { key: 'tents', name: language === 'ar' ? 'الخيام' : 'Tent Rentals' },\n          { key: 'photography', name: language === 'ar' ? 'التصوير' : 'Photography' }\n        ]\n      },\n      care: {\n        name: language === 'ar' ? 'الرعاية' : 'Care',\n        subcategories: [\n          { key: 'elderly', name: language === 'ar' ? 'كبار السن' : 'Elderly' },\n          { key: 'babysitting', name: language === 'ar' ? 'رعاية الأطفال' : 'Babysitting' },\n          { key: 'patient', name: language === 'ar' ? 'مرافقة المرضى' : 'Patient Companion' }\n        ]\n      },\n      gardens: {\n        name: language === 'ar' ? 'الحدائق' : 'Gardens',\n        subcategories: [\n          { key: 'pest_control', name: language === 'ar' ? 'مكافحة الآفات' : 'Pest Control' },\n          { key: 'irrigation', name: language === 'ar' ? 'الري' : 'Irrigation' },\n          { key: 'trimming', name: language === 'ar' ? 'تقليم الأشجار' : 'Tree Trimming' }\n        ]\n      },\n      auto: {\n        name: language === 'ar' ? 'السيارات' : 'Auto',\n        subcategories: [\n          { key: 'car_wash', name: language === 'ar' ? 'غسيل السيارات' : 'Car Wash' },\n          { key: 'oil_check', name: language === 'ar' ? 'فحص الزيت' : 'Oil Check' },\n          { key: 'roadside', name: language === 'ar' ? 'المساعدة على الطريق' : 'Roadside Help' }\n        ]\n      },\n      tech: {\n        name: language === 'ar' ? 'التقنية' : 'Tech',\n        subcategories: [\n          { key: 'laptop_repair', name: language === 'ar' ? 'إصلاح الحاسوب' : 'Laptop Repair' },\n          { key: 'wifi_setup', name: language === 'ar' ? 'إعداد الواي فاي' : 'WiFi Setup' },\n          { key: 'camera_install', name: language === 'ar' ? 'تركيب الكاميرات' : 'Camera Installation' }\n        ]\n      },\n      admin: {\n        name: language === 'ar' ? 'الإدارية' : 'Admin',\n        subcategories: [\n          { key: 'gov_paperwork', name: language === 'ar' ? 'الأوراق الحكومية' : 'Government Paperwork' },\n          { key: 'legal_docs', name: language === 'ar' ? 'الوثائق القانونية' : 'Legal Documents' },\n          { key: 'translation', name: language === 'ar' ? 'الترجمة المعتمدة' : 'Certified Translation' }\n        ]\n      }\n    };\n\n    res.json({ categories });\n\n  } catch (error) {\n    console.error('Get categories error:', error);\n    res.status(500).json({\n      message: 'Failed to get service categories',\n      error: error.message\n    });\n  }\n};\n\n// Get single service details\nconst getServiceById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { language = 'en' } = req.query;\n\n    const service = await Service.findById(id)\n      .populate('providerId', 'name email phone location rating isVerified createdAt');\n\n    if (!service) {\n      return res.status(404).json({ message: 'Service not found' });\n    }\n\n    // Increment view count\n    service.viewCount += 1;\n    await service.save();\n\n    // Localize service data\n    const localizedService = {\n      ...service.toObject(),\n      title: language === 'ar' && service.title_ar ? service.title_ar : service.title,\n      description: language === 'ar' && service.description_ar ? service.description_ar : service.description\n    };\n\n    res.json({ service: localizedService });\n\n  } catch (error) {\n    console.error('Get service by ID error:', error);\n    res.status(500).json({\n      message: 'Failed to get service details',\n      error: error.message\n    });\n  }\n};\n\n// Create new service (provider only)\nconst createService = async (req, res) => {\n  try {\n    const providerId = req.user._id;\n    const serviceData = {\n      ...req.body,\n      providerId,\n      status: 'pending' // Services need admin approval\n    };\n\n    const service = new Service(serviceData);\n    await service.save();\n\n    res.status(201).json({\n      message: 'Service created successfully and is pending approval',\n      service\n    });\n\n  } catch (error) {\n    console.error('Create service error:', error);\n    res.status(500).json({\n      message: 'Failed to create service',\n      error: error.message\n    });\n  }\n};\n\n// Update service (provider only, own services)\nconst updateService = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const providerId = req.user._id;\n\n    const service = await Service.findById(id);\n    if (!service) {\n      return res.status(404).json({ message: 'Service not found' });\n    }\n\n    if (service.providerId.toString() !== providerId.toString()) {\n      return res.status(403).json({ message: 'Unauthorized to update this service' });\n    }\n\n    // Update service and set status to pending if significant changes\n    const significantFields = ['title', 'description', 'price', 'category'];\n    const hasSignificantChanges = significantFields.some(field => \n      req.body[field] && req.body[field] !== service[field]\n    );\n\n    const updatedData = {\n      ...req.body,\n      ...(hasSignificantChanges && { status: 'pending' })\n    };\n\n    const updatedService = await Service.findByIdAndUpdate(\n      id, \n      updatedData, \n      { new: true, runValidators: true }\n    );\n\n    res.json({\n      message: hasSignificantChanges \n        ? 'Service updated and is pending re-approval' \n        : 'Service updated successfully',\n      service: updatedService\n    });\n\n  } catch (error) {\n    console.error('Update service error:', error);\n    res.status(500).json({\n      message: 'Failed to update service',\n      error: error.message\n    });\n  }\n};\n\n// Delete service (provider only, own services)\nconst deleteService = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const providerId = req.user._id;\n\n    const service = await Service.findById(id);\n    if (!service) {\n      return res.status(404).json({ message: 'Service not found' });\n    }\n\n    if (service.providerId.toString() !== providerId.toString()) {\n      return res.status(403).json({ message: 'Unauthorized to delete this service' });\n    }\n\n    await Service.findByIdAndDelete(id);\n\n    res.json({ message: 'Service deleted successfully' });\n\n  } catch (error) {\n    console.error('Delete service error:', error);\n    res.status(500).json({\n      message: 'Failed to delete service',\n      error: error.message\n    });\n  }\n};\n\nmodule.exports = {\n  getServices,\n  getServiceCategories,\n  getServiceById,\n  createService,\n  updateService,\n  deleteService\n};","size_bytes":11455},"server/middleware/auth.js":{"content":"const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-here';\n\n// Generate JWT token\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: '7d' });\n};\n\n// Verify JWT token middleware\nconst auth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'Access denied. No token provided.' });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Invalid token. User not found.' });\n    }\n\n    if (user.isBlocked) {\n      return res.status(403).json({ message: 'Account is blocked. Contact support.' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({ message: 'Token expired. Please login again.' });\n    }\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({ message: 'Invalid token.' });\n    }\n    \n    console.error('Auth middleware error:', error);\n    res.status(500).json({ message: 'Server error during authentication.' });\n  }\n};\n\n// Role-based authorization middleware\nconst authorize = (...roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Authentication required.' });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ \n        message: `Access denied. Required role: ${roles.join(' or ')}` \n      });\n    }\n\n    next();\n  };\n};\n\n// Optional auth - doesn't fail if token is missing\nconst optionalAuth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (token) {\n      const decoded = jwt.verify(token, JWT_SECRET);\n      const user = await User.findById(decoded.userId);\n      \n      if (user && !user.isBlocked) {\n        req.user = user;\n      }\n    }\n  } catch (error) {\n    // Silently fail for optional auth\n    console.log('Optional auth failed:', error.message);\n  }\n  \n  next();\n};\n\n// Verification status check\nconst requireVerification = (req, res, next) => {\n  if (!req.user.isVerified) {\n    return res.status(403).json({ \n      message: 'Email verification required. Please verify your email address.' \n    });\n  }\n  next();\n};\n\nmodule.exports = {\n  generateToken,\n  auth,\n  authorize,\n  optionalAuth,\n  requireVerification\n};","size_bytes":2605},"server/middleware/validation.js":{"content":"const { body, param, query, validationResult } = require('express-validator');\n\n// Handle validation errors\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      message: 'Validation failed',\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// User validation rules\nconst validateSignup = [\n  body('name')\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Name must be between 2 and 50 characters'),\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please provide a valid email'),\n  body('phone')\n    .isMobilePhone()\n    .withMessage('Please provide a valid phone number'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n  body('role')\n    .optional()\n    .isIn(['client', 'provider'])\n    .withMessage('Role must be either client or provider'),\n  body('language')\n    .optional()\n    .isIn(['en', 'ar'])\n    .withMessage('Language must be either en or ar')\n];\n\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please provide a valid email'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\nconst validatePasswordReset = [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Please provide a valid email')\n];\n\nconst validateNewPassword = [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n  body('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long')\n];\n\n// Service validation rules\nconst validateService = [\n  body('title')\n    .trim()\n    .isLength({ min: 5, max: 100 })\n    .withMessage('Title must be between 5 and 100 characters'),\n  body('description')\n    .trim()\n    .isLength({ min: 20, max: 1000 })\n    .withMessage('Description must be between 20 and 1000 characters'),\n  body('category')\n    .isIn(['maintenance', 'cleaning', 'delivery', 'events', 'care', 'gardens', 'auto', 'tech', 'admin'])\n    .withMessage('Invalid category'),\n  body('subcategory')\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('Subcategory must be between 2 and 50 characters'),\n  body('price')\n    .isFloat({ min: 0.01 })\n    .withMessage('Price must be a positive number'),\n  body('location.city')\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('City is required and must be between 2 and 50 characters')\n];\n\n// Booking validation rules\nconst validateBooking = [\n  body('serviceId')\n    .isMongoId()\n    .withMessage('Valid service ID is required'),\n  body('date')\n    .isISO8601()\n    .toDate()\n    .withMessage('Valid date is required'),\n  body('time')\n    .matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)\n    .withMessage('Valid time format required (HH:MM)'),\n  body('duration')\n    .optional()\n    .isFloat({ min: 0.5, max: 12 })\n    .withMessage('Duration must be between 0.5 and 12 hours')\n];\n\n// Review validation rules\nconst validateReview = [\n  body('rating')\n    .isInt({ min: 1, max: 5 })\n    .withMessage('Rating must be between 1 and 5'),\n  body('text')\n    .trim()\n    .isLength({ min: 10, max: 1000 })\n    .withMessage('Review text must be between 10 and 1000 characters'),\n  body('bookingId')\n    .isMongoId()\n    .withMessage('Valid booking ID is required')\n];\n\n// Wallet validation rules\nconst validateWalletRecharge = [\n  body('amount')\n    .isFloat({ min: 10, max: 10000 })\n    .withMessage('Amount must be between 10 and 10000'),\n  body('paymentMethod')\n    .isIn(['card', 'bank_transfer'])\n    .withMessage('Invalid payment method')\n];\n\n// Query parameter validations\nconst validatePagination = [\n  query('page')\n    .optional()\n    .isInt({ min: 1 })\n    .withMessage('Page must be a positive integer'),\n  query('limit')\n    .optional()\n    .isInt({ min: 1, max: 100 })\n    .withMessage('Limit must be between 1 and 100')\n];\n\nconst validateServiceFilters = [\n  query('category')\n    .optional()\n    .isIn(['maintenance', 'cleaning', 'delivery', 'events', 'care', 'gardens', 'auto', 'tech', 'admin'])\n    .withMessage('Invalid category'),\n  query('minPrice')\n    .optional()\n    .isFloat({ min: 0 })\n    .withMessage('Minimum price must be non-negative'),\n  query('maxPrice')\n    .optional()\n    .isFloat({ min: 0 })\n    .withMessage('Maximum price must be non-negative'),\n  query('city')\n    .optional()\n    .trim()\n    .isLength({ min: 2, max: 50 })\n    .withMessage('City must be between 2 and 50 characters'),\n  query('sortBy')\n    .optional()\n    .isIn(['price', 'rating', 'distance', 'newest'])\n    .withMessage('Invalid sort option')\n];\n\n// ID parameter validation\nconst validateObjectId = [\n  param('id')\n    .isMongoId()\n    .withMessage('Invalid ID format')\n];\n\nmodule.exports = {\n  handleValidationErrors,\n  validateSignup,\n  validateLogin,\n  validatePasswordReset,\n  validateNewPassword,\n  validateService,\n  validateBooking,\n  validateReview,\n  validateWalletRecharge,\n  validatePagination,\n  validateServiceFilters,\n  validateObjectId\n};","size_bytes":5077},"server/models/Booking.js":{"content":"const mongoose = require('mongoose');\n\nconst bookingSchema = new mongoose.Schema({\n  clientId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  providerId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  serviceId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Service',\n    required: true\n  },\n  date: {\n    type: Date,\n    required: true\n  },\n  time: {\n    type: String,\n    required: true // e.g., '10:00'\n  },\n  duration: {\n    type: Number, // in hours\n    default: 1\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'accepted', 'in_progress', 'completed', 'cancelled', 'rejected'],\n    default: 'pending'\n  },\n  totalAmount: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  paymentStatus: {\n    type: String,\n    enum: ['pending', 'paid', 'refunded', 'failed'],\n    default: 'pending'\n  },\n  paymentMethod: {\n    type: String,\n    enum: ['wallet', 'card', 'cash'],\n    default: 'wallet'\n  },\n  notes: String,\n  clientNotes: String,\n  providerNotes: String,\n  cancellationReason: String,\n  cancellationDate: Date,\n  completionDate: Date,\n  systemLogs: [{\n    action: String,\n    timestamp: {\n      type: Date,\n      default: Date.now\n    },\n    details: String\n  }],\n  location: {\n    address: String,\n    coordinates: [Number]\n  }\n}, {\n  timestamps: true\n});\n\n// Indexes for efficient queries\nbookingSchema.index({ clientId: 1, createdAt: -1 });\nbookingSchema.index({ providerId: 1, createdAt: -1 });\nbookingSchema.index({ serviceId: 1 });\nbookingSchema.index({ status: 1 });\nbookingSchema.index({ date: 1, time: 1 });\n\n// Add system log entry\nbookingSchema.methods.addSystemLog = function(action, details) {\n  this.systemLogs.push({\n    action,\n    details,\n    timestamp: new Date()\n  });\n};\n\n// Check if booking can be cancelled\nbookingSchema.methods.canBeCancelled = function() {\n  const now = new Date();\n  const bookingDateTime = new Date(this.date);\n  const hoursDifference = (bookingDateTime - now) / (1000 * 60 * 60);\n  \n  return hoursDifference > 24 && ['pending', 'accepted'].includes(this.status);\n};\n\nmodule.exports = mongoose.model('Booking', bookingSchema);","size_bytes":2180},"server/models/Payment.js":{"content":"const mongoose = require('mongoose');\n\nconst paymentMethodSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['apple_pay', 'card', 'bank_transfer', 'wallet'],\n    required: true\n  },\n  isDefault: {\n    type: Boolean,\n    default: false\n  },\n  // Apple Pay specific fields\n  applePayData: {\n    merchantIdentifier: String,\n    paymentPass: {\n      primaryAccountIdentifier: String,\n      primaryAccountNumberSuffix: String,\n      deviceAccountIdentifier: String,\n      deviceAccountNumberSuffix: String\n    }\n  },\n  // Card specific fields\n  cardData: {\n    last4: String,\n    brand: String, // visa, mastercard, amex\n    expiryMonth: Number,\n    expiryYear: Number,\n    fingerprint: String\n  },\n  // Bank transfer fields\n  bankData: {\n    accountNumber: String,\n    routingNumber: String,\n    accountHolderName: String,\n    bankName: String\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true\n});\n\nconst paymentSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  bookingId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Booking'\n  },\n  walletTransactionId: {\n    type: mongoose.Schema.Types.ObjectId\n  },\n  amount: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  currency: {\n    type: String,\n    default: 'USD',\n    enum: ['USD', 'LBP', 'EUR']\n  },\n  paymentMethod: {\n    type: String,\n    enum: ['apple_pay', 'card', 'bank_transfer', 'wallet', 'cash'],\n    required: true\n  },\n  paymentMethodDetails: paymentMethodSchema,\n  status: {\n    type: String,\n    enum: ['pending', 'processing', 'completed', 'failed', 'cancelled', 'refunded'],\n    default: 'pending'\n  },\n  paymentIntent: {\n    // For Apple Pay and card payments\n    intentId: String,\n    clientSecret: String,\n    paymentProvider: {\n      type: String,\n      enum: ['stripe', 'apple_pay', 'paypal', 'local_bank']\n    }\n  },\n  applePayment: {\n    // Apple Pay specific transaction data\n    transactionIdentifier: String,\n    paymentData: mongoose.Schema.Types.Mixed, // Encrypted payment data from Apple\n    paymentMethod: {\n      displayName: String,\n      network: String, // Visa, Mastercard, etc.\n      type: String // debit, credit\n    },\n    merchantSession: mongoose.Schema.Types.Mixed\n  },\n  processingFee: {\n    type: Number,\n    default: 0\n  },\n  netAmount: Number, // amount - processingFee\n  description: String,\n  metadata: mongoose.Schema.Types.Mixed,\n  failureReason: String,\n  processedAt: Date,\n  refundedAt: Date,\n  refundAmount: {\n    type: Number,\n    default: 0\n  },\n  // Commission tracking\n  platformCommission: {\n    rate: {\n      type: Number,\n      default: 0.05 // 5% default\n    },\n    amount: Number\n  },\n  providerEarnings: Number,\n  // Receipt and invoice\n  receiptNumber: {\n    type: String,\n    unique: true\n  },\n  invoiceUrl: String,\n  receiptUrl: String\n}, {\n  timestamps: true\n});\n\n// Generate unique receipt number\npaymentSchema.pre('save', async function(next) {\n  if (this.isNew && !this.receiptNumber) {\n    const timestamp = Date.now().toString();\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n    this.receiptNumber = `TGO-${timestamp}-${random}`;\n  }\n  \n  // Calculate net amount and provider earnings\n  if (this.amount && this.processingFee !== undefined) {\n    this.netAmount = this.amount - this.processingFee;\n    \n    if (this.platformCommission.rate) {\n      this.platformCommission.amount = this.netAmount * this.platformCommission.rate;\n      this.providerEarnings = this.netAmount - this.platformCommission.amount;\n    }\n  }\n  \n  next();\n});\n\n// Indexes for efficient queries\npaymentSchema.index({ userId: 1, createdAt: -1 });\npaymentSchema.index({ bookingId: 1 });\npaymentSchema.index({ status: 1 });\npaymentSchema.index({ paymentMethod: 1 });\npaymentSchema.index({ receiptNumber: 1 });\npaymentSchema.index({ 'applePayment.transactionIdentifier': 1 });\n\n// Instance methods\npaymentSchema.methods.canBeRefunded = function() {\n  const refundableStatuses = ['completed'];\n  const maxRefundDays = 30;\n  const daysSincePayment = (Date.now() - this.processedAt) / (1000 * 60 * 60 * 24);\n  \n  return refundableStatuses.includes(this.status) && \n         daysSincePayment <= maxRefundDays &&\n         this.refundAmount < this.amount;\n};\n\npaymentSchema.methods.getRemainingRefundAmount = function() {\n  return Math.max(0, this.amount - this.refundAmount);\n};\n\n// Static methods\npaymentSchema.statics.findByReceiptNumber = function(receiptNumber) {\n  return this.findOne({ receiptNumber });\n};\n\npaymentSchema.statics.getUserPaymentHistory = function(userId, page = 1, limit = 20) {\n  const skip = (page - 1) * limit;\n  return this.find({ userId })\n    .populate('bookingId', 'serviceId date status')\n    .sort({ createdAt: -1 })\n    .skip(skip)\n    .limit(limit);\n};\n\nmodule.exports = mongoose.model('Payment', paymentSchema);","size_bytes":4910},"server/models/Review.js":{"content":"const mongoose = require('mongoose');\n\nconst reviewSchema = new mongoose.Schema({\n  serviceId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Service',\n    required: true\n  },\n  bookingId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Booking',\n    required: true\n  },\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  providerId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  rating: {\n    type: Number,\n    required: true,\n    min: 1,\n    max: 5\n  },\n  text: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 1000\n  },\n  text_ar: {\n    type: String,\n    trim: true,\n    maxlength: 1000\n  },\n  images: [String], // URLs to review images\n  isVerified: {\n    type: Boolean,\n    default: false // Verified if user actually used the service\n  },\n  isHidden: {\n    type: Boolean,\n    default: false // For admin moderation\n  },\n  helpfulCount: {\n    type: Number,\n    default: 0\n  },\n  reportCount: {\n    type: Number,\n    default: 0\n  },\n  sentiment: {\n    type: String,\n    enum: ['positive', 'neutral', 'negative'],\n    default: 'neutral'\n  },\n  aiAnalysis: {\n    keywords: [String],\n    topics: [String],\n    confidence: Number\n  }\n}, {\n  timestamps: true\n});\n\n// Indexes\nreviewSchema.index({ serviceId: 1, createdAt: -1 });\nreviewSchema.index({ userId: 1 });\nreviewSchema.index({ providerId: 1 });\nreviewSchema.index({ rating: -1 });\nreviewSchema.index({ isHidden: 1 });\n\n// Ensure one review per booking\nreviewSchema.index({ bookingId: 1 }, { unique: true });\n\n// Update service rating after saving review\nreviewSchema.post('save', async function() {\n  const Service = mongoose.model('Service');\n  const service = await Service.findById(this.serviceId);\n  if (service) {\n    await service.updateRating();\n  }\n});\n\n// Update service rating after removing review\nreviewSchema.post('remove', async function() {\n  const Service = mongoose.model('Service');\n  const service = await Service.findById(this.serviceId);\n  if (service) {\n    await service.updateRating();\n  }\n});\n\nmodule.exports = mongoose.model('Review', reviewSchema);","size_bytes":2153},"server/models/Service.js":{"content":"const mongoose = require('mongoose');\n\nconst serviceSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  title_ar: {\n    type: String,\n    trim: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  description_ar: {\n    type: String\n  },\n  category: {\n    type: String,\n    required: true,\n    enum: [\n      'maintenance', 'cleaning', 'delivery', 'events', \n      'care', 'gardens', 'auto', 'tech', 'admin'\n    ]\n  },\n  subcategory: {\n    type: String,\n    required: true\n  },\n  price: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  priceType: {\n    type: String,\n    enum: ['fixed', 'hourly', 'per_item'],\n    default: 'fixed'\n  },\n  images: [{\n    type: String // URLs to uploaded images\n  }],\n  location: {\n    city: {\n      type: String,\n      required: true\n    },\n    area: String,\n    coordinates: {\n      type: [Number], // [longitude, latitude]\n      index: '2dsphere'\n    }\n  },\n  providerId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  availability: [{\n    date: Date,\n    timeSlots: [String] // e.g., ['09:00', '10:00', '14:00']\n  }],\n  tags: [String],\n  rating: {\n    average: {\n      type: Number,\n      default: 0,\n      min: 0,\n      max: 5\n    },\n    count: {\n      type: Number,\n      default: 0\n    }\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'approved', 'rejected', 'inactive'],\n    default: 'pending'\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  viewCount: {\n    type: Number,\n    default: 0\n  },\n  bookingCount: {\n    type: Number,\n    default: 0\n  }\n}, {\n  timestamps: true\n});\n\n// Index for location-based searches\nserviceSchema.index({ 'location.coordinates': '2dsphere' });\nserviceSchema.index({ category: 1, status: 1 });\nserviceSchema.index({ providerId: 1 });\nserviceSchema.index({ rating: -1 });\n\n// Update rating when reviews change\nserviceSchema.methods.updateRating = async function() {\n  const Review = mongoose.model('Review');\n  const reviews = await Review.find({ serviceId: this._id });\n  \n  if (reviews.length === 0) {\n    this.rating.average = 0;\n    this.rating.count = 0;\n  } else {\n    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);\n    this.rating.average = totalRating / reviews.length;\n    this.rating.count = reviews.length;\n  }\n  \n  await this.save();\n};\n\nmodule.exports = mongoose.model('Service', serviceSchema);","size_bytes":2446},"server/models/User.js":{"content":"const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true\n  },\n  phone: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  passwordHash: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    enum: ['client', 'provider', 'admin'],\n    default: 'client'\n  },\n  language: {\n    type: String,\n    enum: ['en', 'ar'],\n    default: 'en'\n  },\n  location: {\n    city: String,\n    coordinates: {\n      type: [Number], // [longitude, latitude]\n      index: '2dsphere'\n    }\n  },\n  isBlocked: {\n    type: Boolean,\n    default: false\n  },\n  isVerified: {\n    type: Boolean,\n    default: false\n  },\n  isPremium: {\n    type: Boolean,\n    default: false\n  },\n  walletBalance: {\n    type: Number,\n    default: 0\n  },\n  avatar: String,\n  verificationToken: String,\n  resetPasswordToken: String,\n  resetPasswordExpires: Date\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('passwordHash')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.passwordHash = await bcrypt.hash(this.passwordHash, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.passwordHash);\n};\n\n// Hide sensitive data when converting to JSON\nuserSchema.methods.toJSON = function() {\n  const user = this.toObject();\n  delete user.passwordHash;\n  delete user.verificationToken;\n  delete user.resetPasswordToken;\n  delete user.resetPasswordExpires;\n  return user;\n};\n\nmodule.exports = mongoose.model('User', userSchema);","size_bytes":1901},"server/models/Wallet.js":{"content":"const mongoose = require('mongoose');\n\nconst transactionSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['recharge', 'payment', 'refund', 'withdrawal', 'commission'],\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  description: String,\n  relatedBookingId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Booking'\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'completed', 'failed', 'cancelled'],\n    default: 'pending'\n  },\n  paymentMethod: {\n    type: String,\n    enum: ['card', 'bank_transfer', 'cash', 'wallet']\n  },\n  externalTransactionId: String, // For payment gateway integration\n  metadata: mongoose.Schema.Types.Mixed\n}, {\n  timestamps: true\n});\n\nconst walletSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    unique: true\n  },\n  balance: {\n    type: Number,\n    default: 0,\n    min: 0\n  },\n  pendingBalance: {\n    type: Number,\n    default: 0 // Money pending from completed services\n  },\n  totalEarnings: {\n    type: Number,\n    default: 0 // For providers\n  },\n  totalSpent: {\n    type: Number,\n    default: 0 // For clients\n  },\n  transactionHistory: [transactionSchema],\n  lastTransactionAt: Date,\n  refundStatus: {\n    type: String,\n    enum: ['none', 'pending', 'processed'],\n    default: 'none'\n  },\n  paymentStatus: {\n    type: String,\n    enum: ['active', 'suspended', 'under_review'],\n    default: 'active'\n  },\n  autoWithdraw: {\n    enabled: {\n      type: Boolean,\n      default: false\n    },\n    threshold: {\n      type: Number,\n      default: 100\n    },\n    bankDetails: {\n      accountNumber: String,\n      bankName: String,\n      accountHolderName: String\n    }\n  }\n}, {\n  timestamps: true\n});\n\n// Add transaction to wallet\nwalletSchema.methods.addTransaction = async function(transactionData) {\n  const transaction = {\n    ...transactionData,\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n  \n  this.transactionHistory.push(transaction);\n  this.lastTransactionAt = new Date();\n  \n  // Update balance based on transaction type\n  if (transaction.status === 'completed') {\n    switch (transaction.type) {\n      case 'recharge':\n        this.balance += transaction.amount;\n        break;\n      case 'payment':\n        this.balance -= transaction.amount;\n        this.totalSpent += transaction.amount;\n        break;\n      case 'refund':\n        this.balance += transaction.amount;\n        break;\n      case 'withdrawal':\n        this.balance -= transaction.amount;\n        break;\n      case 'commission':\n        this.balance += transaction.amount;\n        this.totalEarnings += transaction.amount;\n        break;\n    }\n  }\n  \n  await this.save();\n  return transaction;\n};\n\n// Check if user has sufficient balance\nwalletSchema.methods.hasSufficientBalance = function(amount) {\n  return this.balance >= amount;\n};\n\n// Get transaction history with pagination\nwalletSchema.methods.getTransactionHistory = function(page = 1, limit = 20) {\n  const startIndex = (page - 1) * limit;\n  const endIndex = startIndex + limit;\n  \n  return {\n    transactions: this.transactionHistory\n      .sort((a, b) => b.createdAt - a.createdAt)\n      .slice(startIndex, endIndex),\n    totalCount: this.transactionHistory.length,\n    hasMore: endIndex < this.transactionHistory.length\n  };\n};\n\nmodule.exports = mongoose.model('Wallet', walletSchema);","size_bytes":3403},"server/routes/ai.js":{"content":"const express = require('express');\nconst { \n  chatWithAI, \n  getServiceRecommendations, \n  analyzeReviewSentiment, \n  getPricingSuggestions \n} = require('../controllers/aiController');\nconst { auth, optionalAuth } = require('../middleware/auth');\nconst { body, handleValidationErrors } = require('../middleware/validation');\n\nconst router = express.Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     ChatMessage:\n *       type: object\n *       properties:\n *         message:\n *           type: string\n *         response:\n *           type: string\n *         language:\n *           type: string\n *           enum: [en, ar]\n *         timestamp:\n *           type: string\n *           format: date-time\n */\n\n/**\n * @swagger\n * /api/chat-ai/message:\n *   post:\n *     summary: Chat with AI assistant\n *     tags: [AI Services]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - message\n *             properties:\n *               message:\n *                 type: string\n *                 description: User's message to the AI\n *               language:\n *                 type: string\n *                 enum: [en, ar]\n *                 default: en\n *               conversationHistory:\n *                 type: array\n *                 items:\n *                   type: object\n *                   properties:\n *                     role:\n *                       type: string\n *                       enum: [user, assistant]\n *                     content:\n *                       type: string\n *     responses:\n *       200:\n *         description: AI response\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 response:\n *                   type: string\n *                 aiProvider:\n *                   type: string\n *                 language:\n *                   type: string\n *                 timestamp:\n *                   type: string\n *       500:\n *         description: AI service error\n */\nrouter.post('/message', \n  optionalAuth,\n  [\n    body('message')\n      .trim()\n      .isLength({ min: 1, max: 1000 })\n      .withMessage('Message must be between 1 and 1000 characters'),\n    body('language')\n      .optional()\n      .isIn(['en', 'ar'])\n      .withMessage('Language must be either en or ar'),\n    handleValidationErrors\n  ],\n  chatWithAI\n);\n\n/**\n * @swagger\n * /api/ai/recommendations:\n *   post:\n *     summary: Get AI-powered service recommendations\n *     tags: [AI Services]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               query:\n *                 type: string\n *                 description: Natural language service request\n *               location:\n *                 type: object\n *                 properties:\n *                   city:\n *                     type: string\n *               budget:\n *                 type: number\n *               category:\n *                 type: string\n *               language:\n *                 type: string\n *                 enum: [en, ar]\n *     responses:\n *       200:\n *         description: Service recommendations\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 recommendations:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Service'\n *                 aiExplanation:\n *                   type: string\n *                 totalAvailable:\n *                   type: number\n *                 aiProvider:\n *                   type: string\n */\nrouter.post('/recommendations',\n  optionalAuth,\n  [\n    body('query')\n      .optional()\n      .trim()\n      .isLength({ max: 500 })\n      .withMessage('Query must be less than 500 characters'),\n    body('budget')\n      .optional()\n      .isFloat({ min: 0 })\n      .withMessage('Budget must be a positive number'),\n    body('language')\n      .optional()\n      .isIn(['en', 'ar'])\n      .withMessage('Language must be either en or ar'),\n    handleValidationErrors\n  ],\n  getServiceRecommendations\n);\n\n/**\n * @swagger\n * /api/ai/sentiment:\n *   post:\n *     summary: Analyze sentiment of review text\n *     tags: [AI Services]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - text\n *             properties:\n *               text:\n *                 type: string\n *                 description: Text to analyze\n *               language:\n *                 type: string\n *                 enum: [en, ar]\n *     responses:\n *       200:\n *         description: Sentiment analysis results\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 sentiment:\n *                   type: string\n *                   enum: [positive, negative, neutral]\n *                 confidence:\n *                   type: number\n *                 keywords:\n *                   type: array\n *                   items:\n *                     type: string\n *                 aiProvider:\n *                   type: string\n */\nrouter.post('/sentiment',\n  auth,\n  [\n    body('text')\n      .trim()\n      .isLength({ min: 5, max: 2000 })\n      .withMessage('Text must be between 5 and 2000 characters'),\n    body('language')\n      .optional()\n      .isIn(['en', 'ar'])\n      .withMessage('Language must be either en or ar'),\n    handleValidationErrors\n  ],\n  analyzeReviewSentiment\n);\n\n/**\n * @swagger\n * /api/ai/pricing:\n *   post:\n *     summary: Get AI-powered pricing suggestions\n *     tags: [AI Services]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - category\n *               - subcategory\n *             properties:\n *               category:\n *                 type: string\n *               subcategory:\n *                 type: string\n *               location:\n *                 type: object\n *                 properties:\n *                   city:\n *                     type: string\n *               serviceDetails:\n *                 type: string\n *     responses:\n *       200:\n *         description: Pricing analysis and suggestions\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 marketAnalysis:\n *                   type: object\n *                 recommendations:\n *                   type: object\n *                 aiSuggestion:\n *                   type: string\n *                 aiProvider:\n *                   type: string\n */\nrouter.post('/pricing',\n  auth,\n  [\n    body('category')\n      .isIn(['maintenance', 'cleaning', 'delivery', 'events', 'care', 'gardens', 'auto', 'tech', 'admin'])\n      .withMessage('Invalid category'),\n    body('subcategory')\n      .trim()\n      .isLength({ min: 2, max: 100 })\n      .withMessage('Subcategory must be between 2 and 100 characters'),\n    body('serviceDetails')\n      .optional()\n      .trim()\n      .isLength({ max: 1000 })\n      .withMessage('Service details must be less than 1000 characters'),\n    handleValidationErrors\n  ],\n  getPricingSuggestions\n);\n\nmodule.exports = router;","size_bytes":7852},"server/routes/auth.js":{"content":"const express = require('express');\nconst { \n  signup, \n  login, \n  verifyEmail, \n  requestPasswordReset, \n  resetPassword, \n  getCurrentUser \n} = require('../controllers/authController');\nconst { auth } = require('../middleware/auth');\nconst { \n  validateSignup, \n  validateLogin, \n  validatePasswordReset, \n  validateNewPassword,\n  handleValidationErrors \n} = require('../middleware/validation');\n\nconst router = express.Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       properties:\n *         _id:\n *           type: string\n *         name:\n *           type: string\n *         email:\n *           type: string\n *         role:\n *           type: string\n *           enum: [client, provider, admin]\n *         language:\n *           type: string\n *           enum: [en, ar]\n *         isVerified:\n *           type: boolean\n */\n\n/**\n * @swagger\n * /api/auth/signup:\n *   post:\n *     summary: Register a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - name\n *               - email\n *               - phone\n *               - password\n *             properties:\n *               name:\n *                 type: string\n *               email:\n *                 type: string\n *               phone:\n *                 type: string\n *               password:\n *                 type: string\n *               role:\n *                 type: string\n *                 enum: [client, provider]\n *               language:\n *                 type: string\n *                 enum: [en, ar]\n *     responses:\n *       201:\n *         description: User registered successfully\n *       400:\n *         description: Validation error or user already exists\n */\nrouter.post('/signup', validateSignup, handleValidationErrors, signup);\n\n/**\n * @swagger\n * /api/auth/login:\n *   post:\n *     summary: Login user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *               - password\n *             properties:\n *               email:\n *                 type: string\n *               password:\n *                 type: string\n *     responses:\n *       200:\n *         description: Login successful\n *       401:\n *         description: Invalid credentials\n */\nrouter.post('/login', validateLogin, handleValidationErrors, login);\n\n/**\n * @swagger\n * /api/auth/verify/{token}:\n *   get:\n *     summary: Verify email address\n *     tags: [Authentication]\n *     parameters:\n *       - in: path\n *         name: token\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Email verified successfully\n *       400:\n *         description: Invalid or expired token\n */\nrouter.get('/verify/:token', verifyEmail);\n\n/**\n * @swagger\n * /api/auth/reset-password:\n *   post:\n *     summary: Request password reset\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *             properties:\n *               email:\n *                 type: string\n *     responses:\n *       200:\n *         description: Reset link sent if email exists\n */\nrouter.post('/reset-password', validatePasswordReset, handleValidationErrors, requestPasswordReset);\n\n/**\n * @swagger\n * /api/auth/reset-password/confirm:\n *   post:\n *     summary: Reset password with token\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - token\n *               - password\n *             properties:\n *               token:\n *                 type: string\n *               password:\n *                 type: string\n *     responses:\n *       200:\n *         description: Password reset successful\n *       400:\n *         description: Invalid or expired token\n */\nrouter.post('/reset-password/confirm', validateNewPassword, handleValidationErrors, resetPassword);\n\n/**\n * @swagger\n * /api/auth/me:\n *   get:\n *     summary: Get current user profile\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: User profile data\n *       401:\n *         description: Unauthorized\n */\nrouter.get('/me', auth, getCurrentUser);\n\nmodule.exports = router;","size_bytes":4757},"server/routes/payment.js":{"content":"const express = require('express');\nconst {\n  createApplePaySession,\n  processApplePayment,\n  createPaymentIntent,\n  getPaymentHistory,\n  getPaymentDetails,\n  requestRefund,\n  getSupportedPaymentMethods\n} = require('../controllers/paymentController');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, param, query, handleValidationErrors } = require('../middleware/validation');\n\nconst router = express.Router();\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Payment:\n *       type: object\n *       properties:\n *         _id:\n *           type: string\n *         userId:\n *           type: string\n *         amount:\n *           type: number\n *         currency:\n *           type: string\n *           enum: [USD, LBP, EUR]\n *         paymentMethod:\n *           type: string\n *           enum: [apple_pay, card, bank_transfer, wallet, cash]\n *         status:\n *           type: string\n *           enum: [pending, processing, completed, failed, cancelled, refunded]\n *         receiptNumber:\n *           type: string\n *         createdAt:\n *           type: string\n *           format: date-time\n */\n\n/**\n * @swagger\n * /api/payments/apple-pay/session:\n *   post:\n *     summary: Create Apple Pay merchant session\n *     tags: [Payments]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - validationURL\n *               - domain\n *             properties:\n *               validationURL:\n *                 type: string\n *                 description: Apple Pay validation URL\n *               domain:\n *                 type: string\n *                 description: Merchant domain\n *     responses:\n *       200:\n *         description: Apple Pay session created\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 merchantSession:\n *                   type: object\n *                 config:\n *                   type: object\n *       400:\n *         description: Invalid domain or validation error\n */\nrouter.post('/apple-pay/session',\n  [\n    body('validationURL')\n      .isURL()\n      .withMessage('Valid Apple Pay validation URL is required'),\n    body('domain')\n      .isLength({ min: 3, max: 100 })\n      .withMessage('Valid domain is required'),\n    handleValidationErrors\n  ],\n  createApplePaySession\n);\n\n/**\n * @swagger\n * /api/payments/apple-pay/process:\n *   post:\n *     summary: Process Apple Pay payment\n *     tags: [Payments]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - paymentData\n *               - paymentMethod\n *               - transactionIdentifier\n *               - amount\n *             properties:\n *               paymentData:\n *                 type: object\n *                 description: Encrypted Apple Pay payment data\n *               paymentMethod:\n *                 type: object\n *                 properties:\n *                   displayName:\n *                     type: string\n *                   network:\n *                     type: string\n *                   type:\n *                     type: string\n *               transactionIdentifier:\n *                 type: string\n *               amount:\n *                 type: number\n *                 minimum: 0.01\n *               currency:\n *                 type: string\n *                 default: USD\n *               bookingId:\n *                 type: string\n *                 description: Optional booking ID for service payments\n *     responses:\n *       200:\n *         description: Apple Pay payment processed successfully\n *       400:\n *         description: Invalid payment data\n *       404:\n *         description: Booking not found\n */\nrouter.post('/apple-pay/process',\n  auth,\n  [\n    body('paymentData')\n      .notEmpty()\n      .withMessage('Apple Pay payment data is required'),\n    body('paymentMethod')\n      .isObject()\n      .withMessage('Apple Pay payment method is required'),\n    body('transactionIdentifier')\n      .isLength({ min: 10, max: 100 })\n      .withMessage('Valid transaction identifier is required'),\n    body('amount')\n      .isFloat({ min: 0.01, max: 100000 })\n      .withMessage('Amount must be between $0.01 and $100,000'),\n    body('currency')\n      .optional()\n      .isIn(['USD', 'LBP', 'EUR'])\n      .withMessage('Currency must be USD, LBP, or EUR'),\n    body('bookingId')\n      .optional()\n      .isMongoId()\n      .withMessage('Valid booking ID is required'),\n    handleValidationErrors\n  ],\n  processApplePayment\n);\n\n/**\n * @swagger\n * /api/payments/intent:\n *   post:\n *     summary: Create payment intent for any payment method\n *     tags: [Payments]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - amount\n *               - paymentMethod\n *             properties:\n *               amount:\n *                 type: number\n *                 minimum: 0.01\n *               currency:\n *                 type: string\n *                 default: USD\n *               paymentMethod:\n *                 type: string\n *                 enum: [apple_pay, card, bank_transfer, wallet]\n *               bookingId:\n *                 type: string\n *               description:\n *                 type: string\n *     responses:\n *       200:\n *         description: Payment intent created successfully\n *       400:\n *         description: Invalid request data\n */\nrouter.post('/intent',\n  auth,\n  [\n    body('amount')\n      .isFloat({ min: 0.01, max: 100000 })\n      .withMessage('Amount must be between $0.01 and $100,000'),\n    body('paymentMethod')\n      .isIn(['apple_pay', 'card', 'bank_transfer', 'wallet'])\n      .withMessage('Invalid payment method'),\n    body('currency')\n      .optional()\n      .isIn(['USD', 'LBP', 'EUR'])\n      .withMessage('Currency must be USD, LBP, or EUR'),\n    body('bookingId')\n      .optional()\n      .isMongoId()\n      .withMessage('Valid booking ID is required'),\n    body('description')\n      .optional()\n      .isLength({ max: 200 })\n      .withMessage('Description must be less than 200 characters'),\n    handleValidationErrors\n  ],\n  createPaymentIntent\n);\n\n/**\n * @swagger\n * /api/payments/history:\n *   get:\n *     summary: Get user payment history\n *     tags: [Payments]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           minimum: 1\n *           default: 1\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           minimum: 1\n *           maximum: 100\n *           default: 20\n *       - in: query\n *         name: status\n *         schema:\n *           type: string\n *           enum: [pending, processing, completed, failed, cancelled, refunded]\n *       - in: query\n *         name: paymentMethod\n *         schema:\n *           type: string\n *           enum: [apple_pay, card, bank_transfer, wallet, cash]\n *     responses:\n *       200:\n *         description: Payment history retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 payments:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Payment'\n *                 pagination:\n *                   type: object\n */\nrouter.get('/history',\n  auth,\n  [\n    query('page')\n      .optional()\n      .isInt({ min: 1 })\n      .withMessage('Page must be a positive integer'),\n    query('limit')\n      .optional()\n      .isInt({ min: 1, max: 100 })\n      .withMessage('Limit must be between 1 and 100'),\n    query('status')\n      .optional()\n      .isIn(['pending', 'processing', 'completed', 'failed', 'cancelled', 'refunded'])\n      .withMessage('Invalid status filter'),\n    query('paymentMethod')\n      .optional()\n      .isIn(['apple_pay', 'card', 'bank_transfer', 'wallet', 'cash'])\n      .withMessage('Invalid payment method filter'),\n    handleValidationErrors\n  ],\n  getPaymentHistory\n);\n\n/**\n * @swagger\n * /api/payments/{paymentId}:\n *   get:\n *     summary: Get payment details\n *     tags: [Payments]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: paymentId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Payment details retrieved successfully\n *       404:\n *         description: Payment not found\n *       403:\n *         description: Unauthorized access\n */\nrouter.get('/:paymentId',\n  auth,\n  [\n    param('paymentId')\n      .isMongoId()\n      .withMessage('Valid payment ID is required'),\n    handleValidationErrors\n  ],\n  getPaymentDetails\n);\n\n/**\n * @swagger\n * /api/payments/{paymentId}/refund:\n *   post:\n *     summary: Request payment refund\n *     tags: [Payments]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: paymentId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - reason\n *             properties:\n *               amount:\n *                 type: number\n *                 description: Partial refund amount (optional, defaults to full refund)\n *               reason:\n *                 type: string\n *                 minLength: 10\n *                 maxLength: 500\n *     responses:\n *       200:\n *         description: Refund processed successfully\n *       400:\n *         description: Invalid refund request\n *       404:\n *         description: Payment not found\n */\nrouter.post('/:paymentId/refund',\n  auth,\n  [\n    param('paymentId')\n      .isMongoId()\n      .withMessage('Valid payment ID is required'),\n    body('amount')\n      .optional()\n      .isFloat({ min: 0.01 })\n      .withMessage('Refund amount must be positive'),\n    body('reason')\n      .isLength({ min: 10, max: 500 })\n      .withMessage('Refund reason must be between 10 and 500 characters'),\n    handleValidationErrors\n  ],\n  requestRefund\n);\n\n/**\n * @swagger\n * /api/payments/methods/supported:\n *   get:\n *     summary: Get supported payment methods\n *     tags: [Payments]\n *     parameters:\n *       - in: query\n *         name: country\n *         schema:\n *           type: string\n *           default: LB\n *       - in: query\n *         name: currency\n *         schema:\n *           type: string\n *           default: USD\n *     responses:\n *       200:\n *         description: Supported payment methods retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 country:\n *                   type: string\n *                 currency:\n *                   type: string\n *                 supportedMethods:\n *                   type: object\n */\nrouter.get('/methods/supported',\n  [\n    query('country')\n      .optional()\n      .isLength({ min: 2, max: 2 })\n      .withMessage('Country must be a 2-letter country code'),\n    query('currency')\n      .optional()\n      .isIn(['USD', 'LBP', 'EUR'])\n      .withMessage('Currency must be USD, LBP, or EUR'),\n    handleValidationErrors\n  ],\n  getSupportedPaymentMethods\n);\n\nmodule.exports = router;","size_bytes":11869}}}